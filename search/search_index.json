{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"api-cheat-sheet/","title":"API Cheat Sheet","text":"<p>Import conventions:</p> <pre><code>import pixeltable as pxt\nimport pixeltable.functions as pxtf\n</code></pre>"},{"location":"api-cheat-sheet/#operations-summary","title":"Operations summary","text":"Task Code Create a (mutable) table t = pxt.create_table('table_name', {'col_1': pxt.StringType(), 'col_2': pxt.IntType(), ...}) Create a view t = pxt.create_view('view_name', base_tbl, schema={'col_1': pxt.StringType, ...}, filter=base_tbl.col &gt; 10) Create a snapshot t = pxt.create_view('snapshot_name', t, is_snapshot=True) <p>The following functions apply to tables, views, and snapshots.</p> Task Code Use an existing table t = pxt.get_table('video_data') Rename a table pxt.move('video_data', 'vd') Move a table pxt.move('video_data', 'experiments.video_data') List tables pxt.list_tables() Delete a table pxt.drop_table('video_data')"},{"location":"api-cheat-sheet/#directories","title":"Directories","text":"Task Code Create a directory pxt.create_dir('experiments') Rename or move a directory pxt.move('experiments', 'project_x.experiments') Delete a directory f = pxt.rm_dir('experiments') List directories pxt.list_dirs('project_x')"},{"location":"api-cheat-sheet/#functions","title":"Functions","text":"Task Code Create a stored function pxt.create_function('func_name', ...) Load a stored function f = pxt.get_function('func_name') Rename a stored function pxt.move('func_name', 'better_name') Move a stored function pxt.move('func_name', 'experiments.func_name') Update a stored function pxt.update_function('func_name', ...) Delete a stored function pxt.drop_function('func_name')"},{"location":"api-cheat-sheet/#frame-extraction-for-video-data","title":"Frame extraction for video data","text":"<p>Create a table with video data and view for the frames:</p> <pre><code>v = pxt.create_table('tbl_name', [pxt.Column('video', pxt.VideoType())])\nfrom pixeltable.iterators import FrameIterator\nargs = {'video': v.video, 'fps': 0}\nf = pxt.create_view('frame_view_name', v, iterator_class=FrameIterator, iterator_args=args)\n</code></pre> <p><code>fps: 0</code> extracts frames at the original frame rate.</p>"},{"location":"api-cheat-sheet/#pixeltable-types","title":"Pixeltable types","text":"Pixeltable type Python type <code>pxt.StringType()</code> <code>str</code> <code>pxt.IntType()</code> <code>int</code> <code>pxt.FloatType()</code> <code>float</code> <code>pxt.BoolType()</code> <code>bool</code> <code>pxt.TimestampType()</code> <code>datetime.datetime</code> <code>pxt.JsonType()</code> lists and dicts that can be converted to JSON <code>pxt.ArrayType()</code> <code>numpy.ndarray</code> <code>pxt.ImageType()</code> <code>PIL.Image.Image</code> <code>pxt.VideoType()</code> <code>str</code> (the file path) <code>pxt.AudioType()</code> <code>str</code> (the file path)"},{"location":"api-cheat-sheet/#table-operations-summary","title":"Table operations summary","text":"Action Code Print table schema t.describe() Query a table t.select(t.col2, t.col3 + 5).where(t.col1 == 'green').show() Insert a single row into a table t.insert(col1='green', ...) Insert multiple rows into a table t.insert([{'col1': 'green', ...}, {'col1': 'red', ...}, ...]) Add a column t.add_column(new_col_name=pxt.IntType()) Rename a column t.rename_column('col_name', 'new_col_name') Drop a column t.drop_column('col_name') Undo the last update operation (add/rename/drop column or insert) t.revert()"},{"location":"api-cheat-sheet/#querying-a-table","title":"Querying a table","text":"Action Code Look at 10 rows t.show(10) Look at the oldest 10 rows t.head(n=10) Look at the most recently added 10 rows t.tail(n=10) Look at all rows t.collect() Iterate over all rows as dictionaries for row in t.collect(): ... Look at row for frame 15 t.[where][pixeltable.Table.where}(t.pos  == 15).show() Look at rows before index 15 t.where(t.pos &lt; 15).show(0) Look at rows before index 15 with RGB frames t.where((t.pos &lt; 15) &amp; (t.frame.mode == 'RGB')).collect() <p>Pixeltable supports the standard comparison operators (<code>&gt;=</code>, <code>&gt;</code>, <code>==</code>, <code>&lt;=</code>, <code>&lt;</code>). <code>== None</code> is the equivalent of <code>isna()/isnull()</code> in Pandas.</p> <p>Boolean operators are the same as in Pandas: <code>&amp;</code> for <code>and</code>, <code>|</code> for <code>or</code>, <code>~</code> for <code>not</code>. They also require parentheses, for example: <code>(t.pos &lt; 15) &amp; (t.frame.mode == 'RGB')</code> or <code>~(t.frame.mode == 'RGB')</code>.</p>"},{"location":"api-cheat-sheet/#selecting-and-transforming-columns","title":"Selecting and transforming columns","text":"Action Code Only retrieve the frame index and frame t.select(t.frame_idx, t.frame).collect() Look at frames rotated 90 degrees t.select(t.frame.rotate(90)).collect() Overlay frame with itself rotated 90 degrees t.select(pxt.functions.pil.image.blend(t.frame, t.frame.rotate(90))).collect()"},{"location":"api-cheat-sheet/#computed-columns","title":"Computed columns","text":"<p>The values in a computed column are automatically filled when data is added:</p> <pre><code>t.add_column(c_added=t.frame.rotate(30))\n</code></pre> <p>Alternatively:</p> <pre><code>t['c_added'] = t.frame.rotate(30)\n</code></pre> <p>Computed columns and media columns (video, image, audio) have attributes <code>errortype</code> and <code>errormsg</code>, which contain the exception type and string in rows where the computation expression or media type validation results in an exception (the column value itself will be <code>None</code>).</p> <p>Example:</p> <pre><code>t.where(t.c_added.errortype != None).select(t.c_added.errortype, t.c_added.errormsg).show()\n</code></pre> <p>returns the exception type and message for rows with an exception.</p>"},{"location":"api-cheat-sheet/#inserting-data-into-a-table","title":"Inserting data into a table","text":"<pre><code>t.insert([{'video': '/path/to/video1.mp4'}, {'video': '/path/to/video2.mp4'}])\n</code></pre> <p>Each row is a dictionary mapping column names to column values (do not provide values for computed columns).</p>"},{"location":"api-cheat-sheet/#attributes-and-methods-on-image-data","title":"Attributes and methods on image data","text":"<p>Images are currently represented as <code>PIL.Image.Image</code> instances in memory and support a lot of the attributes and methods documented here.</p> <p>Available attributes are: <code>mode</code>, <code>height</code>, <code>width</code>.</p> <p>Available methods are: <code>convert</code>, <code>crop</code>, <code>effect_spread</code>, <code>entropy</code>, <code>filter</code>, <code>getbands</code>, <code>getbbox</code>, <code>getchannel</code>, <code>getcolors</code>, <code>getextrema</code>, <code>getpalette</code>, <code>getpixel</code>, <code>getprojection</code>, <code>histogram</code>, <code>point</code>, <code>quantize</code>, <code>reduce</code>, <code>remap_palette</code>, <code>resize</code>, <code>rotate</code>, <code>transform</code>, <code>transpose</code>.</p> <p>Methods can be chained, for example: <code>t.frame.resize((224, 224)).rotate(90).convert('L')</code></p>"},{"location":"api-cheat-sheet/#functions_1","title":"Functions","text":"<p>Functions can be used to transform data, both during querying as well as when data is added to a table.</p> <pre><code>@pxt.udf(return_type=pxt.IntType(), param_types=[pxt.IntType()])\ndef add1(x):\n    return x + 1\n</code></pre> <p>For querying: <code>t.select(t.frame_idx, add1(t.frame_idx)).show()</code></p> <p>As a computed column: <code>t.add_column(c=add1(t.frame_idx))</code></p>"},{"location":"differences-with-pandas/","title":"Differences with Pandas","text":"Pandas Pixeltable reading data Read from file system with <code>pd.read_*</code> methods: eg, <code>.csv</code>, <code>.json</code>, <code>.parquet</code>, etc. In <code>pixeltable</code>, data is stored in tables. <code>cl.list_tables</code>, <code>tab = cl.get_table('mytable')</code> saving data (fist time) Save to file system, format of choice <code>table.insert</code> updating data to update data persistently, use <code>pd.write_*()</code>  to over-write or save new versions of the dataset <code>table.update</code> statements on tables allow for fine-grained persistent updates only on columns with specific values selecting rows <code>df[ df.col &gt; 1 ]</code> <code>tab.where(tab.col &gt; 1)</code> selecting rows (predicates) <code>df[(df.a &gt; 0) &amp; (df.b &gt; 0)]</code> <code>df.where((df.a &gt; 0) &amp; (df.b &gt; 0))</code> both will error if <code>and</code> or <code>or</code> is used. selecting columns (aka projection) <code>df[['col']]</code> <code>tab.select(tab.col)</code> new column with computed value <code>df.assign(new_col= fun(df.input_col1, df.input_col2,..))</code> or <code>df['new_col'] = fun(df.input_col1, df.input_col2,..))</code> (the latter acts in-place, modifying the df object) <code>tab.select(old_colA, old_colB,  new_col=fun(tab.input_col1, tab.input_col2,...))</code> computing new values row by row <code>df['new_col'] = df.apply(fun, axis=1)</code> <code>df.select(old_colA, old_colB, ..., new_col=pxt.function(fun)(tab.input_col1, tab.input_col2,...)</code>"},{"location":"getting-started/","title":"Getting Started with Pixeltable","text":"<p>This is a step-by-step guide to setting up a local installation of Pixeltable.</p> <p>You'll want to install Pixeltable in a Python virtual environment; we'll use Apache Miniconda in this guide, but any environment manager should work. Pixeltable works with Python 3.9, 3.10, or 3.11 running on Linux or MacOS.</p>"},{"location":"getting-started/#install-pixeltable","title":"Install Pixeltable","text":"<ol> <li> <p>Install Miniconda here:</p> <ul> <li>Installing Miniconda</li> </ul> </li> <li> <p>Create your environment:</p> <ul> <li><code>conda create --name pxt python=3.10</code></li> <li><code>conda activate pxt</code></li> </ul> </li> <li> <p>Install pixeltable and Jupyter inside the new environment:</p> <ul> <li><code>pip install pixeltable jupyter</code></li> </ul> </li> </ol>"},{"location":"getting-started/#create-a-notebook","title":"Create a Notebook","text":"<ol> <li> <p>Start your Jupyter notebook server:</p> <ul> <li><code>jupyter notebook</code></li> </ul> </li> <li> <p>Create a new notebook:</p> <ul> <li>Select \"Python 3 (ipykernel)\" as the kernel</li> <li>File / New / Notebook</li> </ul> </li> <li> <p>Test that everything is working by entering these commands into the notebook:</p> <ul> <li><code>import pixeltable as pxt</code></li> <li><code>pxt.list_tables()</code></li> </ul> </li> <li> <p>Wait a minute for Pixeltable to load; then you should see a message indicating that     Pixeltable has successfully connected to the database. (The call to <code>pxt.list_tables()</code>     will return an empty list, because you haven't created any tables yet.)</p> </li> </ol> <p>At this point, you're set up to start using Pixeltable! For a tour of what it can do, a good place to start is the Pixeltable Basics tutorial.</p>"},{"location":"overview/","title":"Pixeltable API","text":"<p>This is the API documentation for Pixeltable.</p> <p>Main Pixeltable documentation: https://pixeltable.readme.io/</p> <p>Pixeltable github project: https://github.com/pixeltable/pixeltable/</p>"},{"location":"api/client/","title":"Pixeltable","text":"<p>Insertable tables, views, and snapshots all have a tabular interface and are generically referred to as \"tables\" below.</p>"},{"location":"api/client/#overview","title":"Overview","text":"Table Operations <code>create_table</code> Create a new (insertable) table <code>create_view</code> Create a new view <code>drop_table</code> Delete a table <code>get_table</code> Get a handle to a table <code>list_tables</code> List the tables in a directory Directory Operations <code>create_dir</code> Create a directory <code>list_dirs</code> List the directories in a directory <code>rm_dir</code> Remove a directory Misc <code>configure_logging</code> Configure logging <code>init</code> Initialize Pixeltable runtime now (if not already initialized) <code>move</code> Move a schema object to a new directory and/or rename a schema object"},{"location":"api/client/#pixeltable","title":"pixeltable","text":""},{"location":"api/client/#pixeltable.create_table","title":"create_table","text":"<pre><code>create_table(path_str: str, schema: dict[str, Any], *, primary_key: Optional[Union[str, list[str]]] = None, num_retained_versions: int = 10, comment: str = '') -&gt; InsertableTable\n</code></pre> <p>Create a new <code>InsertableTable</code>.</p> <p>Parameters:</p> <ul> <li> <code>path_str</code>             (<code>str</code>)         \u2013          <p>Path to the table.</p> </li> <li> <code>schema</code>             (<code>dict[str, Any]</code>)         \u2013          <p>dictionary mapping column names to column types, value expressions, or to column specifications.</p> </li> <li> <code>num_retained_versions</code>             (<code>int</code>, default:                 <code>10</code> )         \u2013          <p>Number of versions of the table to retain.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>InsertableTable</code>         \u2013          <p>The newly created table.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>if the path already exists or is invalid.</p> </li> </ul> <p>Examples:</p> <p>Create a table with an int and a string column:</p> <pre><code>&gt;&gt;&gt; table = cl.create_table('my_table', schema={'col1': IntType(), 'col2': StringType()})\n</code></pre>"},{"location":"api/client/#pixeltable.create_view","title":"create_view","text":"<pre><code>create_view(path_str: str, base: Table, *, schema: Optional[dict[str, Any]] = None, filter: Optional[Predicate] = None, is_snapshot: bool = False, iterator: Optional[tuple[type[ComponentIterator], dict[str, Any]]] = None, num_retained_versions: int = 10, comment: str = '', ignore_errors: bool = False) -&gt; View\n</code></pre> <p>Create a new <code>View</code>.</p> <p>Parameters:</p> <ul> <li> <code>path_str</code>             (<code>str</code>)         \u2013          <p>Path to the view.</p> </li> <li> <code>base</code>             (<code>Table</code>)         \u2013          <p>Table (ie, table or view or snapshot) to base the view on.</p> </li> <li> <code>schema</code>             (<code>Optional[dict[str, Any]]</code>, default:                 <code>None</code> )         \u2013          <p>dictionary mapping column names to column types, value expressions, or to column specifications.</p> </li> <li> <code>filter</code>             (<code>Optional[Predicate]</code>, default:                 <code>None</code> )         \u2013          <p>Predicate to filter rows of the base table.</p> </li> <li> <code>is_snapshot</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether the view is a snapshot.</p> </li> <li> <code>iterator_class</code>         \u2013          <p>Class of the iterator to use for the view.</p> </li> <li> <code>iterator_args</code>         \u2013          <p>Arguments to pass to the iterator class.</p> </li> <li> <code>num_retained_versions</code>             (<code>int</code>, default:                 <code>10</code> )         \u2013          <p>Number of versions of the view to retain.</p> </li> <li> <code>ignore_errors</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>if True, fail silently if the path already exists or is invalid.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>View</code>         \u2013          <p>The newly created view.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>if the path already exists or is invalid.</p> </li> </ul> <p>Examples:</p> <p>Create a view with an additional int and a string column and a filter:</p> <pre><code>&gt;&gt;&gt; view = cl.create_view(\n    'my_view', base, schema={'col3': IntType(), 'col4': StringType()}, filter=base.col1 &gt; 10)\n</code></pre> <p>Create a table snapshot:</p> <pre><code>&gt;&gt;&gt; snapshot_view = cl.create_view('my_snapshot_view', base, is_snapshot=True)\n</code></pre> <p>Create an immutable view with additional computed columns and a filter:</p> <pre><code>&gt;&gt;&gt; snapshot_view = cl.create_view(\n    'my_snapshot', base, schema={'col3': base.col2 + 1}, filter=base.col1 &gt; 10, is_snapshot=True)\n</code></pre>"},{"location":"api/client/#pixeltable.drop_table","title":"drop_table","text":"<pre><code>drop_table(path: str, force: bool = False, ignore_errors: bool = False) -&gt; None\n</code></pre> <p>Drop a table.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>Path to the table.</p> </li> <li> <code>force</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to drop the table even if it has unsaved changes.</p> </li> <li> <code>ignore_errors</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>Whether to ignore errors if the table does not exist.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path does not exist or does not designate a table and ignore_errors is False.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cl.drop_table('my_table')\n</code></pre>"},{"location":"api/client/#pixeltable.get_table","title":"get_table","text":"<pre><code>get_table(path: str) -&gt; Table\n</code></pre> <p>Get a handle to a table (including views and snapshots).</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>Path to the table.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Table</code>         \u2013          <p>A <code>InsertableTable</code> or <code>View</code> object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path does not exist or does not designate a table.</p> </li> </ul> <p>Examples:</p> <p>Get handle for a table in the top-level directory:</p> <pre><code>&gt;&gt;&gt; table = cl.get_table('my_table')\n</code></pre> <p>For a table in a subdirectory:</p> <pre><code>&gt;&gt;&gt; table = cl.get_table('subdir.my_table')\n</code></pre> <p>For a snapshot in the top-level directory:</p> <pre><code>&gt;&gt;&gt; table = cl.get_table('my_snapshot')\n</code></pre>"},{"location":"api/client/#pixeltable.list_tables","title":"list_tables","text":"<pre><code>list_tables(dir_path: str = '', recursive: bool = True) -&gt; list[str]\n</code></pre> <p>List the tables in a directory.</p> <p>Parameters:</p> <ul> <li> <code>dir_path</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Path to the directory. Defaults to the root directory.</p> </li> <li> <code>recursive</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to list tables in subdirectories as well.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>A list of table paths.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path does not exist or does not designate a directory.</p> </li> </ul> <p>Examples:</p> <p>List tables in top-level directory:</p> <pre><code>&gt;&gt;&gt; cl.list_tables()\n['my_table', ...]\n</code></pre> <p>List tables in 'dir1':</p> <pre><code>&gt;&gt;&gt; cl.list_tables('dir1')\n[...]\n</code></pre>"},{"location":"api/client/#pixeltable.create_dir","title":"create_dir","text":"<pre><code>create_dir(path_str: str, ignore_errors: bool = False) -&gt; None\n</code></pre> <p>Create a directory.</p> <p>Parameters:</p> <ul> <li> <code>path_str</code>             (<code>str</code>)         \u2013          <p>Path to the directory.</p> </li> <li> <code>ignore_errors</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>if True, silently returns on error</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path already exists or the parent is not a directory.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cl.create_dir('my_dir')\n</code></pre> <p>Create a subdirectory:</p> <pre><code>&gt;&gt;&gt; cl.create_dir('my_dir.sub_dir')\n</code></pre>"},{"location":"api/client/#pixeltable.list_dirs","title":"list_dirs","text":"<pre><code>list_dirs(path_str: str = '', recursive: bool = True) -&gt; list[str]\n</code></pre> <p>List the directories in a directory.</p> <p>Parameters:</p> <ul> <li> <code>path_str</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Path to the directory.</p> </li> <li> <code>recursive</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>Whether to list subdirectories recursively.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>         \u2013          <p>List of directory paths.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path does not exist or does not designate a directory.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cl.list_dirs('my_dir', recursive=True)\n['my_dir', 'my_dir.sub_dir1']\n</code></pre>"},{"location":"api/client/#pixeltable.rm_dir","title":"rm_dir","text":"<pre><code>rm_dir(path_str: str) -&gt; None\n</code></pre> <p>Remove a directory.</p> <p>Parameters:</p> <ul> <li> <code>path_str</code>             (<code>str</code>)         \u2013          <p>Path to the directory.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the path does not exist or does not designate a directory or if the directory is not empty.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cl.rm_dir('my_dir')\n</code></pre> <p>Remove a subdirectory:</p> <pre><code>&gt;&gt;&gt; cl.rm_dir('my_dir.sub_dir')\n</code></pre>"},{"location":"api/client/#pixeltable.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Initializes the Pixeltable environment.</p>"},{"location":"api/client/#pixeltable.move","title":"move","text":"<pre><code>move(path: str, new_path: str) -&gt; None\n</code></pre> <p>Move a schema object to a new directory and/or rename a schema object.</p> <p>Parameters:</p> <ul> <li> <code>path</code>             (<code>str</code>)         \u2013          <p>absolute path to the existing schema object.</p> </li> <li> <code>new_path</code>             (<code>str</code>)         \u2013          <p>absolute new path for the schema object.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If path does not exist or new_path already exists.</p> </li> </ul> <p>Examples:</p> <p>Move a table to a different directory:</p> <pre><code>&gt;&gt;&gt;&gt; cl.move('dir1.my_table', 'dir2.my_table')\n</code></pre> <p>Rename a table:</p> <pre><code>&gt;&gt;&gt;&gt; cl.move('dir1.my_table', 'dir1.new_name')\n</code></pre>"},{"location":"api/data-frame/","title":"DataFrame","text":"<p><code>DataFrame</code> represents a query against a specific table. Unlike computation container frameworks like pandas or Dask, Pixeltable dataframes do not hold data or allow you to update data (use insert/update/delete for that purpose). Another difference to pandas is that query execution needs to be initiated explicitly in order to return results.</p>"},{"location":"api/data-frame/#overview","title":"Overview","text":"Query Construction <code>select</code> Select output expressions <code>where</code> Filter table rows <code>group_by</code> Group table rows in order to apply aggregate functions <code>order_by</code> Order output rows <code>limit</code> Limit the number of output rows Query Execution <code>collect</code> Return all output rows <code>show</code> Return a number of output rows <code>head</code> Return the oldest rows <code>tail</code> Return the most recently added rows Data Export <code>to_pytorch_dataset</code> Return the query result as a pytorch <code>IterableDataset</code> <code>to_coco_dataset</code> Return the query result as a COCO dataset"},{"location":"api/data-frame/#pixeltable.DataFrame","title":"pixeltable.DataFrame","text":""},{"location":"api/data-frame/#pixeltable.DataFrame.select","title":"select","text":"<pre><code>select(*items: Any, **named_items: Any) -&gt; DataFrame\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.where","title":"where","text":"<pre><code>where(pred: Predicate) -&gt; DataFrame\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.group_by","title":"group_by","text":"<pre><code>group_by(*grouping_items: Any) -&gt; DataFrame\n</code></pre> <p>Add a group-by clause to this DataFrame. Variants: - group_by(): group a component view by their respective base table rows - group_by(, ...): group by the given expressions"},{"location":"api/data-frame/#pixeltable.DataFrame.order_by","title":"order_by","text":"<pre><code>order_by(*expr_list: Expr, asc: bool = True) -&gt; DataFrame\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.limit","title":"limit","text":"<pre><code>limit(n: int) -&gt; DataFrame\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.collect","title":"collect","text":"<pre><code>collect() -&gt; DataFrameResultSet\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.show","title":"show","text":"<pre><code>show(n: int = 20) -&gt; DataFrameResultSet\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.head","title":"head","text":"<pre><code>head(n: int = 10) -&gt; DataFrameResultSet\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.tail","title":"tail","text":"<pre><code>tail(n: int = 10) -&gt; DataFrameResultSet\n</code></pre>"},{"location":"api/data-frame/#pixeltable.DataFrame.to_pytorch_dataset","title":"to_pytorch_dataset","text":"<pre><code>to_pytorch_dataset(image_format: str = 'pt') -&gt; 'torch.utils.data.IterableDataset'\n</code></pre> <p>Convert the dataframe to a pytorch IterableDataset suitable for parallel loading with torch.utils.data.DataLoader.</p> <p>This method requires pyarrow &gt;= 13, torch and torchvision to work.</p> <p>This method serializes data so it can be read from disk efficiently and repeatedly without re-executing the query. This data is cached to disk for future re-use.</p> <p>Parameters:</p> <ul> <li> <code>image_format</code>             (<code>str</code>, default:                 <code>'pt'</code> )         \u2013          <p>format of the images. Can be 'pt' (pytorch tensor) or 'np' (numpy array).     'np' means image columns return as an RGB uint8 array of shape HxWxC.     'pt' means image columns return as a CxHxW tensor with values in [0,1] and type torch.float32.         (the format output by torchvision.transforms.ToTensor())</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>'torch.utils.data.IterableDataset'</code>         \u2013          <p>A pytorch IterableDataset: Columns become fields of the dataset, where rows are returned as a dictionary compatible with torch.utils.data.DataLoader default collation.</p> </li> </ul> Constraints <p>The default collate_fn for torch.data.util.DataLoader cannot represent null values as part of a pytorch tensor when forming batches. These values will raise an exception while running the dataloader.</p> <p>If you have them, you can work around None values by providing your custom collate_fn to the DataLoader (and have your model handle it). Or, if these are not meaningful values within a minibtach, you can modify or remove any such values through selections and filters prior to calling to_pytorch_dataset().</p>"},{"location":"api/data-frame/#pixeltable.DataFrame.to_coco_dataset","title":"to_coco_dataset","text":"<pre><code>to_coco_dataset() -&gt; Path\n</code></pre> <p>Convert the dataframe to a COCO dataset. This dataframe must return a single json-typed output column in the following format: {     'image': PIL.Image.Image,     'annotations': [         {             'bbox': [x: int, y: int, w: int, h: int],             'category': str | int,         },         ...     ], }</p> <p>Returns:</p> <ul> <li> <code>Path</code>         \u2013          <p>Path to the COCO dataset file.</p> </li> </ul>"},{"location":"api/insertable-table/","title":"InsertableTable","text":"<p>Instances of class <code>InsertableTable</code> are handles to Pixeltable tables.</p> <p>Use this handle to query and update the table and to add and drop columns.</p> <p><code>InsertableTable</code> instances are created by calling <code>pxt.create_table</code> or <code>pxt.get_table</code>.</p>"},{"location":"api/insertable-table/#overview","title":"Overview","text":"Column Operations <code>add_column</code> Adds a column to the table <code>drop_column</code> Remove a column from the table <code>rename_column</code> Rename a column Data Operations <code>insert</code> Insert rows into table <code>update</code> Upate rows in table <code>delete</code> Delete rows from table Versioning <code>revert</code> Reverts the last change"},{"location":"api/insertable-table/#pixeltable.InsertableTable","title":"pixeltable.InsertableTable","text":"<p>A <code>Table</code> that allows inserting and deleting rows.</p>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.add_column","title":"add_column","text":"<pre><code>add_column(*, type: Optional[ColumnType] = None, stored: Optional[bool] = None, print_stats: bool = False, **kwargs: Any) -&gt; UpdateStatus\n</code></pre> <p>Adds a column to the table.</p> <p>Parameters:</p> <ul> <li> <code>kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Exactly one keyword argument of the form <code>column-name=type|value-expression</code>.</p> </li> <li> <code>type</code>             (<code>Optional[ColumnType]</code>, default:                 <code>None</code> )         \u2013          <p>The type of the column. Only valid and required if <code>value-expression</code> is a Callable.</p> </li> <li> <code>stored</code>             (<code>Optional[bool]</code>, default:                 <code>None</code> )         \u2013          <p>Whether the column is materialized and stored or computed on demand. Only valid for image columns.</p> </li> <li> <code>print_stats</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If <code>True</code>, print execution metrics.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>UpdateStatus</code>         \u2013          <p>execution status</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column name is invalid or already exists.</p> </li> </ul> <p>Examples:</p> <p>Add an int column with <code>None</code> values:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(new_col=IntType())\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['new_col'] = IntType()\n</code></pre> <p>For a table with int column <code>int_col</code>, add a column that is the factorial of <code>int_col</code>. The names of the parameters of the Callable must correspond to existing column names (the column values are then passed as arguments to the Callable). In this case, the column type needs to be specified explicitly:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(factorial=lambda int_col: math.factorial(int_col), type=IntType())\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['factorial'] = {'value': lambda int_col: math.factorial(int_col), 'type': IntType()}\n</code></pre> <p>For a table with an image column <code>frame</code>, add an image column <code>rotated</code> that rotates the image by 90 degrees. In this case, the column type is inferred from the expression. Also, the column is not stored (by default, computed image columns are not stored but recomputed on demand):</p> <pre><code>&gt;&gt;&gt; tbl.add_column(rotated=tbl.frame.rotate(90))\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['rotated'] = tbl.frame.rotate(90)\n</code></pre> <p>Do the same, but now the column is stored:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(rotated=tbl.frame.rotate(90), stored=True)\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['rotated'] = {'value': tbl.frame.rotate(90), 'stored': True}\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.drop_column","title":"drop_column","text":"<pre><code>drop_column(name: str) -&gt; None\n</code></pre> <p>Drop a column from the table.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the column to drop.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column does not exist or if it is referenced by a computed column.</p> </li> </ul> <p>Examples:</p> <p>Drop column <code>factorial</code>:</p> <pre><code>&gt;&gt;&gt; tbl.drop_column('factorial')\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.rename_column","title":"rename_column","text":"<pre><code>rename_column(old_name: str, new_name: str) -&gt; None\n</code></pre> <p>Rename a column.</p> <p>Parameters:</p> <ul> <li> <code>old_name</code>             (<code>str</code>)         \u2013          <p>The current name of the column.</p> </li> <li> <code>new_name</code>             (<code>str</code>)         \u2013          <p>The new name of the column.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column does not exist or if the new name is invalid or already exists.</p> </li> </ul> <p>Examples:</p> <p>Rename column <code>factorial</code> to <code>fac</code>:</p> <pre><code>&gt;&gt;&gt; tbl.rename_column('factorial', 'fac')\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.insert","title":"insert","text":"<pre><code>insert(*args, **kwargs) -&gt; UpdateStatus\n</code></pre> <p>Insert rows into table.</p> <p>To insert multiple rows at a time:</p> <p><code>insert(rows: List[Dict[str, Any]], print_stats: bool = False, fail_on_exception: bool = True)</code></p> <p>To insert just a single row, you can use the more convenient syntax: <code>insert(print_stats: bool = False, fail_on_exception: bool = True, **kwargs: Any)</code></p> <p>Parameters:</p> <ul> <li> <code>rows</code>         \u2013          <p>(if inserting multiple rows) A list of rows to insert, each of which is a dictionary mapping column names to values.</p> </li> <li> <code>kwargs</code>         \u2013          <p>(if inserting a single row) keyword-argument pairs representing column names and values.</p> </li> <li> <code>print_stats</code>         \u2013          <p>If <code>True</code>, print statistics about the cost of computed columns.</p> </li> <li> <code>fail_on_exception</code>         \u2013          <p>Determines how exceptions in computed columns and invalid media files (e.g., corrupt images) are handled. If <code>False</code>, store error information (accessible as column properties 'errortype' and 'errormsg') for those cases, but continue inserting rows. If <code>True</code>, raise an exception that aborts the insert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>UpdateStatus</code>         \u2013          <p>execution status</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>if a row does not match the table schema or contains values for computed columns</p> </li> </ul> <p>Examples:</p> <p>Insert two rows into a table with three int columns <code>a</code>, <code>b</code>, and <code>c</code>. Column <code>c</code> is nullable.</p> <pre><code>&gt;&gt;&gt; tbl.insert([{'a': 1, 'b': 1, 'c': 1}, {'a': 2, 'b': 2}])\n</code></pre> <p>Insert a single row into a table with three int columns <code>a</code>, <code>b</code>, and <code>c</code>.</p> <pre><code>&gt;&gt;&gt; tbl.insert(a=1, b=1, c=1)\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.update","title":"update","text":"<pre><code>update(value_spec: dict[str, Any], where: Optional['pixeltable.exprs.Predicate'] = None, cascade: bool = True) -&gt; UpdateStatus\n</code></pre> <p>Update rows in this table.</p> <p>Parameters:</p> <ul> <li> <code>value_spec</code>             (<code>dict[str, Any]</code>)         \u2013          <p>a dictionary mapping column names to literal values or Pixeltable expressions.</p> </li> <li> <code>where</code>             (<code>Optional['pixeltable.exprs.Predicate']</code>, default:                 <code>None</code> )         \u2013          <p>a Predicate to filter rows to update.</p> </li> <li> <code>cascade</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>if True, also update all computed columns that transitively depend on the updated columns.</p> </li> </ul> <p>Examples:</p> <p>Set column <code>int_col</code> to 1 for all rows:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': 1})\n</code></pre> <p>Set column <code>int_col</code> to 1 for all rows where <code>int_col</code> is 0:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': 1}, where=tbl.int_col == 0)\n</code></pre> <p>Set <code>int_col</code> to the value of <code>other_int_col</code> + 1:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': tbl.other_int_col + 1})\n</code></pre> <p>Increment <code>int_col</code> by 1 for all rows where <code>int_col</code> is 0:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': tbl.int_col + 1}, where=tbl.int_col == 0)\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.delete","title":"delete","text":"<pre><code>delete(where: Optional['pixeltable.exprs.Predicate'] = None) -&gt; UpdateStatus\n</code></pre> <p>Delete rows in this table.</p> <p>Parameters:</p> <ul> <li> <code>where</code>             (<code>Optional['pixeltable.exprs.Predicate']</code>, default:                 <code>None</code> )         \u2013          <p>a Predicate to filter rows to delete.</p> </li> </ul> <p>Examples:</p> <p>Delete all rows in a table:</p> <pre><code>&gt;&gt;&gt; tbl.delete()\n</code></pre> <p>Delete all rows in a table where column <code>a</code> is greater than 5:</p> <pre><code>&gt;&gt;&gt; tbl.delete(tbl.a &gt; 5)\n</code></pre>"},{"location":"api/insertable-table/#pixeltable.InsertableTable.revert","title":"revert","text":"<pre><code>revert() -&gt; None\n</code></pre> <p>Reverts the table to the previous version.</p> <p>.. warning::     This operation is irreversible.</p>"},{"location":"api/table/","title":"Table","text":"<p>The <code>Table</code> base class provides convenience functions for querying tables and views without having to construct <code>DataFrame</code> instances explicitly.</p>"},{"location":"api/table/#pixeltable.Table","title":"pixeltable.Table","text":"<p>Base class for all tabular SchemaObjects.</p>"},{"location":"api/table/#pixeltable.Table.__getattr__","title":"__getattr__","text":"<pre><code>__getattr__(col_name: str) -&gt; 'pixeltable.exprs.ColumnRef'\n</code></pre> <p>Return a ColumnRef for the given column name.</p>"},{"location":"api/table/#pixeltable.Table.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: object) -&gt; Union['pixeltable.exprs.ColumnRef', 'pixeltable.dataframe.DataFrame']\n</code></pre> <p>Return a ColumnRef for the given column name, or a DataFrame for the given slice.</p>"},{"location":"api/table/#pixeltable.Table.df","title":"df","text":"<pre><code>df() -&gt; 'pixeltable.dataframe.DataFrame'\n</code></pre> <p>Return a DataFrame for this table.</p>"},{"location":"api/table/#pixeltable.Table.select","title":"select","text":"<pre><code>select(*items: Any, **named_items: Any) -&gt; 'pixeltable.dataframe.DataFrame'\n</code></pre> <p>Return a DataFrame for this table.</p>"},{"location":"api/table/#pixeltable.Table.where","title":"where","text":"<pre><code>where(pred: 'exprs.Predicate') -&gt; 'pixeltable.dataframe.DataFrame'\n</code></pre> <p>Return a DataFrame for this table.</p>"},{"location":"api/table/#pixeltable.Table.show","title":"show","text":"<pre><code>show(*args, **kwargs) -&gt; 'pixeltable.dataframe.DataFrameResultSet'\n</code></pre> <p>Return rows from this table.</p>"},{"location":"api/table/#pixeltable.Table.head","title":"head","text":"<pre><code>head(*args, **kwargs) -&gt; 'pixeltable.dataframe.DataFrameResultSet'\n</code></pre> <p>Return the first n rows inserted into this table.</p>"},{"location":"api/table/#pixeltable.Table.tail","title":"tail","text":"<pre><code>tail(*args, **kwargs) -&gt; 'pixeltable.dataframe.DataFrameResultSet'\n</code></pre> <p>Return the last n rows inserted into this table.</p>"},{"location":"api/table/#pixeltable.Table.count","title":"count","text":"<pre><code>count() -&gt; int\n</code></pre> <p>Return the number of rows in this table.</p>"},{"location":"api/table/#pixeltable.Table.describe","title":"describe","text":"<pre><code>describe() -&gt; None\n</code></pre>"},{"location":"api/view/","title":"View","text":"<p>Instances of class <code>View</code> are handles to Pixeltable views and snapshots (the latter require <code>is_snapshot=True</code> when creating the view).</p> <p>Use this handle to query and update the view and to add and drop columns.</p> <p><code>View</code> instances are created by calling <code>pxt.create_view</code> or <code>pxt.get_table</code>.</p>"},{"location":"api/view/#overview","title":"Overview","text":"Column Operations <code>add_column</code> Adds a column to the view <code>drop_column</code> Removes a column from the view <code>rename_column</code> Renames a column Data Operations <code>update</code> Update rows in the view Versioning <code>revert</code> Revert the last change to the view"},{"location":"api/view/#pixeltable.View","title":"pixeltable.View","text":"<p>A <code>Table</code> that presents a virtual view of another table (or view).</p> <p>A view is typically backed by a store table, which records the view's columns and is joined back to the bases at query execution time. The exception is a snapshot view without a predicate and without additional columns: in that case, the view is simply a reference to a specific set of base versions.</p>"},{"location":"api/view/#pixeltable.View.add_column","title":"add_column","text":"<pre><code>add_column(*, type: Optional[ColumnType] = None, stored: Optional[bool] = None, print_stats: bool = False, **kwargs: Any) -&gt; UpdateStatus\n</code></pre> <p>Adds a column to the table.</p> <p>Parameters:</p> <ul> <li> <code>kwargs</code>             (<code>Any</code>, default:                 <code>{}</code> )         \u2013          <p>Exactly one keyword argument of the form <code>column-name=type|value-expression</code>.</p> </li> <li> <code>type</code>             (<code>Optional[ColumnType]</code>, default:                 <code>None</code> )         \u2013          <p>The type of the column. Only valid and required if <code>value-expression</code> is a Callable.</p> </li> <li> <code>stored</code>             (<code>Optional[bool]</code>, default:                 <code>None</code> )         \u2013          <p>Whether the column is materialized and stored or computed on demand. Only valid for image columns.</p> </li> <li> <code>print_stats</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>If <code>True</code>, print execution metrics.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>UpdateStatus</code>         \u2013          <p>execution status</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column name is invalid or already exists.</p> </li> </ul> <p>Examples:</p> <p>Add an int column with <code>None</code> values:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(new_col=IntType())\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['new_col'] = IntType()\n</code></pre> <p>For a table with int column <code>int_col</code>, add a column that is the factorial of <code>int_col</code>. The names of the parameters of the Callable must correspond to existing column names (the column values are then passed as arguments to the Callable). In this case, the column type needs to be specified explicitly:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(factorial=lambda int_col: math.factorial(int_col), type=IntType())\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['factorial'] = {'value': lambda int_col: math.factorial(int_col), 'type': IntType()}\n</code></pre> <p>For a table with an image column <code>frame</code>, add an image column <code>rotated</code> that rotates the image by 90 degrees. In this case, the column type is inferred from the expression. Also, the column is not stored (by default, computed image columns are not stored but recomputed on demand):</p> <pre><code>&gt;&gt;&gt; tbl.add_column(rotated=tbl.frame.rotate(90))\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['rotated'] = tbl.frame.rotate(90)\n</code></pre> <p>Do the same, but now the column is stored:</p> <pre><code>&gt;&gt;&gt; tbl.add_column(rotated=tbl.frame.rotate(90), stored=True)\n</code></pre> <p>Alternatively, this can also be expressed as:</p> <pre><code>&gt;&gt;&gt; tbl['rotated'] = {'value': tbl.frame.rotate(90), 'stored': True}\n</code></pre>"},{"location":"api/view/#pixeltable.View.drop_column","title":"drop_column","text":"<pre><code>drop_column(name: str) -&gt; None\n</code></pre> <p>Drop a column from the table.</p> <p>Parameters:</p> <ul> <li> <code>name</code>             (<code>str</code>)         \u2013          <p>The name of the column to drop.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column does not exist or if it is referenced by a computed column.</p> </li> </ul> <p>Examples:</p> <p>Drop column <code>factorial</code>:</p> <pre><code>&gt;&gt;&gt; tbl.drop_column('factorial')\n</code></pre>"},{"location":"api/view/#pixeltable.View.rename_column","title":"rename_column","text":"<pre><code>rename_column(old_name: str, new_name: str) -&gt; None\n</code></pre> <p>Rename a column.</p> <p>Parameters:</p> <ul> <li> <code>old_name</code>             (<code>str</code>)         \u2013          <p>The current name of the column.</p> </li> <li> <code>new_name</code>             (<code>str</code>)         \u2013          <p>The new name of the column.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>Error</code>           \u2013          <p>If the column does not exist or if the new name is invalid or already exists.</p> </li> </ul> <p>Examples:</p> <p>Rename column <code>factorial</code> to <code>fac</code>:</p> <pre><code>&gt;&gt;&gt; tbl.rename_column('factorial', 'fac')\n</code></pre>"},{"location":"api/view/#pixeltable.View.update","title":"update","text":"<pre><code>update(value_spec: dict[str, Any], where: Optional['pixeltable.exprs.Predicate'] = None, cascade: bool = True) -&gt; UpdateStatus\n</code></pre> <p>Update rows in this table.</p> <p>Parameters:</p> <ul> <li> <code>value_spec</code>             (<code>dict[str, Any]</code>)         \u2013          <p>a dictionary mapping column names to literal values or Pixeltable expressions.</p> </li> <li> <code>where</code>             (<code>Optional['pixeltable.exprs.Predicate']</code>, default:                 <code>None</code> )         \u2013          <p>a Predicate to filter rows to update.</p> </li> <li> <code>cascade</code>             (<code>bool</code>, default:                 <code>True</code> )         \u2013          <p>if True, also update all computed columns that transitively depend on the updated columns.</p> </li> </ul> <p>Examples:</p> <p>Set column <code>int_col</code> to 1 for all rows:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': 1})\n</code></pre> <p>Set column <code>int_col</code> to 1 for all rows where <code>int_col</code> is 0:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': 1}, where=tbl.int_col == 0)\n</code></pre> <p>Set <code>int_col</code> to the value of <code>other_int_col</code> + 1:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': tbl.other_int_col + 1})\n</code></pre> <p>Increment <code>int_col</code> by 1 for all rows where <code>int_col</code> is 0:</p> <pre><code>&gt;&gt;&gt; tbl.update({'int_col': tbl.int_col + 1}, where=tbl.int_col == 0)\n</code></pre>"},{"location":"api/view/#pixeltable.View.revert","title":"revert","text":"<pre><code>revert() -&gt; None\n</code></pre> <p>Reverts the table to the previous version.</p> <p>.. warning::     This operation is irreversible.</p>"},{"location":"howto/udfs-in-pixeltable/","title":"UDFs in Pixeltable","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q pixeltable\n</pre> %pip install -q pixeltable In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\n# Create the directory and table\npxt.create_dir('udf_demo', ignore_errors=True)\npxt.drop_table('udf_demo.strings', ignore_errors=True)\nt = pxt.create_table('udf_demo.strings', {'input': pxt.StringType()})\n\n# Add some sample data\nt.insert([{'input': 'Hello, world!'}, {'input': 'You can do a lot with Pixeltable UDFs.'}])\nt.show()\n</pre> import pixeltable as pxt  # Create the directory and table pxt.create_dir('udf_demo', ignore_errors=True) pxt.drop_table('udf_demo.strings', ignore_errors=True) t = pxt.create_table('udf_demo.strings', {'input': pxt.StringType()})  # Add some sample data t.insert([{'input': 'Hello, world!'}, {'input': 'You can do a lot with Pixeltable UDFs.'}]) t.show() <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated table `strings`.\nInserting rows into `strings`: 2 rows [00:00, 947.76 rows/s]\nInserted 2 rows with 0 errors.\n</pre> Out[1]: input Hello, world! You can do a lot with Pixeltable UDFs. <p>For our first working example, let's do something slightly more interesting: write a function to extract the longest word from a sentence. (If there are ties for the longest word, we choose the first word among those ties.) In Python, that might look something like this:</p> In\u00a0[2]: Copied! <pre>import numpy as np\n\ndef longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:\n    words = sentence.split()\n    if strip_punctuation:  # Remove non-alphanumeric characters from each word\n        words = [''.join(filter(str.isalnum, word)) for word in words]\n    i = np.argmax([len(word) for word in words])\n    return words[i]\n</pre> import numpy as np  def longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:     words = sentence.split()     if strip_punctuation:  # Remove non-alphanumeric characters from each word         words = [''.join(filter(str.isalnum, word)) for word in words]     i = np.argmax([len(word) for word in words])     return words[i] In\u00a0[4]: Copied! <pre>longest_word(\"Let's check that it works.\", strip_punctuation=True)\n</pre> longest_word(\"Let's check that it works.\", strip_punctuation=True) Out[4]: <pre>'check'</pre> <p>The <code>longest_word</code> Python function isn't a Pixeltable UDF (yet); it operates on individual strings, not columns of strings. Adding the decorator turns it into a UDF:</p> In\u00a0[5]: Copied! <pre>@pxt.udf\ndef longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:\n    words = sentence.split()\n    if strip_punctuation:  # Remove non-alphanumeric characters from each word\n        words = [''.join(filter(str.isalnum, word)) for word in words]\n    i = np.argmax([len(word) for word in words])\n    return words[i]\n</pre> @pxt.udf def longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:     words = sentence.split()     if strip_punctuation:  # Remove non-alphanumeric characters from each word         words = [''.join(filter(str.isalnum, word)) for word in words]     i = np.argmax([len(word) for word in words])     return words[i] <p>Now we can use it to create a computed column. Pixeltable orchestrates the computation like it does with any other function, applying the UDF in turn to each existing row of the table, then updating incrementally each time a new row is added.</p> In\u00a0[6]: Copied! <pre>t['longest_word'] = longest_word(t.input)\nt.show()\n</pre> t['longest_word'] = longest_word(t.input) t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00, 303.86 cells/s]\nAdded 2 column values with 0 errors.\n</pre> Out[6]: input longest_word Hello, world! Hello, You can do a lot with Pixeltable UDFs. Pixeltable In\u00a0[7]: Copied! <pre>t.insert(input='Pixeltable updates tables incrementally.')\nt.show()\n</pre> t.insert(input='Pixeltable updates tables incrementally.') t.show() <pre>Computing cells:   0%|                                                    | 0/1 [00:00&lt;?, ? cells/s]\nInserting rows into `strings`: 1 rows [00:00, 474.36 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 200.81 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[7]: input longest_word Hello, world! Hello, You can do a lot with Pixeltable UDFs. Pixeltable Pixeltable updates tables incrementally. incrementally. <p>Oops, those trailing punctuation marks are kind of annoying. Let's add another column, this time using the handy <code>strip_punctuation</code> parameter from our UDF. (We could alternatively drop the first column before adding the new one, but for purposes of this tutorial it's convenient to see how Pixeltable executes both variants side-by-side.) Note how columns such as <code>t.input</code> and constants such as <code>True</code> can be freely intermixed as arguments to the UDF.</p> In\u00a0[8]: Copied! <pre>t['longest_word_2'] = longest_word(t.input, strip_punctuation=True)\nt.show()\n</pre> t['longest_word_2'] = longest_word(t.input, strip_punctuation=True) t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:00&lt;00:00, 459.15 cells/s]\nAdded 3 column values with 0 errors.\n</pre> Out[8]: input longest_word longest_word_2 Hello, world! Hello, Hello You can do a lot with Pixeltable UDFs. Pixeltable Pixeltable Pixeltable updates tables incrementally. incrementally. incrementally In\u00a0[9]: Copied! <pre>@pxt.udf\ndef longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:\n    words = sentence.split()\n    if strip_punctuation:\n        words = [\n            word if word[-1].isalnum() else word[:-1]\n            for word in words\n        ]\n    i = np.argmax([len(word) for word in words])\n    return words[i]\n</pre> @pxt.udf def longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str:     words = sentence.split()     if strip_punctuation:         words = [             word if word[-1].isalnum() else word[:-1]             for word in words         ]     i = np.argmax([len(word) for word in words])     return words[i] <p>Now we see that Pixeltable continues to use the old definition, even as new rows are added to the table.</p> In\u00a0[10]: Copied! <pre>t.insert(input=\"Let's check that it still works.\")\nt.show()\n</pre> t.insert(input=\"Let's check that it still works.\") t.show() <pre>Computing cells:   0%|                                                    | 0/2 [00:00&lt;?, ? cells/s]\nInserting rows into `strings`: 1 rows [00:00, 493.10 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00, 351.06 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[10]: input longest_word longest_word_2 Hello, world! Hello, Hello You can do a lot with Pixeltable UDFs. Pixeltable Pixeltable Pixeltable updates tables incrementally. incrementally. incrementally Let's check that it still works. works. check <p>But if we add a new column that references the <code>longest_word</code> UDF, Pixeltable will use the updated version.</p> In\u00a0[11]: Copied! <pre>t['longest_word_3'] = longest_word(t.input, strip_punctuation=True)\nt.show()\n</pre> t['longest_word_3'] = longest_word(t.input, strip_punctuation=True) t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:00&lt;00:00, 475.73 cells/s]\nAdded 4 column values with 0 errors.\n</pre> Out[11]: input longest_word longest_word_2 longest_word_3 Hello, world! Hello, Hello Hello You can do a lot with Pixeltable UDFs. Pixeltable Pixeltable Pixeltable Pixeltable updates tables incrementally. incrementally. incrementally incrementally Let's check that it still works. works. check Let's <p>The general rule is: changes to module UDFs will affect any future execution; changes to local UDFs will only affect new columns that are defined using the new version of the UDF.</p> In\u00a0[12]: Copied! <pre>from pixeltable.func import Batch\n\n@pxt.udf(batch_size=16)\ndef longest_word(sentences: Batch[str], strip_punctuation: bool = False) -&gt; Batch[str]:\n    results = []\n    for sentence in sentences:\n        words = sentence.split()\n        if strip_punctuation:\n            words = [\n                word if word[-1].isalnum() else word[:-1]\n                for word in words\n            ]\n        i = np.argmax([len(word) for word in words])\n        results.append(words[i])\n    return results\n</pre> from pixeltable.func import Batch  @pxt.udf(batch_size=16) def longest_word(sentences: Batch[str], strip_punctuation: bool = False) -&gt; Batch[str]:     results = []     for sentence in sentences:         words = sentence.split()         if strip_punctuation:             words = [                 word if word[-1].isalnum() else word[:-1]                 for word in words             ]         i = np.argmax([len(word) for word in words])         results.append(words[i])     return results <p>There are several changes:</p> <ul> <li>The parameter <code>batch_size=16</code> has been added to the <code>@pxt.udf</code> decorator, specifying the batch size;</li> <li>The <code>sentences</code> parameter has changed from <code>str</code> to <code>Batch[str]</code>;</li> <li>The return type has also changed from <code>str</code> to <code>Batch[str]</code>; and</li> <li>Instead of processing a single sentence, the UDF is processing a <code>Batch</code> of sentences and returning the result <code>Batch</code>.</li> </ul> <p>What exactly is a <code>Batch[str]</code>? Functionally, it's simply a <code>list[str]</code>, and you can use it exactly like a <code>list[str]</code> in any Python code. The only difference is in the type hint; a type hint of <code>Batch[str]</code> tells Pixeltable, \"My data consists of individual strings that I want you to process in batches\". Conversely, a type hint of <code>list[str]</code> would mean, \"My data consists of lists of strings that I want you to process one at a time\".</p> <p>Notice that the <code>strip_punctuation</code> parameter is not wrapped in a <code>Batch</code> type. This because <code>strip_punctuation</code> controls the behavior of the UDF, rather than being part of the input data. When we use the batched <code>longest_word</code> UDF, the <code>strip_punctuation</code> parameter will always be a constant, not a column.</p> <p>Let's put the new, batched UDF to work.</p> In\u00a0[13]: Copied! <pre>t['longest_word_3_batched'] = longest_word(t.input, strip_punctuation=True)\nt.show()\n</pre> t['longest_word_3_batched'] = longest_word(t.input, strip_punctuation=True) t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 4/4 [00:00&lt;00:00, 463.92 cells/s]\nAdded 4 column values with 0 errors.\n</pre> Out[13]: input longest_word longest_word_2 longest_word_3 longest_word_3_batched Hello, world! Hello, Hello Hello Hello You can do a lot with Pixeltable UDFs. Pixeltable Pixeltable Pixeltable Pixeltable Pixeltable updates tables incrementally. incrementally. incrementally incrementally incrementally Let's check that it still works. works. check Let's Let's <p>As expected, the output of the <code>longest_word_3_batched</code> column is identical to the <code>longest_word_3</code> column. Under the covers, though, Pixeltable is orchestrating execution in batches of 16. That probably won't have much performance impact on our toy example, but for GPU-bound computations such as text or image embeddings, it can make a substantial difference.</p>"},{"location":"howto/udfs-in-pixeltable/#udfs-in-pixeltable","title":"UDFs in Pixeltable\u00b6","text":"<p>Pixeltable comes with a library of built-in functions and integrations, but sooner or later, you'll want to introduce some customized logic into your workflow. This is where Pixeltable's rich UDF (User-Defined Function) capability comes in. Pixeltable UDFs let you write code in Python, then directly insert your custom logic into Pixeltable expressions and computed columns. In this how-to guide, we'll show how to define UDFs, extend their capabilities, and use them in computed columns.</p> <p>To start, we'll install the necessary dependencies, create a Pixeltable directory and table to experiment with, and add some sample data.</p>"},{"location":"howto/udfs-in-pixeltable/#what-is-a-udf","title":"What is a UDF?\u00b6","text":"<p>A Pixeltable UDF is just a Python function that is marked with the <code>@pxt.udf</code> decorator.</p> <pre>@pxt.udf\ndef add_one(n: int) -&gt; int:\n    return n + 1\n</pre> <p>It's as simple as that! Without the decorator, <code>add_one</code> would be an ordinary Python function that operates on integers. Adding <code>@pxt.udf</code> converts it into a Pixeltable function that operates on columns of integers. The decorated function can then be used directly to define computed columns; Pixeltable will orchestrate its execution across all the input data.</p>"},{"location":"howto/udfs-in-pixeltable/#types-in-udfs","title":"Types in UDFs\u00b6","text":"<p>You might have noticed that the <code>longest_word</code> UDF has type hints in its signature.</p> <pre>def longest_word(sentence: str, strip_punctuation: bool = False) -&gt; str: ...\n</pre> <p>The <code>sentence</code> parameter, <code>strip_punctuation</code> parameter, and return value all have explicit types (<code>str</code>, <code>bool</code>, and <code>str</code> respectively). In general Python code, type hints are usually optional. But Pixeltable is a database system: everything in Pixeltable must have a type. And since Pixeltable is also an orchestrator - meaning it sets up workflows and computed columns before executing them - these types need to be known in advance. That's the reasoning behind a fundamental principle of Pixeltable UDFs:</p> <ul> <li>Type hints are required.</li> </ul> <p>You can turn almost any Python function into a Pixeltable UDF, provided that it has type hints, and provided that Pixeltable supports the types that it uses. The most familiar types that you'll use in UDFs are:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>str</code></li> <li><code>list</code> (can optionally be parameterized, e.g., <code>list[str]</code>)</li> <li><code>dict</code> (can optionally be parameterized, e.g., <code>dict[str, int]</code>)</li> <li><code>PIL.Image.Image</code></li> </ul> <p>In addition to these standard Python types, Pixeltable also recognizes various kinds of arrays, audio and video media, and documents. For a full discussion of Pixeltable types, see the Pixeltable Type System howto guide.</p>"},{"location":"howto/udfs-in-pixeltable/#local-and-module-udfs","title":"Local and Module UDFs\u00b6","text":"<p>The <code>longest_word</code> UDF that we defined above is a local UDF: it was defined directly in our notebook, rather than in a module that we imported. Many other UDFs, including all of Pixeltable's built-in functions, are defined in modules. We encountered a few of these in the Pixeltable Basics tutorial: the <code>huggingface.detr_for_object_detection</code> and <code>openai.vision</code> functions. (Although these are built-in functions, they behave the same way as UDFs, and in fact they're defined the same way under the covers.)</p> <p>There is an important difference between the two. When you add a module UDF such as <code>openai.vision</code> to a table, Pixeltable stores a reference to the corresponding Python function in the module. If you later restart your Python runtime and reload Pixeltable, then Pixeltable will re-import the module UDF when it loads the computed column. This means that any code changes made to the UDF will be picked up at that time, and the new version of the UDF will be used in any future execution.</p> <p>Conversely, when you add a local UDF to a table, the entire code for the UDF is serialized and stored in the table. This ensures that if you restart your notebook kernel (say), or even delete the notebook entirely, the UDF will continue to function. However, it also means that if you modify the UDF code, the updated logic will not be reflected in any existing Pixeltable columns.</p> <p>To see how this works in practice, let's modify our <code>longest_word</code> UDF so that if <code>strip_punctuation</code> is <code>True</code>, then we remove only a single punctuation mark from the end of each word.</p>"},{"location":"howto/udfs-in-pixeltable/#batching","title":"Batching\u00b6","text":"<p>Pixeltable provides several ways to optimize UDFs for better performance. One of the most common is batching, which is particularly important for UDFs that involve GPU operations.</p> <p>Ordinary UDFs process one row at a time, meaning the UDF will be invoked exactly once per row processed. Conversely, a batched UDF processes several rows at a time; the specific number is user-configurable. As an example, let's modify our <code>longest_word</code> UDF to take a batched parameter. Here's what it looks like:</p>"},{"location":"howto/working-with-external-files/","title":"Working with External Files","text":"In\u00a0[1]: Copied! <pre>import tempfile\nimport random\nimport shutil\nimport pixeltable as pxt\n\npxt.create_dir('external_data', ignore_errors=True)\n</pre> import tempfile import random import shutil import pixeltable as pxt  pxt.create_dir('external_data', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `external_data`.\n</pre> In\u00a0[2]: Copied! <pre>pxt.drop_table('external_data.videos', ignore_errors=True)\nv = pxt.create_table('external_data.videos', {'video': pxt.VideoType()})\n\nprefix = 's3://multimedia-commons/'\npaths = [\n    'data/videos/mp4/ffe/ffb/ffeffbef41bbc269810b2a1a888de.mp4',\n    'data/videos/mp4/ffe/feb/ffefebb41485539f964760e6115fbc44.mp4',\n    'data/videos/mp4/ffe/f73/ffef7384d698b5f70d411c696247169.mp4'\n]\nv.insert({'video': prefix + p} for p in paths)\n</pre> pxt.drop_table('external_data.videos', ignore_errors=True) v = pxt.create_table('external_data.videos', {'video': pxt.VideoType()})  prefix = 's3://multimedia-commons/' paths = [     'data/videos/mp4/ffe/ffb/ffeffbef41bbc269810b2a1a888de.mp4',     'data/videos/mp4/ffe/feb/ffefebb41485539f964760e6115fbc44.mp4',     'data/videos/mp4/ffe/f73/ffef7384d698b5f70d411c696247169.mp4' ] v.insert({'video': prefix + p} for p in paths) <pre>Created table `videos`.\nInserting rows into `videos`: 3 rows [00:00, 842.74 rows/s]\nInserted 3 rows with 0 errors.\n</pre> Out[2]: <pre>UpdateStatus(num_rows=3, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>We just inserted 3 rows with video files residing in S3. When we now query these, we are presented with their locally cached counterparts.</p> <p>(Note: we don't simply display the output of <code>collect()</code> here, because that is formatted as an HTML table with a media player and so would obscure the file path.)</p> In\u00a0[3]: Copied! <pre>rows = list(v.select(v.video).collect())\nrows[0]\n</pre> rows = list(v.select(v.video).collect()) rows[0] Out[3]: <pre>{'video': '/Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_1fcfcb221263cff76a2853250fbbb2e90375dd495454c0007bc6ff4430c9a4a7.mp4'}</pre> <p>Let's make a local copy of the first file and insert that separately. First, the copy:</p> In\u00a0[4]: Copied! <pre>local_path = tempfile.mktemp(suffix='.mp4')\nshutil.copyfile(rows[0]['video'], local_path)\nlocal_path\n</pre> local_path = tempfile.mktemp(suffix='.mp4') shutil.copyfile(rows[0]['video'], local_path) local_path Out[4]: <pre>'/var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp58rbqgwf.mp4'</pre> <p>Now the insert:</p> In\u00a0[5]: Copied! <pre>v.insert(video=local_path)\n</pre> v.insert(video=local_path) <pre>Inserting rows into `videos`: 1 rows [00:00, 884.13 rows/s]\nInserted 1 row with 0 errors.\n</pre> Out[5]: <pre>UpdateStatus(num_rows=1, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>When we query this again, we see that local paths are preserved:</p> In\u00a0[6]: Copied! <pre>rows = list(v.select(v.video).collect())\nrows\n</pre> rows = list(v.select(v.video).collect()) rows Out[6]: <pre>[{'video': '/Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_1fcfcb221263cff76a2853250fbbb2e90375dd495454c0007bc6ff4430c9a4a7.mp4'},\n {'video': '/Users/asiegel/.pixeltable/file_cache/6c69869dcc3f4f61b473a69e08af12b5_0_fc11428b32768ae782193a57ebcbad706f45bbd9fa13354471e0bcd798fee3ea.mp4'},\n {'video': '/Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_b9fb0d9411bc9cd183a36866911baa7a8834f22f665bce47608566b38485c16a.mp4'},\n {'video': '/var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp58rbqgwf.mp4'}]</pre> <p>UDFs also see local paths:</p> In\u00a0[7]: Copied! <pre>@pxt.udf(param_types=[pxt.VideoType()])\ndef f(v: str) -&gt; int:\n    print(f'{type(v)}: {v}')\n    return 1\n</pre> @pxt.udf(param_types=[pxt.VideoType()]) def f(v: str) -&gt; int:     print(f'{type(v)}: {v}')     return 1 In\u00a0[8]: Copied! <pre>v.select(f(v.video)).show()\n</pre> v.select(f(v.video)).show() <pre>&lt;class 'str'&gt;: /Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_1fcfcb221263cff76a2853250fbbb2e90375dd495454c0007bc6ff4430c9a4a7.mp4\n&lt;class 'str'&gt;: /Users/asiegel/.pixeltable/file_cache/6c69869dcc3f4f61b473a69e08af12b5_0_fc11428b32768ae782193a57ebcbad706f45bbd9fa13354471e0bcd798fee3ea.mp4\n&lt;class 'str'&gt;: /Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_b9fb0d9411bc9cd183a36866911baa7a8834f22f665bce47608566b38485c16a.mp4\n&lt;class 'str'&gt;: /var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp58rbqgwf.mp4\n</pre> Out[8]: col_0 1 1 1 1 In\u00a0[9]: Copied! <pre>v.insert(video=prefix + 'bad_path.mp4')\n</pre> v.insert(video=prefix + 'bad_path.mp4') <pre>\n---------------------------------------------------------------------------\nError                                     Traceback (most recent call last)\nCell In[9], line 1\n----&gt; 1 v.insert(video=prefix + 'bad_path.mp4')\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/insertable_table.py:124, in InsertableTable.insert(self, *args, **kwargs)\n    122         raise excs.Error('rows must be a list of dictionaries')\n    123 self._validate_input_rows(rows)\n--&gt; 124 result = self.tbl_version.insert(rows, print_stats=print_stats, fail_on_exception=fail_on_exception)\n    126 if result.num_excs == 0:\n    127     cols_with_excs_str = ''\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/table_version.py:600, in TableVersion.insert(self, rows, print_stats, fail_on_exception)\n    598 ts = time.time()\n    599 with Env.get().engine.begin() as conn:\n--&gt; 600     return self._insert(plan, conn, ts, print_stats)\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/table_version.py:609, in TableVersion._insert(self, exec_plan, conn, ts, print_stats)\n    607 self.version += 1\n    608 result = UpdateStatus()\n--&gt; 609 num_rows, num_excs, cols_with_excs = self.store_tbl.insert_rows(exec_plan, conn, v_min=self.version)\n    610 self.next_rowid = num_rows\n    611 result.num_rows = num_rows\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/store.py:285, in StoreBase.insert_rows(self, exec_plan, conn, v_min)\n    283 try:\n    284     exec_plan.open()\n--&gt; 285     for row_batch in exec_plan:\n    286         num_rows += len(row_batch)\n    287         for batch_start_idx in range(0, len(row_batch), batch_size):\n    288             # compute batch of rows and convert them into table rows\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/exec/media_validation_node.py:26, in MediaValidationNode.__next__(self)\n     24 def __next__(self) -&gt; DataRowBatch:\n     25     assert self.input is not None\n---&gt; 26     row_batch = next(self.input)\n     27     for row in row_batch:\n     28         for slot_idx, col in [(c.slot_idx, c.col) for c in self.media_slots]:\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/exec/cache_prefetch_node.py:70, in CachePrefetchNode.__next__(self)\n     67     futures[executor.submit(self._fetch_url, row, info.slot_idx)] = (row, info)\n     68 for future in concurrent.futures.as_completed(futures):\n     69     # TODO:  does this need to deal with recoverable errors (such as retry after throttling)?\n---&gt; 70     tmp_path = future.result()\n     71     if tmp_path is None:\n     72         continue\n\nFile /opt/miniconda3/envs/pxt/lib/python3.9/concurrent/futures/_base.py:439, in Future.result(self, timeout)\n    437     raise CancelledError()\n    438 elif self._state == FINISHED:\n--&gt; 439     return self.__get_result()\n    441 self._condition.wait(timeout)\n    443 if self._state in [CANCELLED, CANCELLED_AND_NOTIFIED]:\n\nFile /opt/miniconda3/envs/pxt/lib/python3.9/concurrent/futures/_base.py:391, in Future.__get_result(self)\n    389 if self._exception:\n    390     try:\n--&gt; 391         raise self._exception\n    392     finally:\n    393         # Break a reference cycle with the exception in self._exception\n    394         self = None\n\nFile /opt/miniconda3/envs/pxt/lib/python3.9/concurrent/futures/thread.py:58, in _WorkItem.run(self)\n     55     return\n     57 try:\n---&gt; 58     result = self.fn(*self.args, **self.kwargs)\n     59 except BaseException as exc:\n     60     self.future.set_exception(exc)\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/exec/cache_prefetch_node.py:114, in CachePrefetchNode._fetch_url(self, row, slot_idx)\n    112     self.row_builder.set_exc(row, slot_idx, exc)\n    113     if not self.ctx.ignore_errors:\n--&gt; 114         raise exc from None  # suppress original exception\n    115 return None\n\nError: Failed to download s3://multimedia-commons/bad_path.mp4: An error occurred (404) when calling the HeadObject operation: Not Found</pre> <p>The same happens for corrupted files:</p> In\u00a0[10]: Copied! <pre># create invalid .mp4\nwith tempfile.NamedTemporaryFile(mode='wb', suffix='.mp4', delete=False) as temp_file:\n    temp_file.write(random.randbytes(1024))\n    corrupted_path = temp_file.name\n\nv.insert(video=corrupted_path)\n</pre> # create invalid .mp4 with tempfile.NamedTemporaryFile(mode='wb', suffix='.mp4', delete=False) as temp_file:     temp_file.write(random.randbytes(1024))     corrupted_path = temp_file.name  v.insert(video=corrupted_path) <pre>\n---------------------------------------------------------------------------\nError                                     Traceback (most recent call last)\nCell In[10], line 6\n      3     temp_file.write(random.randbytes(1024))\n      4     corrupted_path = temp_file.name\n----&gt; 6 v.insert(video=corrupted_path)\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/insertable_table.py:124, in InsertableTable.insert(self, *args, **kwargs)\n    122         raise excs.Error('rows must be a list of dictionaries')\n    123 self._validate_input_rows(rows)\n--&gt; 124 result = self.tbl_version.insert(rows, print_stats=print_stats, fail_on_exception=fail_on_exception)\n    126 if result.num_excs == 0:\n    127     cols_with_excs_str = ''\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/table_version.py:600, in TableVersion.insert(self, rows, print_stats, fail_on_exception)\n    598 ts = time.time()\n    599 with Env.get().engine.begin() as conn:\n--&gt; 600     return self._insert(plan, conn, ts, print_stats)\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/catalog/table_version.py:609, in TableVersion._insert(self, exec_plan, conn, ts, print_stats)\n    607 self.version += 1\n    608 result = UpdateStatus()\n--&gt; 609 num_rows, num_excs, cols_with_excs = self.store_tbl.insert_rows(exec_plan, conn, v_min=self.version)\n    610 self.next_rowid = num_rows\n    611 result.num_rows = num_rows\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/store.py:285, in StoreBase.insert_rows(self, exec_plan, conn, v_min)\n    283 try:\n    284     exec_plan.open()\n--&gt; 285     for row_batch in exec_plan:\n    286         num_rows += len(row_batch)\n    287         for batch_start_idx in range(0, len(row_batch), batch_size):\n    288             # compute batch of rows and convert them into table rows\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/exec/media_validation_node.py:41, in MediaValidationNode.__next__(self)\n     39             self.row_builder.set_exc(row, slot_idx, exc)\n     40             if not self.ctx.ignore_errors:\n---&gt; 41                 raise exc\n     43 return row_batch\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/exec/media_validation_node.py:37, in MediaValidationNode.__next__(self)\n     34     continue\n     36 try:\n---&gt; 37     col.col_type.validate_media(path)\n     38 except excs.Error as exc:\n     39     self.row_builder.set_exc(row, slot_idx, exc)\n\nFile ~/Dropbox/workspace/pixeltable/pixeltable/pixeltable/type_system.py:783, in VideoType.validate_media(self, val)\n    781             raise excs.Error(f'Not a valid video: {val}')\n    782 except av.AVError:\n--&gt; 783     raise excs.Error(f'Not a valid video: {val}') from None\n\nError: Not a valid video: /var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp26dm1ebd.mp4</pre> <p>Alternatively, Pixeltable can also be instructed to record error conditions and proceed with the ingest, via the <code>fail_on_exception</code> flag (default: <code>True</code>):</p> In\u00a0[11]: Copied! <pre>v.insert([{'video': prefix + 'bad_path.mp4'}, {'video': corrupted_path}], fail_on_exception=False)\n</pre> v.insert([{'video': prefix + 'bad_path.mp4'}, {'video': corrupted_path}], fail_on_exception=False) <pre>Inserting rows into `videos`: 2 rows [00:00, 1078.78 rows/s]\nInserted 2 rows with 2 errors across 1 column (videos.video).\n</pre> Out[11]: <pre>UpdateStatus(num_rows=2, num_computed_values=0, num_excs=2, updated_cols=[], cols_with_excs=['videos.video'])</pre> <p>Every media column has properties <code>errortype</code> and <code>errormsg</code> (both containing <code>string</code> data) that indicate whether the column value is valid. Invalid values show up as <code>None</code> and have non-null <code>errortype</code>/<code>errormsg</code>:</p> In\u00a0[12]: Copied! <pre>v.select(v.video == None, v.video.errortype, v.video.errormsg).collect()\n</pre> v.select(v.video == None, v.video.errortype, v.video.errormsg).collect() Out[12]: col_0 video_errortype video_errormsg False None None False None None False None None False None None True Error Failed to download s3://multimedia-commons/bad_path.mp4: An error occurred (404) when calling the HeadObject operation: Not Found True Error Not a valid video: /var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp26dm1ebd.mp4 <p>Errors can now be inspected (and corrected) after the ingest:</p> In\u00a0[13]: Copied! <pre>v.where(v.video.errortype != None).select(v.video.errormsg).collect()\n</pre> v.where(v.video.errortype != None).select(v.video.errormsg).collect() Out[13]: video_errormsg Failed to download s3://multimedia-commons/bad_path.mp4: An error occurred (404) when calling the HeadObject operation: Not Found Not a valid video: /var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp26dm1ebd.mp4 In\u00a0[14]: Copied! <pre>v.select(v.video.fileurl, v.video.localpath).collect()\n</pre> v.select(v.video.fileurl, v.video.localpath).collect() Out[14]: video_fileurl video_localpath s3://multimedia-commons/data/videos/mp4/ffe/ffb/ffeffbef41bbc269810b2a1a888de.mp4 /Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_1fcfcb221263cff76a2853250fbbb2e90375dd495454c0007bc6ff4430c9a4a7.mp4 s3://multimedia-commons/data/videos/mp4/ffe/feb/ffefebb41485539f964760e6115fbc44.mp4 /Users/asiegel/.pixeltable/file_cache/6c69869dcc3f4f61b473a69e08af12b5_0_fc11428b32768ae782193a57ebcbad706f45bbd9fa13354471e0bcd798fee3ea.mp4 s3://multimedia-commons/data/videos/mp4/ffe/f73/ffef7384d698b5f70d411c696247169.mp4 /Users/asiegel/.pixeltable/file_cache/7bfca467b0ed44e99b8f1b439d0be3f4_0_b9fb0d9411bc9cd183a36866911baa7a8834f22f665bce47608566b38485c16a.mp4 file:///var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp58rbqgwf.mp4 /var/folders/hb/qd0dztsj43j_mdb6hbl1gzyc0000gn/T/tmp58rbqgwf.mp4 None None None None <p>Note that for local media files, the <code>fileurl</code> property still returns a parsable URL.</p>"},{"location":"howto/working-with-external-files/#working-with-external-files","title":"Working with External Files\u00b6","text":"<p>In Pixeltable, all media data (videos, images, audio) resides in external files, and Pixeltable stores references to those. The files can be local or remote (e.g., in S3). For the latter, Pixeltable automatically caches the files locally on access.</p> <p>When interacting with media data via Pixeltable, either through queries or UDFs, the user sees the following Python types:</p> <ul> <li><code>ImageType</code>: <code>PIL.Image.Image</code></li> <li><code>VideoType</code>: <code>string</code> (local path)</li> <li><code>AudioType</code>: <code>string</code> (local path)</li> </ul> <p>Let's create a table and load some data to see what that looks like:</p>"},{"location":"howto/working-with-external-files/#dealing-with-errors","title":"Dealing with errors\u00b6","text":"<p>When interacting with media data in Pixeltable, the user can assume that the underlying files exist, are local and are valid for their respective data type. In other words, the user doesn't need to consider error conditions.</p> <p>To that end, Pixeltable validates media data on ingest. The default behavior is to reject invalid media files:</p>"},{"location":"howto/working-with-external-files/#accessing-the-original-file-paths","title":"Accessing the original file paths\u00b6","text":"<p>In some cases, it will be necessary to access file paths (not, say, the <code>PIL.Image.Image</code>), and Pixeltable provides the column properties <code>fileurl</code> and <code>localpath</code> for that purpose:</p>"},{"location":"tutorials/object-detection-in-videos/","title":"Object Detection in Videos","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q pixeltable git+https://github.com/Megvii-BaseDetection/YOLOX@ac58e0a\n</pre> %pip install -q pixeltable git+https://github.com/Megvii-BaseDetection/YOLOX@ac58e0a <p>As we saw in the Pixeltable Basics tutorial, all data in Pixeltable is stored in tables, which in turn reside in directories. We'll begin by creating a <code>video_tutorial</code> directory.</p> In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\npxt.create_dir('video_tutorial', ignore_errors=True)\n</pre> import pixeltable as pxt  pxt.create_dir('video_tutorial', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `video_tutorial`.\n</pre> <p>We create a table for our videos, with a single column.</p> In\u00a0[2]: Copied! <pre># Drop the tables if they exist, in case they were created by a previous\n# run of the tutorial\npxt.drop_table('video_tutorial.frames', ignore_errors=True)\npxt.drop_table('video_tutorial.videos', ignore_errors=True)\n\n# Create the `video_tutorial.videos` table\nvideos_table = pxt.create_table('video_tutorial.videos', {'video': pxt.VideoType()})\n</pre> # Drop the tables if they exist, in case they were created by a previous # run of the tutorial pxt.drop_table('video_tutorial.frames', ignore_errors=True) pxt.drop_table('video_tutorial.videos', ignore_errors=True)  # Create the `video_tutorial.videos` table videos_table = pxt.create_table('video_tutorial.videos', {'video': pxt.VideoType()}) <pre>Created table `videos`.\n</pre> <p>In order to interact with the frames, we take advantage of Pixeltable's component view concept: we create a \"view\" of our video table that contains one row for each frame of each video in the table. Pixeltable provides the built-in <code>FrameIterator</code> class for this.</p> In\u00a0[3]: Copied! <pre>from pixeltable.iterators import FrameIterator\n\nframes_view = pxt.create_view(\n    'video_tutorial.frames',\n    videos_table,\n    # `fps` determines the frame rate; a value of `0`\n    # indicates the native frame rate of the video.\n    iterator=FrameIterator.create(video=videos_table.video, fps=0)\n)\n</pre> from pixeltable.iterators import FrameIterator  frames_view = pxt.create_view(     'video_tutorial.frames',     videos_table,     # `fps` determines the frame rate; a value of `0`     # indicates the native frame rate of the video.     iterator=FrameIterator.create(video=videos_table.video, fps=0) ) <pre>Created view `frames` with 0 rows, 0 exceptions.\n</pre> <p>You'll see that neither the <code>videos</code> table nor the <code>frames</code> view has any actual data yet, because we haven't yet added any videos to the table. However, the <code>frames</code> view is now configured to automatically track the <code>videos</code> table as new data shows up.</p> <p>The new view is automatically configured with six columns:</p> <ul> <li><code>pos</code> - a system column that is part of every component view</li> <li><code>video</code> - the column inherited from our base table (all base table columns are visible in any of its views)</li> <li><code>frame_idx</code>, <code>pos_msec</code>, <code>pos_frame</code>, <code>frame</code> - these four columns are created by the <code>FrameIterator</code> class.</li> </ul> <p>Let's have a look at the new view:</p> In\u00a0[4]: Copied! <pre>frames_view\n</pre> frames_view Out[4]: Column Name Type Computed With pos int frame_idx int pos_msec float pos_frame float frame image video video <p>We'll now insert a single row into the videos table, containing a video of a busy intersection in Bangkok.</p> In\u00a0[5]: Copied! <pre>videos_table.insert([{'video': 'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/bangkok.mp4'}])\n</pre> videos_table.insert([{'video': 'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/bangkok.mp4'}]) <pre>Inserting rows into `videos`: 1 rows [00:00, 371.37 rows/s]\nInserting rows into `frames`: 462 rows [00:00, 26747.02 rows/s]\nInserted 463 rows with 0 errors.\n</pre> Out[5]: <pre>UpdateStatus(num_rows=463, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>Notice that both the <code>videos</code> table and <code>frames</code> view were automatically updated, expanding the single video into 462 rows in the view. Let's have a look at <code>videos</code> first.</p> In\u00a0[6]: Copied! <pre>videos_table.show()\n</pre> videos_table.show() Out[6]: video <p>Now let's peek at the first five rows of <code>frames</code>:</p> In\u00a0[7]: Copied! <pre>frames_view.select(frames_view.pos, frames_view.frame, frames_view.frame.width, frames_view.frame.height).show(5)\n</pre> frames_view.select(frames_view.pos, frames_view.frame, frames_view.frame.width, frames_view.frame.height).show(5) Out[7]: pos frame width height 0 1280 720 1 1280 720 2 1280 720 3 1280 720 4 1280 720 <p>One advantage of using Pixeltable's component view mechanism is that Pixeltable does not physically store the frames. Instead, Pixeltable re-extracts the frames on retrieval using the frame index, which can be done very efficiently and avoids any storage overhead (which can be quite substantial for video frames).</p> In\u00a0[8]: Copied! <pre>from pixeltable.ext.functions.yolox import yolox\n</pre> from pixeltable.ext.functions.yolox import yolox <p>Pixeltable functions operate on columns and expressions using standard Python function call syntax. Here's an example that shows how we might experiment with applying one of the YOLOX models to the first few frames in our video, using Pixeltable's powerful <code>select</code> comprehension.</p> In\u00a0[9]: Copied! <pre># Show the results of applying the `yolox_tiny` model to the first few frames in the table.\n\nframes_view.select(frames_view.frame, yolox(frames_view.frame, model_id='yolox_tiny')).show(3)\n</pre> # Show the results of applying the `yolox_tiny` model to the first few frames in the table.  frames_view.select(frames_view.frame, yolox(frames_view.frame, model_id='yolox_tiny')).show(3) Out[9]: frame col_1 {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7]} {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7]} {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7]} <p>It may appear that we just ran the YOLOX inference over the entire view of 462 frames, but remember that Pixeltable evaluates expressions lazily: in this case, it only ran inference over the 3 frames that we actually displayed.</p> <p>The inference output looks like what we'd expect, so let's add a computed column that runs inference over the entire view (we first encountered computed columns in the Pixeltable Basics tutorial). Remember that once a computed column is created, Pixeltable will update it incrementally any time new rows are added to the view. This is a convenient way to incorporate inference (and other operations) into data workflows.</p> In\u00a0[10]: Copied! <pre># Create a computed column to compute detections using the `yolox_tiny` model.\n# We'll adjust the confidence threshold down a bit (the default is 0.5) to pick up even more\n# bounding boxes.\n\nframes_view['detect_yolox_tiny'] = yolox(frames_view.frame, model_id='yolox_tiny', threshold=0.25)\n</pre> # Create a computed column to compute detections using the `yolox_tiny` model. # We'll adjust the confidence threshold down a bit (the default is 0.5) to pick up even more # bounding boxes.  frames_view['detect_yolox_tiny'] = yolox(frames_view.frame, model_id='yolox_tiny', threshold=0.25) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 462/462 [00:12&lt;00:00, 37.22 cells/s]\nAdded 462 column values with 0 errors.\n</pre> <p>The new column is now part of the schema of the <code>frames</code> view:</p> In\u00a0[12]: Copied! <pre>frames_view\n</pre> frames_view Out[12]: Column Name Type Computed With pos int frame_idx int pos_msec float pos_frame float frame image detect_yolox_tiny json pixeltable.ext.functions.yolox.yolox(frame, model_id='yolox_tiny') video video <p>The data in the computed column is now stored for fast retrieval.</p> In\u00a0[13]: Copied! <pre>frames_view.select(frames_view.frame, frames_view.detect_yolox_tiny).show(3)\n</pre> frames_view.select(frames_view.frame, frames_view.detect_yolox_tiny).show(3) Out[13]: frame detect_yolox_tiny {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474]} {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474]} {'bboxes': [[338.1894836425781, 345.59979248046875, 433.25408935546875, 402.1943359375], [101.51329803466797, 419.788330078125, 259.7282409667969, 512.6688842773438], [-0.27876633405685425, 555.6809692382812, 96.86800384521484, 675.8363037109375], [478.0632629394531, 290.70819091796875, 541.0510864257812, 333.1060791015625], [317.3229064941406, 488.96636962890625, 571.7535400390625, 640.4901733398438], [561.7608032226562, 282.067138671875, 609.9308471679688, 318.03826904296875], [582.622802734375, 409.7627258300781, 675.9083862304688, 518.007568359375], [884.5014038085938, 341.38031005859375, 994.5653076171875, 413.2419128417969], [40.29541778564453, 447.2200622558594, 98.4399642944336, 512.966064453125], [261.9676513671875, 626.4561767578125, 395.9239807128906, 716.9423217773438], [483.1141357421875, 574.5985717773438, 597.1210327148438, 686.2103271484375], [881.5115356445312, 340.0090026855469, 997.948974609375, 415.1181945800781]], 'labels': [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 7], 'scores': [0.8303581852689419, 0.8120178992683726, 0.7972358703894429, 0.7631068761987336, 0.7551505045317981, 0.6878083300243532, 0.6056828514921762, 0.5413047499647519, 0.5142479712737753, 0.502798736688618, 0.5010958015776623, 0.5003431232907474]} <p>Now let's create a new set of images, in which we superimpose the detected bounding boxes on top of the original images. There's no built-in Pixeltable function to do this, but we can easily create our own. We'll use the <code>@pxt.udf</code> decorator for this, as we first saw in the Pixeltable Basics tutorial.</p> In\u00a0[11]: Copied! <pre>import PIL.Image\nimport PIL.ImageDraw\n\n@pxt.udf\ndef draw_boxes(img: PIL.Image.Image, boxes: list[list[float]]) -&gt; PIL.Image.Image:\n    result = img.copy()  # Create a copy of `img`\n    d = PIL.ImageDraw.Draw(result)\n    for box in boxes:\n        d.rectangle(box, width=3)  # Draw bounding box rectangles on the copied image\n    return result\n</pre> import PIL.Image import PIL.ImageDraw  @pxt.udf def draw_boxes(img: PIL.Image.Image, boxes: list[list[float]]) -&gt; PIL.Image.Image:     result = img.copy()  # Create a copy of `img`     d = PIL.ImageDraw.Draw(result)     for box in boxes:         d.rectangle(box, width=3)  # Draw bounding box rectangles on the copied image     return result <p>This function takes two arguments, <code>img</code> and <code>boxes</code>, and returns the new, annotated image. We could create a new computed column to hold the annotated images, but we don't have to; sometimes it's easier just to use a <code>select</code> comprehension, as we did when we were first experimenting with the detection model.</p> In\u00a0[12]: Copied! <pre>frames_view.select(frames_view.frame, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes)).show(1)\n</pre> frames_view.select(frames_view.frame, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes)).show(1) Out[12]: frame col_1 <p>Our <code>select</code> comprehension ranged over the entire table, but just as before, Pixeltable computes the output lazily: image operations are performed at retrieval time, so in this case, Pixeltable drew the annotations just for the one frame that we actually displayed.</p> <p>Looking at individual frames gives us some idea of how well our detection algorithm works, but it would be more instructive to turn the visualization output back into a video.</p> <p>We do that with the built-in function <code>make_video()</code>, which is an aggregation function that takes a frame index (actually: any expression that can be used to order the frames; a timestamp would also work) and an image, and then assembles the sequence of images into a video.</p> In\u00a0[14]: Copied! <pre>frames_view.select(pxt.functions.make_video(\n    frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes)\n)).group_by(videos_table).show(1)\n</pre> frames_view.select(pxt.functions.make_video(     frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes) )).group_by(videos_table).show(1) Out[14]: col_0 <p>Now suppose we want to experiment with a more powerful object detection model, to see if there is any improvement in detection quality. We can create an additional column to hold the new inferences. The larger model takes longer to download and run, so please be patient.</p> In\u00a0[15]: Copied! <pre># Here we use the larger `yolox_m` (medium) model.\n\nframes_view['detect_yolox_m'] = yolox(frames_view.frame, model_id='yolox_m', threshold=0.25)\n</pre> # Here we use the larger `yolox_m` (medium) model.  frames_view['detect_yolox_m'] = yolox(frames_view.frame, model_id='yolox_m', threshold=0.25) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 462/462 [01:20&lt;00:00,  5.75 cells/s]\nAdded 462 column values with 0 errors.\n</pre> <p>Let's see the results of the two models side-by-side.</p> In\u00a0[16]: Copied! <pre>frames_view.select(pxt.functions.make_video(\n    frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes)\n), pxt.functions.make_video(\n    frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_m.bboxes)\n)).group_by(videos_table).show(1)\n</pre> frames_view.select(pxt.functions.make_video(     frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_tiny.bboxes) ), pxt.functions.make_video(     frames_view.pos, draw_boxes(frames_view.frame, frames_view.detect_yolox_m.bboxes) )).group_by(videos_table).show(1) Out[16]: col_0 col_1 <p>Running the videos side-by-side, we can see that the larger model is higher in quality: less flickering, with more stable boxes from frame to frame.</p> In\u00a0[17]: Copied! <pre>frames_view['detect_yolox_x'] = yolox(frames_view.frame, model_id='yolox_x', threshold=0.25)\n</pre> frames_view['detect_yolox_x'] = yolox(frames_view.frame, model_id='yolox_x', threshold=0.25) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 462/462 [03:42&lt;00:00,  2.08 cells/s]\nAdded 462 column values with 0 errors.\n</pre> <p>Let's have a look at our enlarged view, now with three <code>detect</code> columns.</p> In\u00a0[18]: Copied! <pre>frames_view\n</pre> frames_view Out[18]: Column Name Type Computed With pos int frame_idx int pos_msec float pos_frame float frame image detect_yolox_tiny json pixeltable.ext.functions.yolox.yolox(frame, model_id='yolox_tiny', threshold=0.25) detect_yolox_m json pixeltable.ext.functions.yolox.yolox(frame, model_id='yolox_m', threshold=0.25) detect_yolox_x json pixeltable.ext.functions.yolox.yolox(frame, model_id='yolox_x', threshold=0.25) video video <p>We're going to be evaluating the generated detections with the commonly-used mean average precision metric (mAP).</p> <p>The mAP metric is based on per-frame metrics, such as true and false positives per detected class, which are then aggregated into a single (per-class) number. In Pixeltable, functionality is available via the <code>eval_detections()</code> and <code>mean_ap()</code> built-in functions.</p> In\u00a0[23]: Copied! <pre>from pixeltable.functions.eval import eval_detections, mean_ap\n\nframes_view['eval_yolox_tiny'] = eval_detections(\n    pred_bboxes=frames_view.detect_yolox_tiny.bboxes,\n    pred_labels=frames_view.detect_yolox_tiny.labels,\n    pred_scores=frames_view.detect_yolox_tiny.scores,\n    gt_bboxes=frames_view.detect_yolox_x.bboxes,\n    gt_labels=frames_view.detect_yolox_x.labels\n)\n\nframes_view['eval_yolox_m'] = eval_detections(\n    pred_bboxes=frames_view.detect_yolox_m.bboxes,\n    pred_labels=frames_view.detect_yolox_m.labels,\n    pred_scores=frames_view.detect_yolox_m.scores,\n    gt_bboxes=frames_view.detect_yolox_x.bboxes,\n    gt_labels=frames_view.detect_yolox_x.labels\n)\n</pre> from pixeltable.functions.eval import eval_detections, mean_ap  frames_view['eval_yolox_tiny'] = eval_detections(     pred_bboxes=frames_view.detect_yolox_tiny.bboxes,     pred_labels=frames_view.detect_yolox_tiny.labels,     pred_scores=frames_view.detect_yolox_tiny.scores,     gt_bboxes=frames_view.detect_yolox_x.bboxes,     gt_labels=frames_view.detect_yolox_x.labels )  frames_view['eval_yolox_m'] = eval_detections(     pred_bboxes=frames_view.detect_yolox_m.bboxes,     pred_labels=frames_view.detect_yolox_m.labels,     pred_scores=frames_view.detect_yolox_m.scores,     gt_bboxes=frames_view.detect_yolox_x.bboxes,     gt_labels=frames_view.detect_yolox_x.labels ) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 462/462 [00:00&lt;00:00, 1368.53 cells/s]\nAdded 462 column values with 0 errors.\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 462/462 [00:00&lt;00:00, 1107.99 cells/s]\nAdded 462 column values with 0 errors.\n</pre> <p>Let's take a look at the output.</p> In\u00a0[24]: Copied! <pre>frames_view.select(frames_view.eval_yolox_tiny, frames_view.eval_yolox_m).show(1)\n</pre> frames_view.select(frames_view.eval_yolox_tiny, frames_view.eval_yolox_m).show(1) Out[24]: eval_yolox_tiny eval_yolox_m [{'fp': [0], 'tp': [1], 'class': 0, 'scores': [0.2907288888372772], 'min_iou': 0.5, 'num_gts': 2}, {'fp': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1], 'tp': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], 'class': 2, 'scores': [0.7872271605747017, 0.7502694030727497, 0.715124681105511, 0.6936472439401662, 0.683785547057969, 0.677372470130905, 0.6698970090013034, 0.62884452848742, 0.5871905254114651, 0.5710168437431093, 0.5488205668580015, 0.5259768317254299, 0.48887483737519943, 0.47543792124952233, 0.46769257760649907, 0.38620557516102494, 0.38372188358909654, 0.317142701160833, 0.2877547688975284, 0.26306287613733303, 0.25544114758308467], 'min_iou': 0.5, 'num_gts': 26}, {'fp': [0], 'tp': [1], 'class': 3, 'scores': [0.4318316368752022], 'min_iou': 0.5, 'num_gts': 2}, {'fp': [1, 1, 1, 1], 'tp': [0, 0, 0, 0], 'class': 7, 'scores': [0.4326881584858082, 0.40418366308550446, 0.3343880252577094, 0.3004307208460677], 'min_iou': 0.5, 'num_gts': 3}, {'fp': [], 'tp': [], 'class': 62, 'scores': [], 'min_iou': 0.5, 'num_gts': 1}] [{'fp': [0, 0], 'tp': [1, 1], 'class': 0, 'scores': [0.5906626362366296, 0.4197695328015243], 'min_iou': 0.5, 'num_gts': 2}, {'fp': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'tp': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'class': 2, 'scores': [0.9377970087823826, 0.9109554748064141, 0.908164867060627, 0.9079046285636494, 0.9055690307724795, 0.8989922094856766, 0.8858143924749129, 0.8350089570296824, 0.8276892640623146, 0.81195466107717, 0.793378401471017, 0.7883692953281667, 0.7825780104827516, 0.726172586179544, 0.6596614990491219, 0.602790688246376, 0.5862725982668522, 0.5607722286454866, 0.5137047251223414, 0.49374396448845914, 0.4520889082124313, 0.3697712154653967, 0.2638622064315239], 'min_iou': 0.5, 'num_gts': 26}, {'fp': [0, 0, 1, 1], 'tp': [1, 1, 0, 0], 'class': 3, 'scores': [0.8785447149359911, 0.6549525857618264, 0.44053755214768486, 0.3977024902988049], 'min_iou': 0.5, 'num_gts': 2}, {'fp': [0, 0], 'tp': [1, 1], 'class': 7, 'scores': [0.47758490860690017, 0.4115085451228673], 'min_iou': 0.5, 'num_gts': 3}, {'fp': [], 'tp': [], 'class': 62, 'scores': [], 'min_iou': 0.5, 'num_gts': 1}] <p>The computation of the mAP metric is now simply a query over the evaluation output, aggregated with the <code>mean_ap()</code> function.</p> In\u00a0[26]: Copied! <pre>frames_view.select(mean_ap(frames_view.eval_yolox_tiny), mean_ap(frames_view.eval_yolox_m)).show()\n</pre> frames_view.select(mean_ap(frames_view.eval_yolox_tiny), mean_ap(frames_view.eval_yolox_m)).show() Out[26]: col_0 col_1 {0: 0.10811645671868587, 2: 0.6227539708588857, 3: 0.27753975947335474, 7: 0.09323260954335098, 62: 0.0, 58: 0.0, 9: 0.0, 5: 0.02960526315789474, 8: 0.0, 1: 0.0} {0: 0.5944106052226086, 2: 0.9121062275615797, 3: 0.7225004856681095, 7: 0.5251759030270571, 62: 0.0, 4: 0.0, 58: 0.041590214067278294, 1: 0.0, 5: 0.6499999999999999} <p>This two-step process allows you to compute mAP at every granularity: over your entire dataset, only for specific videos, only for videos that pass a certain filter, etc. Moreover, you can compute this metric any time, not just during training, and use it to guide your understanding of your dataset and how it affects the quality of your models.</p>"},{"location":"tutorials/object-detection-in-videos/#object-detection-in-videos","title":"Object Detection in Videos\u00b6","text":"<p>In this tutorial, we'll demonstrate how to use Pixeltable to do frame-by-frame object detection, made simple through Pixeltable's video-related functionality:</p> <ul> <li>automatic frame extraction</li> <li>running complex functions against frames (in this case, the YOLOX object detection models)</li> <li>reassembling frames back into videos We'll be working with a single video file from Pixeltable's test data repository.</li> </ul> <p>This tutorial assumes you've worked through the Pixeltable Basics tutorial; if you haven't, it's probably a good idea to do so now.</p>"},{"location":"tutorials/object-detection-in-videos/#creating-a-tutorial-directory-and-table","title":"Creating a tutorial directory and table\u00b6","text":"<p>First, let's make sure the packages we need for this tutorial are installed: Pixeltable itself, and the YOLOX object detection library.</p>"},{"location":"tutorials/object-detection-in-videos/#object-detection-with-pixeltable","title":"Object Detection with Pixeltable\u00b6","text":"<p>Now let's apply an object detection model to our frames. Pixeltable includes built-in support for a number of models; we're going to use the YOLOX family of models, which are lightweight models with solid performance. We first import the <code>yolox</code> Pixeltable function.</p>"},{"location":"tutorials/object-detection-in-videos/#comparing-object-detection-models","title":"Comparing Object Detection Models\u00b6","text":""},{"location":"tutorials/object-detection-in-videos/#evaluating-models-against-a-ground-truth","title":"Evaluating Models Against a Ground Truth\u00b6","text":"<p>In order to do a quantitative evaluation of model performance, we need a ground truth to compare them against. Let's generate some (synthetic) \"ground truth\" data by running against the largest YOLOX model available. It will take even longer to cache and evaluate this model.</p>"},{"location":"tutorials/pixeltable-basics/","title":"Pixeltable Basics","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q torch transformers openai pixeltable\n</pre> %pip install -q torch transformers openai pixeltable In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\n# Create the directory `demo` (if it doesn't already exist)\npxt.create_dir('demo', ignore_errors=True)\n\n# Create the table `demo.first` with a single column `input_image`\npxt.drop_table('demo.first', ignore_errors=True)\nt = pxt.create_table('demo.first', {'input_image': pxt.ImageType()})\n</pre> import pixeltable as pxt  # Create the directory `demo` (if it doesn't already exist) pxt.create_dir('demo', ignore_errors=True)  # Create the table `demo.first` with a single column `input_image` pxt.drop_table('demo.first', ignore_errors=True) t = pxt.create_table('demo.first', {'input_image': pxt.ImageType()}) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `demo`.\nCreated table `first`.\n</pre> <p>We can use <code>t.describe()</code> to examine the table schema. We see that it now contains a single column, as expected.</p> In\u00a0[2]: Copied! <pre>t.describe()\n</pre> t.describe() Column Name Type Computed With input_image image <p>The new table is initially empty, with no rows:</p> In\u00a0[3]: Copied! <pre>t.count()\n</pre> t.count() Out[3]: <pre>0</pre> <p>Now let's put an image into it! We can add images simply by giving Pixeltable their URLs. The example images in this demo come from the COCO dataset, and we'll be referencing copies of them in the Pixeltable github repo. But in practice, the images can come from anywhere: an S3 bucket, say, or the local file system.</p> <p>When we add the image, we see that Pixeltable gives us some useful status updates indicating that the operation was successful.</p> In\u00a0[4]: Copied! <pre>t.insert(input_image='https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000025.jpg')\n</pre> t.insert(input_image='https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000025.jpg') <pre>Inserting rows into `first`: 1 rows [00:00, 286.95 rows/s]\nInserted 1 row with 0 errors.\n</pre> Out[4]: <pre>UpdateStatus(num_rows=1, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>We can use <code>t.show()</code> to examine the contents of the table.</p> In\u00a0[5]: Copied! <pre>t.show()\n</pre> t.show() Out[5]: input_image In\u00a0[6]: Copied! <pre>from pixeltable.functions import huggingface\nt['detect'] = huggingface.detr_for_object_detection(t.input_image, model_id='facebook/detr-resnet-50')\n</pre> from pixeltable.functions import huggingface t['detect'] = huggingface.detr_for_object_detection(t.input_image, model_id='facebook/detr-resnet-50') <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:01&lt;00:00,  1.26s/ cells]\nAdded 1 column value with 0 errors.\n</pre> <p>Let's examine the results.</p> In\u00a0[7]: Copied! <pre>t.show()\n</pre> t.show() Out[7]: input_image detect {'boxes': [[51.94154739379883, 356.17449951171875, 181.4806365966797, 413.97491455078125], [383.2247314453125, 58.6600456237793, 605.6396484375, 361.3460388183594]], 'labels': [25, 25], 'scores': [0.9898098707199097, 0.9990087747573853], 'label_text': ['giraffe', 'giraffe']} <p>We see that the model returned a JSON structure containing a lot of information. In particular, it has the following fields:</p> <ul> <li><code>label_text</code>: Descriptions of the objects detected</li> <li><code>boxes</code>: Bounding boxes for each detected object</li> <li><code>scores</code>: Confidence scores for each detection</li> <li><code>labels</code>: The DETR model's internal IDs for the detected objects</li> </ul> <p>Perhaps this is more than we need, and all we really want are the text labels. We could add another computed column to extract <code>label_text</code> from the JSON struct:</p> In\u00a0[8]: Copied! <pre>t['detect_text'] = t.detect.label_text\nt.show()\n</pre> t['detect_text'] = t.detect.label_text t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 197.56 cells/s]\nAdded 1 column value with 0 errors.\n</pre> Out[8]: input_image detect detect_text {'boxes': [[51.94154739379883, 356.17449951171875, 181.4806365966797, 413.97491455078125], [383.2247314453125, 58.6600456237793, 605.6396484375, 361.3460388183594]], 'labels': [25, 25], 'scores': [0.9898098707199097, 0.9990087747573853], 'label_text': ['giraffe', 'giraffe']} [giraffe, giraffe] <p>If we inspect the table schema now, we see how Pixeltable distinguishes between ordinary and computed columns.</p> In\u00a0[9]: Copied! <pre>t.describe()\n</pre> t.describe() Column Name Type Computed With input_image image detect json huggingface.detr_for_object_detection(input_image, model_id='facebook/detr-resnet-50') detect_text json detect.label_text <p>Now let's add some more images to our table. This demonstrates another important feature of computed columns: by default, they update incrementally any time new data shows up on their inputs. In this case, Pixeltable will run the ResNet-50 model against each new image that is added, then extract the labels into the <code>detect_text</code> column. Pixeltable will orchestrate the execution of any sequence (or DAG) of computed columns.</p> <p>Note how we can pass multiple rows to <code>t.insert</code> with a single statement, which will insert them more efficiently.</p> In\u00a0[10]: Copied! <pre>more_images = [\n    'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000030.jpg',\n    'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000034.jpg',\n    'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000042.jpg',\n    'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000061.jpg'\n]\nt.insert({'input_image': image} for image in more_images)\n</pre> more_images = [     'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000030.jpg',     'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000034.jpg',     'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000042.jpg',     'https://raw.github.com/pixeltable/pixeltable/master/docs/source/data/images/000000000061.jpg' ] t.insert({'input_image': image} for image in more_images) <pre>Computing cells:  50%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      | 4/8 [00:01&lt;00:01,  3.65 cells/s]\nInserting rows into `first`: 4 rows [00:00, 3703.58 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8/8 [00:01&lt;00:00,  7.28 cells/s]\nInserted 4 rows with 0 errors.\n</pre> Out[10]: <pre>UpdateStatus(num_rows=4, num_computed_values=8, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>Let's see what the model came up with. We'll use <code>t.select</code> to suppress the display of the <code>detect</code> column, since right now we're only interested in the text labels.</p> In\u00a0[11]: Copied! <pre>t.select(t.input_image, t.detect_text).show()\n</pre> t.select(t.input_image, t.detect_text).show() Out[11]: input_image detect_text [giraffe, giraffe] [vase, potted plant] [zebra] [dog, dog] [person, person, bench, person, elephant, elephant, person] In\u00a0[1]: Copied! <pre># Clear all variables in the notebook\n%reset -f\n\n# Instantiate a new client object\nimport pixeltable as pxt\nt = pxt.get_table('demo.first')\n\n# Display just the first two rows, to avoid cluttering the tutorial\nt.select(t.input_image, t.detect_text).show(2)\n</pre> # Clear all variables in the notebook %reset -f  # Instantiate a new client object import pixeltable as pxt t = pxt.get_table('demo.first')  # Display just the first two rows, to avoid cluttering the tutorial t.select(t.input_image, t.detect_text).show(2) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\n</pre> Out[1]: input_image detect_text [giraffe, giraffe] [vase, potted plant] In\u00a0[2]: Copied! <pre>import os\nimport getpass\nos.environ['OPENAI_API_KEY'] = getpass.getpass('Enter your OpenAI API key:')\n</pre> import os import getpass os.environ['OPENAI_API_KEY'] = getpass.getpass('Enter your OpenAI API key:') <p>Now we can connect to OpenAI through Pixeltable. This may take some time, depending on how long OpenAI takes to process the query.</p> In\u00a0[3]: Copied! <pre>from pixeltable.functions import openai\n\nt['vision'] = openai.vision(prompt=\"Describe what's in this image.\", image=t.input_image)\n</pre> from pixeltable.functions import openai  t['vision'] = openai.vision(prompt=\"Describe what's in this image.\", image=t.input_image) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:34&lt;00:00,  6.95s/ cells]\nAdded 5 column values with 0 errors.\n</pre> <p>Let's see how GPT-4's responses compare to the traditional discriminative (DETR) model.</p> In\u00a0[4]: Copied! <pre>t.select(t.input_image, t.detect_text, t.vision).show()\n</pre> t.select(t.input_image, t.detect_text, t.vision).show() Out[4]: input_image detect_text vision [giraffe, giraffe] The image shows two giraffes in a naturalistic habitat that resembles an African savanna setting. The giraffe in the foreground is standing and appears to be reaching up to a tall tree to possibly browse on leaves or hay placed there for enrichment. The spots on their bodies have a pattern that is typical of giraffes, and their long necks are distinctive features of this species. The background features a second giraffe resting on the ground with trees and shrubs around, indicating a spacious environment likely within a zoo or wildlife reserve. The setting is peaceful and pastoral with ample sunshine and clear skies. [vase, potted plant] The image shows a white vase placed on what appears to be a ledge or a shelf, which is a part of an outdoor setting given the natural light and greenery in the background. The vase is filled with a lovely arrangement of flowers that includes white blossoms that could be hydrangeas, along with smaller red and pink flowers. The scene evokes a peaceful and warm ambiance, possibly a garden or a patio area. There is also a soft shadow cast onto the surface where the vase sits, indicating that the photo was taken on a sunny day. [zebra] The image features a zebra grazing on a grassy field. The zebra is positioned at an angle to the camera, showing its distinctive black and white striped pattern covering its body, head, and legs. It is bending its head down towards the grass, likely eating. The background consists of a bright grassy field with a hint of a shadow suggesting a sunny day. The zebra's mane is erect, and it has large ears that are facing forward. [dog, dog] The image shows a small poodle-like dog asleep on a white wire rack. The dog's curly, light brown fur covers its body so that its face is not visible in the photo. The wire rack is also holding various footwear, including a pair of red flip-flops with a pattern on them, white sneakers, and some black shoes that are partially cut off at the edge of the photo. Just in front of the rack, on the left side, there is a black item which appears to be a gym shoe or a sport sandal with the brand name \"RUCANOR\" visible. The floor is a terracotta-colored tile, and there's a hint of a blue object, possibly a part of another item or structure, adjacent to the shoe rack. The scene suggests a casual, homely environment. [person, person, bench, person, elephant, elephant, person] The image shows two elephants with riders on their backs, trekking through a lush green forest. The forest floor is covered with various green plants, and the trees are densely packed with green leaves. The riders are sitting on top of the elephants using what appear to be special seats or mounts designed for elephant riding. It seems to be a day with ample daylight, possibly indicating daytime in a tropical or subtropical forest environment often associated with such elephant trekking activities. <p>In addition to adapters for local models and inference APIs, Pixeltable can perform a range of more basic image operations. These image operations can be seamlessly chained with API calls, and Pixeltable will keep track of the sequence of operations, constructing new images and caching when necessary to keep things running smoothly. Just for fun (and to demonstrate the power of computed columns), let's see what OpenAI thinks of our sample images when we rotate them by 180 degrees.</p> In\u00a0[5]: Copied! <pre>t['rot_image'] = t.input_image.rotate(180)\nt['rot_vision'] = openai.vision(prompt=\"Describe what's in this image.\", image=t.rot_image)\n</pre> t['rot_image'] = t.input_image.rotate(180) t['rot_vision'] = openai.vision(prompt=\"Describe what's in this image.\", image=t.rot_image) <pre>Added 5 column values with 0 errors.\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:33&lt;00:00,  6.78s/ cells]\nAdded 5 column values with 0 errors.\n</pre> In\u00a0[6]: Copied! <pre>t.select(t.rot_image, t.rot_vision).show()\n</pre> t.select(t.rot_image, t.rot_vision).show() Out[6]: rot_image rot_vision The image appears to be upside down. It shows the inverted view of a giraffe with trees in the background. The giraffe's neck and head are visible as it seems to reach towards the ground, which is actually the sky due to the inverted perspective. The trees in the upside down image likely represent the sky normally, and the clear blue at the bottom, which would usually be the sky, represents the ground here. The photo seems to play with perspective by flipping the scene upside down. If you were to flip this image 180 degrees, you'd see the giraffe standing upright with the sky above and the trees and earth below. This image shows a bouquet of flowers hanging upside down from a white structure which could possibly be a shelf or the edge of a ceiling. The bouquet is attached just below a white, decorative element that resembles the bottom part of a classical column (perhaps a part of a lamp or another decorative piece). The flowers include various types, with white blossoms and some pinkish-red flowers amid greenery, arranged in a dense, rounded format. The flowers appear fresh and are likely hung this way for decorative purposes, as part of an event setting, or potentially to dry them for preservation. In the blurred background, there is greenery indicating that this setting is outdoors or in a space with plants. This image shows a zebra lying on its back on some grass. The zebra's front legs are bent at the knees and sticking up in the air, and its head is turned to the side to face the camera. The grass appears to be lush and sunlit, and the zebra looks comfortable and relaxed in this unusual position. The distinct black and white stripes of the zebra's coat are a striking contrast against the green of the grass. The image shows a curly-haired dog, possibly a poodle or poodle mix, that appears to be standing or lying down among various pairs of shoes on a metal rack. The rack is ostensibly for organizing shoes, and there are at least four visible pairs: a pair that looks like running shoes, a sandal, a flip-flop, and another sporty shoe. There is also a blue object, potentially a shoelace, on the ground to the left of the dog. The flooring is tiled, suggesting this may be an indoor setting, possibly an entryway or a mudroom where shoes are commonly kept. The image is upside down, which likely causes some confusion at first glance. It shows a dense green foliage background with the leaves covering most of the frame. The center of the image features an upside-down opening into what appears to be a cave or dark space, and inside this opening, there are several structures resembling a deck or viewing platform, with protective railings that are now on the lower part of the opening because the image is inverted. The color contrast between the dark interior space and the bright greenery makes the opening stand out. The image overall creates an intriguing and somewhat disorienting visual due to the upside-down perspective. In\u00a0[7]: Copied! <pre>@pxt.udf\ndef detect_top(detect: dict) -&gt; str:\n    scores = detect['scores']\n    label_text = detect['label_text']\n    # Get the index of the object with the highest confidence\n    i = scores.index(max(scores))\n    # Return the corresponding label\n    return label_text[i]\n</pre> @pxt.udf def detect_top(detect: dict) -&gt; str:     scores = detect['scores']     label_text = detect['label_text']     # Get the index of the object with the highest confidence     i = scores.index(max(scores))     # Return the corresponding label     return label_text[i] In\u00a0[8]: Copied! <pre>t['top'] = detect_top(t.detect)\n</pre> t['top'] = detect_top(t.detect) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 5/5 [00:00&lt;00:00, 609.23 cells/s]\nAdded 5 column values with 0 errors.\n</pre> In\u00a0[9]: Copied! <pre>t.select(t.detect_text, t.top).show()\n</pre> t.select(t.detect_text, t.top).show() Out[9]: detect_text top [giraffe, giraffe] giraffe [vase, potted plant] vase [zebra] zebra [dog, dog] dog [person, person, bench, person, elephant, elephant, person] elephant <p>Congratulations! You've reached the end of the tutorial. Hopefully, this gives a good overview of the capabilities of Pixeltable, but there's much more to explore. As a next step, you might check out one of the other tutorials, depending on your interests:</p> <ul> <li>Object Detection in Videos</li> <li>RAG Operations in Pixeltable</li> <li>Working with OpenAI in Pixeltable</li> </ul>"},{"location":"tutorials/pixeltable-basics/#pixeltable-basics","title":"Pixeltable Basics\u00b6","text":"<p>Welcome to Pixeltable! In this tutorial, we'll survey how to create tables, populate them with data, and enhance them with built-in and user-defined transformations and AI operations.</p> <p>If you want to follow along with this tutorial interactively, there are two ways to go.</p> <ul> <li>Use a Kaggle or Colab container (easiest): Click on one of the badges above.</li> <li>Locally in a self-managed Python environment: You'll probably want to create your own empty notebook, then copy-paste each command from the website. Be sure your Jupyter kernel is running in a Python virtual environment; you can check out the Getting Started with Pixeltable guide for step-by-step instructions.</li> </ul>"},{"location":"tutorials/pixeltable-basics/#install-python-packages","title":"Install Python Packages\u00b6","text":"<p>First run the following command to install Pixeltable and related libraries needed for this tutorial.</p>"},{"location":"tutorials/pixeltable-basics/#creating-a-table","title":"Creating a Table\u00b6","text":"<p>Let's begin by creating a <code>demo</code> directory (if it doesn't already exist) and a table that can hold image data, <code>demo.first</code>. The table will initially have just a single column to hold our input images, which we'll call <code>input_image</code>. We also need to specify a type for the column: <code>pxt.ImageType()</code>.</p>"},{"location":"tutorials/pixeltable-basics/#adding-computed-columns","title":"Adding Computed Columns\u00b6","text":"<p>Great! Now we have a table containing some data. Let's add an object detection model to our workflow. Specifically, we're going to use the ResNet-50 object detection model, which runs using the Huggingface DETR (\"DEtection TRansformer\") model class. Pixeltable contains a built-in adapter for this model family, so all we have to do is call the <code>detr_for_object_detection</code> Pixeltable function. A nice thing about the Huggingface models is that they run locally, so you don't need an account with a service provider in order to use them.</p> <p>This is our first example of a computed column, a key concept in Pixeltable. Recall that when we created the <code>input_image</code> column, we specified a type, <code>ImageType</code>, indicating our intent to populate it with data in the future. When we create a computed column, we instead specify a function that operates on other columns of the table. By default, when we add the new computed column, Pixeltable immediately evaluates it against all existing data in the table - in this case, by calling the <code>detr_for_object_detection</code> function on the image.</p> <p>Depending on your setup, it may take a minute for the function to execute. In the background, Pixeltable is downloading the model from Huggingface (if necessary), instantiating it, and caching it for later use.</p>"},{"location":"tutorials/pixeltable-basics/#pixeltable-is-persistent","title":"Pixeltable Is Persistent\u00b6","text":"<p>An important feature of Pixeltable is that everything is persistent. Unlike in-memory Python libraries such as Pandas, Pixeltable is a database: all your data, transformations, and computed columns are stored and preserved between sessions. To see this, let's clear all the variables in our notebook and start fresh. You can optionally restart your notebook kernel at this point, to demonstrate how Pixeltable data persists across sessions.</p>"},{"location":"tutorials/pixeltable-basics/#gpt-4-vision","title":"GPT-4 Vision\u00b6","text":"<p>For comparison, let's try running our examples through a generative model, Open AI's GPT-4 Vision. For this section, you'll need an OpenAI account with an API key. You can use the following command to add your API key to the environment (just enter your API key when prompted):</p>"},{"location":"tutorials/pixeltable-basics/#udfs-enhancing-pixeltables-capabilities","title":"UDFs: Enhancing Pixeltable's Capabilities\u00b6","text":"<p>Another important principle of Pixeltable is that, although Pixeltable has a built-in library of useful operations and adapters, it will never prescribe a particular way of doing things. Pixeltable is built from the ground up to be extensible.</p> <p>Let's take a specific example. Recall our use of the ResNet-50 detection model, in which the <code>detect</code> column contains a JSON blob with bounding boxes, scores, and labels. Suppose we want to create a column containing the single label with the highest confidence score. There's no built-in Pixeltable function to do this, but it's easy to write our own. In fact, all we have to do is write a Python function that does the thing we want, and mark it with the <code>@pxt.udf</code> decorator.</p>"},{"location":"tutorials/rag-operations/","title":"RAG Operations in Pixeltable","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q sentence-transformers pixeltable\n</pre> %pip install -q sentence-transformers pixeltable In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\n# Create the Pixeltable workspace\npxt.create_dir('rag_ops_demo', ignore_errors=True)\n\n# Clean the database to ensure we're using fresh table instances\n# (in case this demo has been run before)\npxt.drop_table('rag_ops_demo.short_char_chunks', ignore_errors=True)\npxt.drop_table('rag_ops_demo.short_chunks', ignore_errors=True)\npxt.drop_table('rag_ops_demo.chunks', ignore_errors=True)\npxt.drop_table('rag_ops_demo.sentences', ignore_errors=True)\npxt.drop_table('rag_ops_demo.docs', ignore_errors=True)\n</pre> import pixeltable as pxt  # Create the Pixeltable workspace pxt.create_dir('rag_ops_demo', ignore_errors=True)  # Clean the database to ensure we're using fresh table instances # (in case this demo has been run before) pxt.drop_table('rag_ops_demo.short_char_chunks', ignore_errors=True) pxt.drop_table('rag_ops_demo.short_chunks', ignore_errors=True) pxt.drop_table('rag_ops_demo.chunks', ignore_errors=True) pxt.drop_table('rag_ops_demo.sentences', ignore_errors=True) pxt.drop_table('rag_ops_demo.docs', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `rag_ops_demo`.\n</pre> In\u00a0[2]: Copied! <pre>docs = pxt.create_table('rag_ops_demo.docs', {'source_doc': pxt.DocumentType()})\n</pre> docs = pxt.create_table('rag_ops_demo.docs', {'source_doc': pxt.DocumentType()}) <pre>Created table `docs`.\n</pre> <p>If we take a peek at the <code>docs</code> table, we see its very simple structure.</p> In\u00a0[3]: Copied! <pre>docs\n</pre> docs Out[3]: Column Name Type Computed With source_doc document <p>Next we create a view to represent chunks of our HTML documents. A Pixeltable view is a virtual table, which is dynamically derived from a source table by applying a transformation and/or selecting a subset of data. In this case, our view represents a one-to-many transformation from source documents into individual sentences. This is achieved using Pixeltable's built-in <code>DocumentSplitter</code> class.</p> <p>Note that the <code>docs</code> table is currently empty, so creating this view doesn't actually do anything yet: it simply defines an operation that we want Pixeltable to execute when it sees new data.</p> In\u00a0[4]: Copied! <pre>from pixeltable.iterators.document import DocumentSplitter\n\nsentences = pxt.create_view(\n    'rag_ops_demo.sentences',  # Name of the view\n    docs,  # Table from which the view is derived\n    iterator=DocumentSplitter.create(\n        document=docs.source_doc,\n        separators='sentence',  # Chunk docs into sentences\n        metadata='title,heading,sourceline'\n    )\n)\n</pre> from pixeltable.iterators.document import DocumentSplitter  sentences = pxt.create_view(     'rag_ops_demo.sentences',  # Name of the view     docs,  # Table from which the view is derived     iterator=DocumentSplitter.create(         document=docs.source_doc,         separators='sentence',  # Chunk docs into sentences         metadata='title,heading,sourceline'     ) ) <pre>Created view `sentences` with 0 rows, 0 exceptions.\n</pre> <p>Let's take a peek at the new <code>sentences</code> view.</p> In\u00a0[5]: Copied! <pre>sentences\n</pre> sentences Out[5]: Column Name Type Computed With pos int text string title string heading json sourceline int source_doc document <p>We see that <code>sentences</code> inherits the <code>source_doc</code> column from <code>docs</code>, together with some new fields:</p> <ul> <li><code>pos</code>: The position in the source document where the sentence appears.</li> <li><code>text</code>: The text of the sentence.</li> <li><code>title</code>, <code>heading</code>, and <code>sourceline</code>: The metadata we requested when we set up the view.</li> </ul> <p>Ok, now it's time to insert some data into our workflow. A document in Pixeltable is just a URL; the following command inserts a single row into the <code>docs</code> table with the <code>source_doc</code> field set to the specified URL:</p> In\u00a0[6]: Copied! <pre>docs.insert(source_doc='https://en.wikipedia.org/wiki/Marc_Chagall')\n</pre> docs.insert(source_doc='https://en.wikipedia.org/wiki/Marc_Chagall') <pre>Inserting rows into `docs`: 1 rows [00:00, 417.34 rows/s]\nInserting rows into `sentences`: 1461 rows [00:00, 3707.91 rows/s]\nInserted 1462 rows with 0 errors.\n</pre> Out[6]: <pre>UpdateStatus(num_rows=1462, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>We can see that two things happened. First, a single row was inserted into <code>docs</code>, containing the URL representing our source document. Then, the view <code>sentences</code> was incrementally updated by applying the <code>DocumentSplitter</code> according to the definition of the view. This illustrates an important principle in Pixeltable: by default, anytime Pixeltable sees new data, the update is incrementally propagated to any downstream views or computed columns.</p> <p>We can see the effect of the insertion with the <code>select</code> command. There's a single row in <code>docs</code>:</p> In\u00a0[7]: Copied! <pre>docs.select(docs.source_doc.fileurl).show()\n</pre> docs.select(docs.source_doc.fileurl).show() Out[7]: source_doc_fileurl https://en.wikipedia.org/wiki/Marc_Chagall <p>And here are the first 20 rows in <code>sentences</code>. The content of the article is broken into individual sentences, as expected.</p> In\u00a0[8]: Copied! <pre>sentences.select(sentences.text, sentences.heading).show(20)\n</pre> sentences.select(sentences.text, sentences.heading).show(20) Out[8]: text heading Marc Chagall - Wikipedia Jump to content Search Search {} Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 {'1': 'Marc Chagall'} Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 {'1': 'Marc Chagall'} Hrvatski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Latina Latvie\u0161u L\u00ebtzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645\u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont\u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Rom\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Svenska \u0e44\u0e17\u0e22 {'1': 'Marc Chagall'} T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 {'1': 'Marc Chagall'} \u7cb5\u8a9e \u4e2d\u6587 Edit links From Wikipedia, the free encyclopedia Russian-French artist (1887\u20131985) \"Chagall\" redirects here. {'1': 'Marc Chagall'} For other uses, see Chagall (disambiguation) . {'1': 'Marc Chagall'} Marc Chagall Chagall, c. 1920 {'1': 'Marc Chagall'} Born Moishe Shagal ( 1887-07-06 ) 6 July 1887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) {'1': 'Marc Chagall'} [1] Died 28 March 1985 (1985-03-28) (aged\u00a097) {'1': 'Marc Chagall'} Saint-Paul-de-Vence , France Nationality Russian, later French {'1': 'Marc Chagall'} [2] Known\u00a0for Painting stained glass Notable work See list of artworks by Marc Chagall Movement Cubism Expressionism School of Paris Spouses Bella Rosenfeld \u200b \u200b ( m. 1915; died\u00a01944) {'1': 'Marc Chagall'} \u200b Valentina (Vava) Brodsky \u200b \u200b ( m. 1952) {'1': 'Marc Chagall'} \u200b {'1': 'Marc Chagall'} [3] Children 2 {'1': 'Marc Chagall'} [4] {'1': 'Marc Chagall'} Marc Chagall {'1': 'Marc Chagall'} [a] (born Moishe Shagal ; 6 July\u00a0[ O.S. 24 June]\u00a01887 \u2013 28 March 1985) was a Russian-French artist. {'1': 'Marc Chagall'} [b] An early modernist , he was associated with the \u00c9cole de Paris as well as several major artistic styles and created works in a wide range of artistic formats, including painting, drawings, book illustrations, stained glass , stage sets, ceramics, tapestries and fine art prints. {'1': 'Marc Chagall'} Chagall was born in 1887, into a Jewish family near Vitebsk , today in Belarus , but at that time in the Pale of Settlement of the Russian Empire. {'1': 'Marc Chagall'} <p>Of course, chunking into sentences isn't the only way to split a document. Perhaps we want to experiment with different chunking methodologies, in order to see which one performs best in a particular application. Pixeltable makes it easy to do this, by creating several views of the same source table. Here are a few examples. Notice that as each new view is created, it is initially populated from the data already in <code>docs</code>.</p> In\u00a0[9]: Copied! <pre>chunks = pxt.create_view(\n    'rag_ops_demo.chunks', docs,\n    iterator=DocumentSplitter.create(\n        document=docs.source_doc,\n        separators='paragraph,token_limit',\n        limit=2048,\n        overlap=0,\n        metadata='title,heading,sourceline'\n    )\n)\n</pre> chunks = pxt.create_view(     'rag_ops_demo.chunks', docs,     iterator=DocumentSplitter.create(         document=docs.source_doc,         separators='paragraph,token_limit',         limit=2048,         overlap=0,         metadata='title,heading,sourceline'     ) ) <pre>Inserting rows into `chunks`: 205 rows [00:00, 19755.36 rows/s]\nCreated view `chunks` with 205 rows, 0 exceptions.\n</pre> In\u00a0[10]: Copied! <pre>short_chunks = pxt.create_view(\n    'rag_ops_demo.short_chunks', docs,\n    iterator=DocumentSplitter.create(\n        document=docs.source_doc,\n        separators='paragraph,token_limit',\n        limit=72,\n        overlap=0,\n        metadata='title,heading,sourceline'\n    )\n)\n</pre> short_chunks = pxt.create_view(     'rag_ops_demo.short_chunks', docs,     iterator=DocumentSplitter.create(         document=docs.source_doc,         separators='paragraph,token_limit',         limit=72,         overlap=0,         metadata='title,heading,sourceline'     ) ) <pre>Inserting rows into `short_chunks`: 531 rows [00:00, 25065.28 rows/s]\nCreated view `short_chunks` with 531 rows, 0 exceptions.\n</pre> In\u00a0[11]: Copied! <pre>short_char_chunks = pxt.create_view(\n    'rag_ops_demo.short_char_chunks', docs,\n    iterator=DocumentSplitter.create(\n        document=docs.source_doc,\n        separators='paragraph,char_limit',\n        limit=72,\n        overlap=0,\n        metadata='title,heading,sourceline'\n    )\n)\n</pre> short_char_chunks = pxt.create_view(     'rag_ops_demo.short_char_chunks', docs,     iterator=DocumentSplitter.create(         document=docs.source_doc,         separators='paragraph,char_limit',         limit=72,         overlap=0,         metadata='title,heading,sourceline'     ) ) <pre>Inserting rows into `short_char_chunks`: 1763 rows [00:00, 20191.74 rows/s]\nCreated view `short_char_chunks` with 1763 rows, 0 exceptions.\n</pre> In\u00a0[13]: Copied! <pre>chunks.select(chunks.text, chunks.heading).show(20)\n</pre> chunks.select(chunks.text, chunks.heading).show(20) Out[13]: text heading Marc Chagall - Wikipedia Jump to content Search Search {} Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Latina Latvie\u0161u L\u00ebtzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645\u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont\u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Rom\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Svenska \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u4e2d\u6587 Edit links From Wikipedia, the free encyclopedia Russian-French artist (1887\u20131985) \"Chagall\" redirects here. For other uses, see Chagall (disambiguation) . {'1': 'Marc Chagall'} Marc Chagall Chagall, c. 1920 Born Moishe Shagal ( 1887-07-06 ) 6 July 1887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) [1] Died 28 March 1985 (1985-03-28) (aged\u00a097) Saint-Paul-de-Vence , France Nationality Russian, later French [2] Known\u00a0for Painting stained glass Notable work See list of artworks by Marc Chagall Movement Cubism Expressionism School of Paris Spouses Bella Rosenfeld \u200b \u200b ( m. 1915; died\u00a01944) \u200b Valentina (Vava) Brodsky \u200b \u200b ( m. 1952) \u200b [3] Children 2 [4] {'1': 'Marc Chagall'} Marc Chagall [a] (born Moishe Shagal ; 6 July\u00a0[ O.S. 24 June]\u00a01887 \u2013 28 March 1985) was a Russian-French artist. [b] An early modernist , he was associated with the \u00c9cole de Paris as well as several major artistic styles and created works in a wide range of artistic formats, including painting, drawings, book illustrations, stained glass , stage sets, ceramics, tapestries and fine art prints. {'1': 'Marc Chagall'} Chagall was born in 1887, into a Jewish family near Vitebsk , today in Belarus , but at that time in the Pale of Settlement of the Russian Empire. Before World War I , he travelled between Saint Petersburg , Paris , and Berlin . During that period, he created his own mixture and style of modern art, based on his ideas of Eastern European and Jewish folklore. He spent the wartime years in his native Belarus, becoming one of the country's most distinguished artists and a member of the modernist avant-garde , founding the Vitebsk Arts College . He later worked in and near Moscow in difficult conditions during hard times in Russia following the Bolshevik Revolution , before leaving again for Paris in 1923. During World War II , he escaped occupied France to the United States, where he lived in New York City for seven years before returning to France in 1948. {'1': 'Marc Chagall'} Art critic Robert Hughes referred to Chagall as \"the quintessential Jewish artist of the twentieth century\". According to art historian Michael J. Lewis, Chagall was considered to be \"the last survivor of the first generation of European modernists\". For decades, he \"had also been respected as the world's pre-eminent Jewish artist\". [15] Using the medium of stained glass, he produced windows for the cathedrals of Reims and Metz as well as the Fraum\u00fcnster in Z\u00fcrich , windows for the UN and the Art Institute of Chicago and the Jerusalem Windows in Israel. He also did large-scale paintings, including part of the ceiling of the Paris Op\u00e9ra . He experienced modernism's \"golden age\" in Paris, where \"he synthesized the art forms of Cubism , Symbolism , and Fauvism , and the influence of Fauvism gave rise to Surrealism \". Yet throughout these phases of his style \"he remained most emphatically a Jewish artist, whose work was one long dreamy reverie of life in his native village of Vitebsk.\" [16] \"When Matisse dies\", Pablo Picasso remarked in the 1950s, \"Chagall will be the only painter left who understands what colour really is\". [17] {'1': 'Marc Chagall'} Early life and education [ edit ] {'1': 'Marc Chagall', '2': 'Early life and education[edit]'} Early life [ edit ] Marc Chagall's childhood home in Vitebsk , Belarus. Currently site of the Marc Chagall Museum . Marc Chagall, 1912, The Spoonful of Milk (La Cuiller\u00e9e de lait) , gouache on paper {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Marc Chagall was born Moishe Shagal in 1887, into a Jewish family in Liozna , [1] near the city of Vitebsk , Belarus, then part of the Russian Empire . [c] [18] At the time of his birth, Vitebsk's population was about 66,000. Half of the population was Jewish. [16] A picturesque city of churches and synagogues, it was called \"Russian Toledo \" by artist Ilya Repin , after the cosmopolitan city of the former Spanish Empire . [19] Because the city was built mostly of wood, little of it survived years of occupation and destruction during World War II. {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Chagall was the eldest of nine children. The family name, Shagal, is a variant of the name Segal , which in a Jewish community was usually borne by a Levitic family. [20] His father, Khatskl (Zachar) Shagal, was employed by a herring merchant, and his mother, Feige-Ite, sold groceries from their home. His father worked hard, carrying heavy barrels, earning 20 roubles each month (the average wages across the Russian Empire was 13 roubles a month). Chagall wrote of those early years: {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Day after day, winter and summer, at six o'clock in the morning, my father got up and went off to the synagogue. There he said his usual prayer for some dead man or other. On his return he made ready the samovar , drank some tea and went to work. Hellish work, the work of a galley-slave. Why try to hide it? How tell about it? No word will ever ease my father's lot... There was always plenty of butter and cheese on our table. Buttered bread, like an eternal symbol, was never out of my childish hands. [21] {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Years later, at the age of 57, while living in the United States, Chagall confirmed that when he published an open letter entitled, \"To My City Vitebsk\": {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Artistic inspiration[edit]'} One of the main sources of income for the Jewish population of the town was from the manufacture of clothing that was sold throughout the Russian Empire. They also made furniture and various agricultural tools. [22] From the late 18th century to the First World War, the Imperial Russian government confined Jews to living within the Pale of Settlement , which included modern Ukraine, Belarus, Poland, Lithuania, and Latvia, almost exactly corresponding to the territory of the Polish-Lithuanian Commonwealth which was taken over by Imperial Russia in the late 18th century. That led to the creation of Jewish market-villages ( shtetls ) throughout today's Eastern Europe, with their own markets, schools, hospitals, and other community institutions. [23] :\u200a14 {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Chagall wrote as a boy; \"I felt at every step that I was a Jew\u2014people made me feel it\". [24] [25] During a pogrom , Chagall wrote that: \"The street lamps are out. I feel panicky, especially in front of butchers' windows. There you can see calves that are still alive lying beside the butchers' hatchets and knives\". [25] [26] When asked by some pogromniks \"Jew or not?\", Chagall remembered thinking: \"My pockets are empty, my fingers sensitive, my legs weak and they are out for blood. My death would be futile. I so wanted to live\". [25] [26] Chagall denied being a Jew, leading the pogromniks to shout \"All right! Get along!\" [25] [26] {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Most of what is known about Chagall's early life has come from his autobiography, My Life . In it, he described the major influence that the culture of Hasidic Judaism had on his life as an artist. Chagall related how he realised that the Jewish traditions in which he had grown up were fast disappearing and that he needed to document them. From the 1730s, Vitebsk itself had been a centre of that culture, with its teachings derived from the Kabbalah . Chagall scholar, Susan Tumarkin Goodman, describes the links and sources of his art to his early home: {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Chagall's art can be understood as the response to a situation that has long marked the history of Russian Jews. Though they were cultural innovators who made important contributions to the broader society, Jews were considered outsiders in a frequently hostile society ... Chagall himself was born of a family steeped in religious life; his parents were observant Hasidic Jews who found spiritual satisfaction in a life defined by their faith and organized by prayer. [23] :\u200a14 {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} Art education [ edit ] Portrait of Chagall by Yehuda Pen , his first art teacher in Vitebsk {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Art education[edit]'} In the Russian Empire at that time, Jewish children were not allowed to attend regular schools and universities imposed a quota on Jews . Their movement within the city was also restricted. Chagall therefore received his primary education at the local Jewish religious school, where he studied Hebrew and the Bible. At the age of 13, his mother tried to enrol him in a regular high school, and he recalled: \"But in that school, they don't take Jews. Without a moment's hesitation, my courageous mother walks up to a professor.\" She offered the headmaster 50 roubles to let him attend, which he accepted. [21] {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Art education[edit]'} A turning point of his artistic life came when he first noticed a fellow student drawing. Baal-Teshuva writes that, for the young Chagall, watching someone draw \"was like a vision, a revelation in black and white\". Chagall would later say that there was no art of any kind in his family's home and the concept was totally alien to him. When Chagall asked the schoolmate how he learned to draw, his friend replied, \"Go and find a book in the library, idiot, choose any picture you like, and just copy it\". He soon began copying images from books and found the experience so rewarding he then decided he wanted to become an artist. [22] {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Art education[edit]'} Goodman writes that Chagall eventually confided to his mother, \"I want to be a painter\", although she could not yet understand his sudden interest in art or why he would choose a vocation that \"seemed so impractical\". The young Chagall explained: \"There's a place in town; if I'm admitted and if I complete the course, I'll come out a regular artist. I'd be so happy!\" It was 1906, and he had noticed the studio of Yehuda (Yuri) Pen , a realist artist who operated a drawing school in Vitebsk. At the same time, future artists El Lissitzky and Ossip Zadkine were also Pen's students. Due to Chagall's youth and lack of income, Pen offered to teach him free of charge. However, after a few months at the school, Chagall realized that academic portrait painting did not suit him. [22] {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Art education[edit]'} In\u00a0[14]: Copied! <pre>short_chunks.select(short_chunks.text, short_chunks.heading).show(20)\n</pre> short_chunks.select(short_chunks.text, short_chunks.heading).show(20) Out[14]: text heading Marc Chagall - Wikipedia Jump to content Search Search {} Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1 {'1': 'Marc Chagall'} \u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c {'1': 'Marc Chagall'} \uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Latina Latvie\u0161u L\u00eb {'1': 'Marc Chagall'} tzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645\u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont {'1': 'Marc Chagall'} \u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Rom\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi {'1': 'Marc Chagall'} Svenska \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u4e2d\u6587 Edit links From Wikipedia, the free encyclopedia Russian-French artist (1887\u20131985) \"Chagall\" redirects here {'1': 'Marc Chagall'} . For other uses, see Chagall (disambiguation) . {'1': 'Marc Chagall'} Marc Chagall Chagall, c. 1920 Born Moishe Shagal ( 1887-07-06 ) 6 July 1887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) [1] Died 28 March 1985 (1985-03- {'1': 'Marc Chagall'} 28) (aged\u00a097) Saint-Paul-de-Vence , France Nationality Russian, later French [2] Known\u00a0for Painting stained glass Notable work See list of artworks by Marc Chagall Movement Cubism Expressionism School of Paris Spouses Bella Rosenfeld \u200b \u200b ( m. 1915; died\u00a01944) \u200b Valentina {'1': 'Marc Chagall'} (Vava) Brodsky \u200b \u200b ( m. 1952) \u200b [3] Children 2 [4] {'1': 'Marc Chagall'} Marc Chagall [a] (born Moishe Shagal ; 6 July\u00a0[ O.S. 24 June]\u00a01887 \u2013 28 March 1985) was a Russian-French artist. [b] An early modernist , he was associated with the \u00c9cole de Paris as well as several major artistic styles and created works {'1': 'Marc Chagall'} in a wide range of artistic formats, including painting, drawings, book illustrations, stained glass , stage sets, ceramics, tapestries and fine art prints. {'1': 'Marc Chagall'} Chagall was born in 1887, into a Jewish family near Vitebsk , today in Belarus , but at that time in the Pale of Settlement of the Russian Empire. Before World War I , he travelled between Saint Petersburg , Paris , and Berlin . During that period, he created his own mixture and style of modern art, based on his {'1': 'Marc Chagall'} ideas of Eastern European and Jewish folklore. He spent the wartime years in his native Belarus, becoming one of the country's most distinguished artists and a member of the modernist avant-garde , founding the Vitebsk Arts College . He later worked in and near Moscow in difficult conditions during hard times in Russia following the Bolshevik Revolution , before leaving again for Paris {'1': 'Marc Chagall'} in 1923. During World War II , he escaped occupied France to the United States, where he lived in New York City for seven years before returning to France in 1948. {'1': 'Marc Chagall'} Art critic Robert Hughes referred to Chagall as \"the quintessential Jewish artist of the twentieth century\". According to art historian Michael J. Lewis, Chagall was considered to be \"the last survivor of the first generation of European modernists\". For decades, he \"had also been respected as the world's pre-eminent Jewish artist\". [15] {'1': 'Marc Chagall'} Using the medium of stained glass, he produced windows for the cathedrals of Reims and Metz as well as the Fraum\u00fcnster in Z\u00fcrich , windows for the UN and the Art Institute of Chicago and the Jerusalem Windows in Israel. He also did large-scale paintings, including part of the ceiling of the Paris Op\u00e9ra . He experienced {'1': 'Marc Chagall'} modernism's \"golden age\" in Paris, where \"he synthesized the art forms of Cubism , Symbolism , and Fauvism , and the influence of Fauvism gave rise to Surrealism \". Yet throughout these phases of his style \"he remained most emphatically a Jewish artist, whose work was one long dreamy reverie of {'1': 'Marc Chagall'} life in his native village of Vitebsk.\" [16] \"When Matisse dies\", Pablo Picasso remarked in the 1950s, \"Chagall will be the only painter left who understands what colour really is\". [17] {'1': 'Marc Chagall'} In\u00a0[15]: Copied! <pre>short_char_chunks.select(short_char_chunks.text, short_char_chunks.heading).show(20)\n</pre> short_char_chunks.select(short_char_chunks.text, short_char_chunks.heading).show(20) Out[15]: text heading Marc Chagall - Wikipedia Jump to content Search Search {} Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561 {'1': 'Marc Chagall'} \u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430 {'1': 'Marc Chagall'} \u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac {'1': 'Marc Chagall'} Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 Hrva {'1': 'Marc Chagall'} tski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswah {'1': 'Marc Chagall'} ili Latina Latvie\u0161u L\u00ebtzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645 {'1': 'Marc Chagall'} \u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbe {'1': 'Marc Chagall'} kcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont\u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Ro {'1': 'Marc Chagall'} m\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina S {'1': 'Marc Chagall'} loven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi S {'1': 'Marc Chagall'} venska \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u4e2d\u6587 Edit lin {'1': 'Marc Chagall'} ks From Wikipedia, the free encyclopedia Russian-French artist (1887\u2013198 {'1': 'Marc Chagall'} 5) \"Chagall\" redirects here. For other uses, see Chagall (disambiguation {'1': 'Marc Chagall'} ) . {'1': 'Marc Chagall'} Marc Chagall Chagall, c. 1920 Born Moishe Shagal ( 1887-07-06 ) 6 July 1 {'1': 'Marc Chagall'} 887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) [ {'1': 'Marc Chagall'} 1] Died 28 March 1985 (1985-03-28) (aged\u00a097) Saint-Paul-de-Vence , Franc {'1': 'Marc Chagall'} e Nationality Russian, later French [2] Known\u00a0for Painting stained glass {'1': 'Marc Chagall'} Notable work See list of artworks by Marc Chagall Movement Cubism Expre {'1': 'Marc Chagall'} <p>Now let's add a few more documents to our workflow. Notice how all of the downstream views are updated incrementally, processing just the new documents as they are inserted.</p> In\u00a0[16]: Copied! <pre>urls = [\n    'https://en.wikipedia.org/wiki/Pierre-Auguste_Renoir',\n    'https://en.wikipedia.org/wiki/Henri_Matisse',\n    'https://en.wikipedia.org/wiki/Marcel_Duchamp'\n]\ndocs.insert({'source_doc': url} for url in urls)\n</pre> urls = [     'https://en.wikipedia.org/wiki/Pierre-Auguste_Renoir',     'https://en.wikipedia.org/wiki/Henri_Matisse',     'https://en.wikipedia.org/wiki/Marcel_Duchamp' ] docs.insert({'source_doc': url} for url in urls) <pre>Inserting rows into `docs`: 3 rows [00:00, 3352.76 rows/s]\nInserting rows into `sentences`: 2099 rows [00:02, 737.95 rows/s]\nInserting rows into `chunks`: 275 rows [00:00, 21064.59 rows/s]\nInserting rows into `short_chunks`: 809 rows [00:00, 24956.18 rows/s]\nInserting rows into `short_char_chunks`: 2635 rows [00:00, 9001.13 rows/s]\nInserted 5821 rows with 0 errors.\n</pre> Out[16]: <pre>UpdateStatus(num_rows=5821, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>Next, let's look at how embedding indices can be added seamlessly to existing Pixeltable workflows. To compute our embeddings, we'll use the Huggingface <code>sentence_transformer</code> package, running it over the <code>chunks</code> view that broke our documents up into larger paragraphs. Pixeltable has a built-in <code>sentence_transformer</code> adapter, and all we have to do is add a new column that leverages it. Pixeltable takes care of the rest, applying the new column to all existing data in the view.</p> In\u00a0[17]: Copied! <pre>from pixeltable.functions.huggingface import sentence_transformer\n\nchunks['minilm_embed'] =sentence_transformer(chunks.text, model_id='paraphrase-MiniLM-L6-v2')\n</pre> from pixeltable.functions.huggingface import sentence_transformer  chunks['minilm_embed'] =sentence_transformer(chunks.text, model_id='paraphrase-MiniLM-L6-v2') <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 480/480 [00:01&lt;00:00, 452.39 cells/s]\nAdded 480 column values with 0 errors.\n</pre> <p>The new column is a computed column: it is defined as a function on top of existing data and updated incrementally as new data are added to the workflow. Let's have a look at how the new column affected the <code>chunks</code> view.</p> In\u00a0[18]: Copied! <pre>chunks\n</pre> chunks Out[18]: Column Name Type Computed With pos int text string title string heading json sourceline int minilm_embed array((384,), dtype=FLOAT) sentence_transformer(text, model_id='paraphrase-MiniLM-L6-v2') source_doc document In\u00a0[19]: Copied! <pre>chunks.head()\n</pre> chunks.head() Out[19]: pos text title heading sourceline minilm_embed source_doc 0 Marc Chagall - Wikipedia Jump to content Search Search Marc Chagall - Wikipedia {} 0 [-0.2623971, -0.11875597, -0.1327094, 0.04825155, 0.11987543, -0.0060522407, 0.32066354, 0.048358902, 0.29429528, -0.25400928, 0.6250124, 0.1780471, -0.0049093324, 0.26455668, -0.25857234, -0.04235539, 0.36528495, 0.23551314, 0.2759594, -0.37120554, 0.17573267, 0.0029874444, 0.23927839, -0.17485918, 0.19540693, -0.48891962, -0.7418267, -0.3072058, 0.23550892, -0.26159525, 0.5011105, -0.6918157, -0.2546256, -0.19169794, 0.52656704, 0.10684747, -0.35004127, -0.47890767, 0.27644458, 0.26248962, 0.055178195, -0.14610718, -0.21482663, 0.724693, -0.105297856, 0.5106915, -0.1817412, 0.4592062, 0.36721292, 0.5129047, -0.6575721, -0.44697943, -0.26266992, -0.4482015, 0.38971034, -0.16952093, -0.1143501, -0.0723624, 0.26450846, -0.57930374, 0.28047284, 0.09170102, -0.16436036, 0.10646355, -0.14615744, 0.19661124, 0.07363992, 0.21059889, 0.17992173, 0.15980835, -0.37105095, 0.25376248, -0.44671547, 0.657332, -0.3887278, -0.27646342, -0.7946083, -0.08837419, -0.27318326, -0.21008565, 0.57023406, -0.3434786, 0.15152001, -0.3031939, -0.043730196, -0.32914844, 0.25554967, 0.060874503, 0.23776944, 0.2961497, 0.18648748, -0.355997, 0.15256242, -0.084133826, -0.48064312, 0.30865636, 0.10970494, 0.11276869, 0.71860474, -0.21019451, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              1 Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Latina Latvie\u0161u L\u00ebtzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645\u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont\u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Rom\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Svenska \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u4e2d\u6587 Edit links From Wikipedia, the free encyclopedia Russian-French artist (1887\u20131985) \"Chagall\" redirects here. For other uses, see Chagall (disambiguation) . Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 820 [-0.13631284, 0.40063256, -0.5300299, -0.1814317, -0.45316994, -0.12492252, 0.7796175, -0.24712454, 0.12325861, -0.22153562, 0.28455302, -0.43702734, 0.2315685, 0.14490259, -0.10851226, -0.28869808, 0.2181759, 0.7690574, -0.3198973, -0.4431276, 0.059898343, -0.08027286, 0.12561797, 0.20749918, -0.04779523, 0.24811892, 0.31219947, -0.08558024, -0.22011814, 0.35220224, 0.58977956, 0.07881065, 0.19522737, -0.14123651, 0.35313025, 0.248419, -0.13180904, 0.2722456, 0.28210595, 0.13397658, 0.10607683, -0.09232128, 0.09185548, 0.18311344, 0.12448602, -0.05098941, -0.17604476, 0.0156472, -0.05244754, -0.24283394, -0.42616746, -0.45576864, -0.35508007, -0.43146527, 0.30693352, -0.9420444, -0.1502328, 0.73327005, 0.0008648187, -0.3663265, -0.5619301, 0.21601504, -0.6227497, 0.43365508, -0.28584424, -0.33551326, -0.044290617, 0.34401017, -0.20072122, 0.051950324, -0.14124426, -0.12208992, 0.17209947, 0.24971412, -0.1148842, -0.3685053, 0.25038457, 0.22488211, -0.23860529, 0.014345817, 0.13038483, -0.0057234727, -0.030419111, -0.29217714, 0.23628002, -0.07539792, -0.011316142, -0.091147415, 0.65404445, -0.946898, 0.5174334, 0.2996515, 0.23870116, -0.06947715, 0.5011023, -0.08394453, 0.15647276, -0.33553213, 0.08633526, -0.110680446, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              2 Marc Chagall Chagall, c. 1920 Born Moishe Shagal ( 1887-07-06 ) 6 July 1887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) [1] Died 28 March 1985 (1985-03-28) (aged\u00a097) Saint-Paul-de-Vence , France Nationality Russian, later French [2] Known\u00a0for Painting stained glass Notable work See list of artworks by Marc Chagall Movement Cubism Expressionism School of Paris Spouses Bella Rosenfeld \u200b \u200b ( m. 1915; died\u00a01944) \u200b Valentina (Vava) Brodsky \u200b \u200b ( m. 1952) \u200b [3] Children 2 [4] Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1015 [6.522564e-05, 0.3301981, -0.3143772, 0.16797635, -0.12290393, 0.39934808, 0.3245805, -0.08697315, 0.12718417, -0.28854358, -0.29178268, -0.04188224, 0.18196607, 0.03411273, -0.24060719, 0.19282629, 0.011269633, 0.024814256, 0.07479516, -0.07968499, 0.16191289, 0.037563384, 0.098760605, 0.050052628, 0.19700313, -0.32870954, -0.04666899, -0.19853556, 0.020406839, -0.017759824, 0.15382415, 0.026588809, -0.31854808, 0.18437642, 0.0780596, -0.006167789, -0.239117, -0.016325358, 0.17077415, 0.2676591, 0.06001705, 0.14007872, -0.11668334, 0.087685406, 0.22242263, -0.041542508, 0.26146287, 0.031148747, -0.14149372, 0.12049799, -0.43130723, -0.28403637, 0.14311233, -0.251949, 0.19505084, -0.44784555, -0.09609296, -0.06251999, 0.11826225, -0.23685348, -0.1504384, -0.0967748, -0.09041497, -0.032261744, -0.27373862, 0.12859926, 0.06771181, -0.13807008, 0.30915943, -0.09036252, 0.204465, 9.6525066e-05, -0.2891725, 0.01944619, -0.24057072, -0.14107522, -0.14687195, 0.0878318, -0.40227222, -0.31160486, 0.17885417, 0.03342853, 0.16870755, 0.27444363, 0.10657356, 0.0354847, -0.051980913, 0.09805398, -0.028410489, 0.0066139186, 0.22335179, 0.29214042, -0.05236114, 0.04557202, 0.10190335, 0.15689607, 0.1292069, 0.11611345, 0.13840644, -0.17613539, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              3 Marc Chagall [a] (born Moishe Shagal ; 6 July\u00a0[ O.S. 24 June]\u00a01887 \u2013 28 March 1985) was a Russian-French artist. [b] An early modernist , he was associated with the \u00c9cole de Paris as well as several major artistic styles and created works in a wide range of artistic formats, including painting, drawings, book illustrations, stained glass , stage sets, ceramics, tapestries and fine art prints. Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1029 [0.06070805, 0.15527852, -0.18933792, 0.16767861, -0.08854663, 0.17130667, 0.15084991, -0.043867458, 0.15022095, -0.47134015, -0.28864858, -0.1717324, -0.047000885, 0.02663383, -0.06628912, 0.16065466, 0.11814167, 0.1318022, -0.004020229, -0.14932011, 0.17918754, 0.21494931, 0.09146318, 0.03896226, 0.038501557, -0.25235483, 0.27075002, -0.25661975, 0.13307256, -0.39810264, 0.21422918, 0.07985368, -0.28083143, -0.009454845, -0.007048361, 0.05220409, -0.21773991, -0.021139868, 0.11031076, 0.26661932, 0.21084821, 0.3218298, -0.0955615, 0.07259323, 0.121312276, -0.104517035, -0.010188625, -0.03756207, -0.2270827, 0.14353356, -0.37686616, -0.17414221, 0.2161481, -0.45889547, 0.07239764, -0.4019921, 0.070493914, 0.026767494, 0.15950088, -0.24915558, -0.095962785, -0.075519465, 0.19581796, -0.035721052, -0.10169228, -0.08450497, -0.09172762, -0.07791163, 0.1265816, -0.039653525, 0.027229706, 0.08718767, 0.037420932, -0.031369347, 0.021826323, -0.501008, -0.18308266, 0.24249066, -0.3046359, -0.16277763, 0.3999882, -0.16028918, 0.03417186, 0.20159683, 0.084876485, 0.06755653, -0.050601076, 0.14891143, -0.025254818, -0.0067676683, 0.121552296, 0.16791332, -0.24602461, 0.080474354, -0.012239305, 0.09207294, 0.019633103, 0.24711512, 0.19672464, -0.0031051936, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              4 Chagall was born in 1887, into a Jewish family near Vitebsk , today in Belarus , but at that time in the Pale of Settlement of the Russian Empire. Before World War I , he travelled between Saint Petersburg , Paris , and Berlin . During that period, he created his own mixture and style of modern art, based on his ideas of Eastern European and Jewish folklore. He spent the wartime years in his native Belarus, becoming one of the country's most distinguished artists and a member of the modernist avant-garde , founding the Vitebsk Arts College . He later worked in and near Moscow in difficult conditions during hard times in Russia following the Bolshevik Revolution , before leaving again for Paris in 1923. During World War II , he escaped occupied France to the United States, where he lived in New York City for seven years before returning to France in 1948. Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1030 [0.0128892455, 0.24784817, -0.69244295, 0.14261207, -0.37902343, 0.2535848, 0.25536233, -0.1260472, 0.11600019, -0.3464545, -0.42178217, 0.019877443, 0.21520871, -0.064955525, -0.15178007, 0.111605585, -0.15971033, 0.06491924, -0.0047338717, -0.33831462, -0.27981135, -0.1912081, 0.3114936, -0.0973105, 0.4178841, -0.36130285, 0.12893893, -0.11600203, -0.04178404, -0.107951045, 0.29499668, -0.13806331, -0.1439333, -0.008052505, 0.016671654, 0.17721397, -0.03954921, -0.10124822, 0.078565754, 0.16309279, 0.18659112, 0.2518265, -0.08688408, 0.084962115, 0.09951477, 0.3049577, 0.17764315, 0.14045668, -0.1822896, 0.042524207, -0.23616269, -0.22173883, 0.122920595, -0.21659338, 0.20440876, -0.26627278, -0.028624993, 0.20077911, 0.17120835, -0.4313025, -0.08327553, -0.26314813, 0.20102102, 0.05320874, -0.23124717, 0.05352086, -0.14058796, -0.009598337, 0.2552902, 0.073672205, 0.10801302, 0.21220188, -0.31999534, -0.011201458, -0.10513596, -0.5790532, -0.09553765, 0.008409211, -0.23266526, -0.08355545, 0.32477874, 0.22916724, 0.07943106, 0.3186044, 0.08367233, 0.026719442, -0.014187944, 0.19423041, 0.059627447, -0.00676677, 0.5294448, -0.035245754, 0.058794532, -0.063930504, 0.008244244, 0.19260897, 0.016116053, 0.35155174, 0.19266352, -0.24429816, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              5 Art critic Robert Hughes referred to Chagall as \"the quintessential Jewish artist of the twentieth century\". According to art historian Michael J. Lewis, Chagall was considered to be \"the last survivor of the first generation of European modernists\". For decades, he \"had also been respected as the world's pre-eminent Jewish artist\". [15] Using the medium of stained glass, he produced windows for the cathedrals of Reims and Metz as well as the Fraum\u00fcnster in Z\u00fcrich , windows for the UN and the Art Institute of Chicago and the Jerusalem Windows in Israel. He also did large-scale paintings, including part of the ceiling of the Paris Op\u00e9ra . He experienced modernism's \"golden age\" in Paris, where \"he synthesized the art forms of Cubism , Symbolism , and Fauvism , and the influence of Fauvism gave rise to Surrealism \". Yet throughout these phases of his style \"he remained most emphatically a Jewish artist, whose work was one long dreamy reverie of life in his native village of Vitebsk.\" [16] \"When Matisse dies\", Pablo Picasso remarked in the 1950s, \"Chagall will be the only painter left who understands what colour really is\". [17] Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1031 [-0.17184898, 0.34802842, -0.30670404, 0.033759408, -0.071207985, 0.11081599, -0.015894389, -0.13356604, -0.033708274, -0.2419455, -0.44456816, 0.059292305, 0.020918045, 0.14204666, -0.2409869, 0.27005798, -0.258923, 0.04510152, 0.05378626, 0.11298122, -0.08186172, 0.07691838, 0.3056298, -0.12195048, 0.3086163, -0.20567966, 0.19921307, -0.1286054, -0.14399256, -0.060565867, 0.09843995, -0.10340752, -0.26555908, -0.02704654, 0.07048167, 0.07951167, -0.06800339, 0.0012839548, 0.23670593, 0.16051252, 0.08615856, 0.30511206, -0.027099025, -0.17317602, 0.014067257, -0.015782744, 0.12305315, 0.05461802, -0.2078941, 0.11169619, -0.2432939, -0.17174804, 0.31153297, -0.47722512, 0.08077113, -0.31602716, -0.108076334, -0.06080752, -0.1282652, -0.4711492, -0.11467485, -0.38747922, -0.18139087, 0.17687619, -0.033176757, -0.10800495, -0.11308053, -0.1960685, -0.022167394, 0.08167149, 0.077876285, 0.04912957, 0.019410271, 0.077514365, 0.11992882, -0.2732598, -0.07606393, -0.012376104, -0.3093404, -0.05539541, 0.49092746, 0.05449142, 0.13599758, 0.29677796, 0.19566807, -0.027227543, -0.10856438, 0.03995211, -0.068166524, 0.1435353, 0.1098422, 0.08890329, 0.12124741, 0.23209855, 0.18221277, 0.22661185, -0.053041387, 0.17716637, -0.0038239658, -0.22502863, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              6 Early life and education [ edit ] Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]'} 1034 [-0.21258691, 0.4176262, 0.09400387, 0.13499916, -0.06885163, 0.26491654, -0.12511143, 0.28833574, 0.045800235, 0.2216897, 0.29161084, -0.3145675, -0.3136699, 0.11542577, 0.088318996, 0.056974318, 0.24027617, -0.2518334, -0.12356259, -0.5461291, -0.09656436, 0.0660869, 0.25659192, -0.052964687, 0.4823795, 0.32737744, 0.08615878, -0.07120575, 0.12762071, 0.42564505, 0.027730001, -0.4147855, 0.5348888, -0.4519836, -0.47164494, 0.3165918, 0.8776633, 0.042705856, -0.25590718, 0.044346843, -0.1453554, 0.2864723, -0.11327129, 0.19460052, 0.05073861, -0.1581568, 0.25129315, -0.2220518, -0.09832471, -0.12678038, -0.56669307, -0.12103857, 0.034594495, -0.35877645, 0.19099647, 0.3224834, -0.06600293, 0.42566475, -0.23869184, 0.06701737, -0.8374608, -0.2657261, -0.009735512, 0.7078457, -0.07748316, 0.27188885, -0.069167905, 0.44513574, 0.19136126, -0.33502173, -0.15556453, -0.2711283, 0.11840362, 0.36182863, -0.33293834, -0.13883986, 0.04020123, 0.3350144, 0.11592446, -0.7934551, 0.21795008, 0.23457977, -0.096499816, 0.24245007, -0.2910437, 0.41454434, -0.48009574, 0.29933107, -0.14576524, -0.29110992, 0.6442532, -0.46670663, -0.48874173, 0.3536403, 0.6117833, 0.20668012, -0.55355805, -0.32985818, -0.13371414, -0.22560586, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              7 Early life [ edit ] Marc Chagall's childhood home in Vitebsk , Belarus. Currently site of the Marc Chagall Museum . Marc Chagall, 1912, The Spoonful of Milk (La Cuiller\u00e9e de lait) , gouache on paper Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1035 [-0.04040356, 0.1428114, -0.3568075, 0.4118173, -0.3306093, 0.20134652, 0.15904717, 0.16806918, 0.23450547, -0.17853792, 0.076216966, -0.23785768, 0.047059473, 0.07234816, -0.5144093, 0.005939083, 0.117637105, 0.16320863, 0.20046334, -0.3107882, 0.033090994, -0.03074776, 0.26112193, -0.040257204, 0.3391727, 0.008225184, -0.21099368, -0.19426711, -0.17069328, -0.15220764, 0.06614047, -0.29302463, -0.16281903, -0.21634795, 0.05071195, 0.36889896, 0.21099831, -0.28517646, 0.04653233, 0.10108535, 0.17541891, 0.27149782, -0.02460022, 0.1368224, -0.07306952, 0.16629842, 0.33900672, -0.022616621, -0.12385281, 0.083199985, -0.6044519, -0.30993265, 0.21716246, -0.29389507, 0.16422017, -0.25379428, 0.05963148, 0.0020765075, 0.30152452, -0.13549928, -0.07433212, -0.21543212, 0.08626247, 0.08691753, -0.2776835, 0.20129634, -0.25110525, 0.100580364, 0.20634231, -0.049445163, -0.030263156, -0.07400863, -0.21622534, -0.06387952, -0.32896677, -0.5073129, -0.18882522, 0.07538755, -0.36687744, -0.12156583, 0.01760108, -0.0004210472, 0.0061056875, 0.0038018655, -0.29164806, 0.097530246, 0.030996598, 0.15973964, -0.16489528, -0.043514237, 0.6987028, 0.054011725, -0.016611572, 0.06936292, 0.029853428, -0.17610961, -0.43028662, 0.23585631, 0.5384827, -0.30086926, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              8 Marc Chagall was born Moishe Shagal in 1887, into a Jewish family in Liozna , [1] near the city of Vitebsk , Belarus, then part of the Russian Empire . [c] [18] At the time of his birth, Vitebsk's population was about 66,000. Half of the population was Jewish. [16] A picturesque city of churches and synagogues, it was called \"Russian Toledo \" by artist Ilya Repin , after the cosmopolitan city of the former Spanish Empire . [19] Because the city was built mostly of wood, little of it survived years of occupation and destruction during World War II. Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1038 [0.12289606, 0.19771104, -0.4960996, 0.1543681, -0.3683882, 0.078079656, 0.35305032, -0.059554525, 0.17041694, -0.099932164, -0.12581137, -0.14822446, 0.19600686, -0.04903745, -0.22496164, -0.11782656, -0.029683992, -0.15135884, -0.076080725, -0.13164555, -0.15614805, -0.12813674, 0.26295248, -0.050093956, 0.50816905, -0.37993717, 0.21430773, 0.01743046, -0.11382128, -0.003190495, 0.13804078, 0.04282849, 0.10256396, -0.037603594, 0.05948203, 0.01725334, 0.10230865, -0.17457329, -0.08156793, -0.0302542, 0.009354106, 0.3099228, -0.18747087, 0.15136, -0.076821536, 0.07280405, 0.03946651, 0.16246979, -0.046938375, -0.057767846, -0.28829074, -0.07179851, 0.11064647, 0.08096674, 0.31416374, -0.3115592, -0.20154516, -0.03271052, 0.22301677, -0.018219791, 0.00829201, -0.14288118, 0.14590019, 0.14642465, -0.21697524, 0.11366688, 0.041973874, -0.2781005, 0.059859417, -0.14236784, 0.11666666, 0.023176208, -0.15179303, 0.19413684, -0.19074053, -0.45537853, -0.10794468, 0.17236876, -0.31921896, -0.10242913, 0.15102842, 0.09995368, 0.13968742, 0.23945273, -0.14752795, 0.088864125, -0.2850201, 0.08255999, 0.021981336, 0.10126796, 0.41831368, 0.18025145, 0.1445052, -0.15728247, -0.08622718, -0.16223404, -0.16473392, 0.16730444, 0.024511546, -0.3002488, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              9 Chagall was the eldest of nine children. The family name, Shagal, is a variant of the name Segal , which in a Jewish community was usually borne by a Levitic family. [20] His father, Khatskl (Zachar) Shagal, was employed by a herring merchant, and his mother, Feige-Ite, sold groceries from their home. His father worked hard, carrying heavy barrels, earning 20 roubles each month (the average wages across the Russian Empire was 13 roubles a month). Chagall wrote of those early years: Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1039 [-0.19016075, 0.26621026, -0.4000805, 0.12919345, -0.4931459, 0.06254336, 0.45248395, -0.1977006, 0.3565962, -0.39628682, 0.07525156, -0.034594715, 0.10077585, -5.7241956e-05, -0.043138966, 0.21718857, -0.18270227, 0.023722649, -0.081377886, -0.21935272, 0.23643921, -0.18530127, 0.1901281, -0.13759938, 0.29683125, -0.0026680955, 0.2592335, -0.04560351, 0.07434845, -0.15570931, -0.05742963, 0.024905616, 0.15878378, -0.06530647, 0.067106195, 0.13660598, 0.13979806, -0.26153928, 0.15460384, 0.17037612, 0.31496724, 0.18973124, 0.053521287, -0.04389476, -0.42555642, 0.003822187, 0.1896462, -0.10599318, -0.019261891, 0.14236797, -0.77524954, -0.119407795, 0.32596982, -0.13587342, 0.4652508, -0.28711128, 0.08861769, -0.1649932, 0.15993862, -0.25447288, -0.45596832, -0.20720182, 0.079662554, -0.01065364, -0.045571662, -0.19634883, -0.2437223, -0.34079143, 0.14983986, 0.02576656, -0.1296941, 0.14368063, 0.0725072, 0.2978799, -0.4660587, -0.38848284, -0.1626155, 0.14219202, -0.3443891, -0.111245655, -0.31215024, -0.19792813, 0.09765518, 0.2621157, -0.18964118, 0.18680173, -0.15452711, 0.0019693843, -0.058514643, 0.16725062, 0.28203845, 0.13750376, 0.23745152, -0.045294583, 0.07589778, -0.058000974, 0.08730718, 0.021642083, -0.22950399, -0.063035026, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              <p>Similarly, we might want to add a CLIP embedding to our workflow; once again, it's just another computed column:</p> In\u00a0[20]: Copied! <pre>from pixeltable.functions.huggingface import clip_text\n\nchunks['clip_embed'] = clip_text(chunks.text, model_id='openai/clip-vit-base-patch32')\n</pre> from pixeltable.functions.huggingface import clip_text  chunks['clip_embed'] = clip_text(chunks.text, model_id='openai/clip-vit-base-patch32') <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 480/480 [00:02&lt;00:00, 238.96 cells/s]\nAdded 480 column values with 0 errors.\n</pre> In\u00a0[21]: Copied! <pre>chunks\n</pre> chunks Out[21]: Column Name Type Computed With pos int text string title string heading json sourceline int minilm_embed array((384,), dtype=FLOAT) sentence_transformer(text, model_id='paraphrase-MiniLM-L6-v2') clip_embed array((512,), dtype=FLOAT) clip_text(text, model_id='openai/clip-vit-base-patch32') source_doc document In\u00a0[22]: Copied! <pre>chunks.head()\n</pre> chunks.head() Out[22]: pos text title heading sourceline minilm_embed clip_embed source_doc 0 Marc Chagall - Wikipedia Jump to content Search Search Marc Chagall - Wikipedia {} 0 [-0.2623971, -0.11875597, -0.1327094, 0.04825155, 0.11987543, -0.0060522407, 0.32066354, 0.048358902, 0.29429528, -0.25400928, 0.6250124, 0.1780471, -0.0049093324, 0.26455668, -0.25857234, -0.04235539, 0.36528495, 0.23551314, 0.2759594, -0.37120554, 0.17573267, 0.0029874444, 0.23927839, -0.17485918, 0.19540693, -0.48891962, -0.7418267, -0.3072058, 0.23550892, -0.26159525, 0.5011105, -0.6918157, -0.2546256, -0.19169794, 0.52656704, 0.10684747, -0.35004127, -0.47890767, 0.27644458, 0.26248962, 0.055178195, -0.14610718, -0.21482663, 0.724693, -0.105297856, 0.5106915, -0.1817412, 0.4592062, 0.36721292, 0.5129047, -0.6575721, -0.44697943, -0.26266992, -0.4482015, 0.38971034, -0.16952093, -0.1143501, -0.0723624, 0.26450846, -0.57930374, 0.28047284, 0.09170102, -0.16436036, 0.10646355, -0.14615744, 0.19661124, 0.07363992, 0.21059889, 0.17992173, 0.15980835, -0.37105095, 0.25376248, -0.44671547, 0.657332, -0.3887278, -0.27646342, -0.7946083, -0.08837419, -0.27318326, -0.21008565, 0.57023406, -0.3434786, 0.15152001, -0.3031939, -0.043730196, -0.32914844, 0.25554967, 0.060874503, 0.23776944, 0.2961497, 0.18648748, -0.355997, 0.15256242, -0.084133826, -0.48064312, 0.30865636, 0.10970494, 0.11276869, 0.71860474, -0.21019451, ...] [0.43900785, -0.20442092, -0.3703841, -0.24842069, 0.2525649, 0.109884605, 0.17879923, -0.19681284, -0.21898562, 0.16312268, -0.11581852, 0.1092238, -0.39804864, 0.09145158, 0.102825396, -0.08496865, -0.26351961, 0.21744476, -0.30518532, -0.25689375, 0.3959956, 0.05023121, 0.06975499, 0.024919359, -0.23106097, 0.40560904, 0.05541487, 0.32912314, 0.30847397, -0.50972724, -0.09413456, -0.114752874, 0.06090342, -0.41492945, 0.22001785, -0.18334094, -0.1786417, -0.31954315, 0.2573876, -0.22376972, 0.18910305, 0.026809765, -0.004293302, 0.40239203, 0.20990945, 0.09746921, -0.130263, -0.22480457, -0.57115334, -0.08310897, 0.47325373, -0.18007915, 0.12506786, 0.086631425, 0.9078167, 0.2944164, 0.37376246, 0.0021954004, -0.45549917, 0.31297547, 0.15392725, 0.19201666, 0.40218055, 0.07109224, 0.1754787, -0.1596657, 0.23044428, 0.17929633, -0.062350426, -0.14394848, 0.083964534, -0.19787143, 0.15875755, 0.15464796, -0.12898104, -0.12406595, -0.45278224, 0.09551871, 0.002874703, 0.6825139, -0.5988117, -0.33829072, -0.34874046, 0.07570042, -0.35363954, -0.31604543, -0.1459959, -0.5174632, -0.13107206, 0.020408304, -0.4795367, -0.08089456, -1.0206141, -0.15478384, 0.23600452, 0.29316607, -0.44745418, -0.07385774, -0.11532665, -0.16539572, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              1 Marc Chagall 81 languages Afrikaans Alemannisch \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Aragon\u00e9s \u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576 Asturianu Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0430\u0448\u04a1\u043e\u0440\u0442\u0441\u0430 \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f (\u0442\u0430\u0440\u0430\u0448\u043a\u0435\u0432\u0456\u0446\u0430) \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Cymraeg Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Esperanto Euskara \u0641\u0627\u0631\u0633\u06cc Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 \u0939\u093f\u0928\u094d\u0926\u0940 Hrvatski Ido Bahasa Indonesia Interlingua Italiano \u05e2\u05d1\u05e8\u05d9\u05ea Jawa \u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8 Kiswahili Latina Latvie\u0161u L\u00ebtzebuergesch Lietuvi\u0173 Magyar \u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438 Malagasy \u0645\u0635\u0631\u0649 Nederlands Nedersaksies \u65e5\u672c\u8a9e Norsk bokm\u00e5l Norsk nynorsk Occitan O\u02bbzbekcha / \u045e\u0437\u0431\u0435\u043a\u0447\u0430 \u067e\u0646\u062c\u0627\u0628\u06cc Picard Piemont\u00e8is Plattd\u00fc\u00fctsch Polski Portugu\u00eas Rom\u00e2n\u0103 Runa Simi \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Shqip Sicilianu Simple English Sloven\u010dina Sloven\u0161\u010dina \u06a9\u0648\u0631\u062f\u06cc \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Svenska \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t Winaray \u5434\u8bed \u05d9\u05d9\u05b4\u05d3\u05d9\u05e9 \u7cb5\u8a9e \u4e2d\u6587 Edit links From Wikipedia, the free encyclopedia Russian-French artist (1887\u20131985) \"Chagall\" redirects here. For other uses, see Chagall (disambiguation) . Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 820 [-0.13631284, 0.40063256, -0.5300299, -0.1814317, -0.45316994, -0.12492252, 0.7796175, -0.24712454, 0.12325861, -0.22153562, 0.28455302, -0.43702734, 0.2315685, 0.14490259, -0.10851226, -0.28869808, 0.2181759, 0.7690574, -0.3198973, -0.4431276, 0.059898343, -0.08027286, 0.12561797, 0.20749918, -0.04779523, 0.24811892, 0.31219947, -0.08558024, -0.22011814, 0.35220224, 0.58977956, 0.07881065, 0.19522737, -0.14123651, 0.35313025, 0.248419, -0.13180904, 0.2722456, 0.28210595, 0.13397658, 0.10607683, -0.09232128, 0.09185548, 0.18311344, 0.12448602, -0.05098941, -0.17604476, 0.0156472, -0.05244754, -0.24283394, -0.42616746, -0.45576864, -0.35508007, -0.43146527, 0.30693352, -0.9420444, -0.1502328, 0.73327005, 0.0008648187, -0.3663265, -0.5619301, 0.21601504, -0.6227497, 0.43365508, -0.28584424, -0.33551326, -0.044290617, 0.34401017, -0.20072122, 0.051950324, -0.14124426, -0.12208992, 0.17209947, 0.24971412, -0.1148842, -0.3685053, 0.25038457, 0.22488211, -0.23860529, 0.014345817, 0.13038483, -0.0057234727, -0.030419111, -0.29217714, 0.23628002, -0.07539792, -0.011316142, -0.091147415, 0.65404445, -0.946898, 0.5174334, 0.2996515, 0.23870116, -0.06947715, 0.5011023, -0.08394453, 0.15647276, -0.33553213, 0.08633526, -0.110680446, ...] [0.1057676, 0.0062544323, -0.15221544, 0.04325761, 0.28336293, -0.017216768, 0.048432082, 0.1808229, -0.38419783, 0.19428873, -0.39346892, 0.17034043, -0.29696208, 0.009378382, -0.07561139, 0.09139135, -0.21508342, -0.0029430964, -0.23163824, -0.2664363, 0.4376443, -0.09557652, 0.04956022, 0.103210896, -0.4440291, 0.08880372, 0.31638646, 0.24560799, 0.31070632, -0.49791464, -0.100729, -0.3882165, -0.10992692, -0.48551548, 0.018072378, -0.23383588, -0.12965874, -0.24974701, 0.38025245, 0.019615663, 0.16431865, -0.00538222, 0.051134985, 0.2856798, 0.07000261, 0.038179483, 0.03501985, -0.1147098, -0.4450423, -0.056286532, 0.597169, -0.09969436, -0.023413226, 0.032318566, 0.6703518, 0.15605299, 0.4311115, -0.081972905, -0.27741322, -0.10294576, 0.1682104, 0.33112246, 0.1849161, 0.28806272, -0.14098074, -0.031310245, 0.33622852, 0.06441235, 0.0155333, -0.0046832673, 0.09588136, 0.037220176, 0.10615923, 0.109762475, -0.3969684, -0.34277406, -0.27425286, 0.0847348, -0.04741776, 0.6563584, -0.7586578, -0.121303834, -0.36402106, -0.3813307, -0.39979726, -0.6459364, -0.086031534, -0.22102852, -0.10326333, -0.05784658, -0.032789968, 0.15000445, -0.9866645, -0.15627542, 0.309217, 0.5299875, -0.4503073, 0.08764865, 0.01843783, -0.012726565, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              2 Marc Chagall Chagall, c. 1920 Born Moishe Shagal ( 1887-07-06 ) 6 July 1887 (N.S.) Liozna , Vitebsk Governorate , Russian Empire (now Belarus) [1] Died 28 March 1985 (1985-03-28) (aged\u00a097) Saint-Paul-de-Vence , France Nationality Russian, later French [2] Known\u00a0for Painting stained glass Notable work See list of artworks by Marc Chagall Movement Cubism Expressionism School of Paris Spouses Bella Rosenfeld \u200b \u200b ( m. 1915; died\u00a01944) \u200b Valentina (Vava) Brodsky \u200b \u200b ( m. 1952) \u200b [3] Children 2 [4] Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1015 [6.522564e-05, 0.3301981, -0.3143772, 0.16797635, -0.12290393, 0.39934808, 0.3245805, -0.08697315, 0.12718417, -0.28854358, -0.29178268, -0.04188224, 0.18196607, 0.03411273, -0.24060719, 0.19282629, 0.011269633, 0.024814256, 0.07479516, -0.07968499, 0.16191289, 0.037563384, 0.098760605, 0.050052628, 0.19700313, -0.32870954, -0.04666899, -0.19853556, 0.020406839, -0.017759824, 0.15382415, 0.026588809, -0.31854808, 0.18437642, 0.0780596, -0.006167789, -0.239117, -0.016325358, 0.17077415, 0.2676591, 0.06001705, 0.14007872, -0.11668334, 0.087685406, 0.22242263, -0.041542508, 0.26146287, 0.031148747, -0.14149372, 0.12049799, -0.43130723, -0.28403637, 0.14311233, -0.251949, 0.19505084, -0.44784555, -0.09609296, -0.06251999, 0.11826225, -0.23685348, -0.1504384, -0.0967748, -0.09041497, -0.032261744, -0.27373862, 0.12859926, 0.06771181, -0.13807008, 0.30915943, -0.09036252, 0.204465, 9.6525066e-05, -0.2891725, 0.01944619, -0.24057072, -0.14107522, -0.14687195, 0.0878318, -0.40227222, -0.31160486, 0.17885417, 0.03342853, 0.16870755, 0.27444363, 0.10657356, 0.0354847, -0.051980913, 0.09805398, -0.028410489, 0.0066139186, 0.22335179, 0.29214042, -0.05236114, 0.04557202, 0.10190335, 0.15689607, 0.1292069, 0.11611345, 0.13840644, -0.17613539, ...] [0.3011226, -0.2156774, -0.18620874, -0.097714715, 0.27349457, 0.15388457, 0.10835097, 0.48285672, -0.028905967, 0.10257571, -0.24441983, 0.10036812, -0.11257642, -0.03324636, -0.046729285, -0.12508303, 0.033100475, -0.12861459, -0.39120606, -0.2926456, 0.48093566, 0.20298225, -0.24013846, 0.08975806, -0.008845502, -0.03322119, 0.044863984, 0.30186296, 0.383894, -0.68360853, -0.17460679, -0.10091784, -0.047647465, -0.39354658, -0.05361432, -0.41126314, -0.2109783, -0.4203271, 0.70855486, -0.034173097, 0.10004106, 0.04333917, -0.016357098, 0.3516914, 0.29917046, 0.08771612, -0.212761, -0.0054452955, -0.6625504, 0.0054530823, 0.36224726, -0.055883072, -0.14412339, -0.11464742, 0.8230198, 0.16299798, 0.4972762, -0.16277294, -0.20177282, 0.031703673, 0.21911396, 0.20055035, 0.2812788, 0.4765843, -0.0058746003, 0.09306556, 0.12512334, 0.101830766, 0.049821388, 0.13005173, 0.12684424, -0.14724085, 0.13363561, 0.023524826, -0.21775843, -0.092807844, -0.28592405, 0.18538119, -0.1398458, 0.5198542, -0.71723145, -0.15925738, -0.69605404, -0.1763533, -0.5816644, -0.43334, -0.11624497, -0.3794567, -0.11552952, 0.16452907, -0.38990703, 0.07160495, -0.5571297, -0.18772312, 0.33600584, 0.48813468, -0.55913854, 0.030640667, -0.09757781, -0.17804016, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              3 Marc Chagall [a] (born Moishe Shagal ; 6 July\u00a0[ O.S. 24 June]\u00a01887 \u2013 28 March 1985) was a Russian-French artist. [b] An early modernist , he was associated with the \u00c9cole de Paris as well as several major artistic styles and created works in a wide range of artistic formats, including painting, drawings, book illustrations, stained glass , stage sets, ceramics, tapestries and fine art prints. Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1029 [0.06070805, 0.15527852, -0.18933792, 0.16767861, -0.08854663, 0.17130667, 0.15084991, -0.043867458, 0.15022095, -0.47134015, -0.28864858, -0.1717324, -0.047000885, 0.02663383, -0.06628912, 0.16065466, 0.11814167, 0.1318022, -0.004020229, -0.14932011, 0.17918754, 0.21494931, 0.09146318, 0.03896226, 0.038501557, -0.25235483, 0.27075002, -0.25661975, 0.13307256, -0.39810264, 0.21422918, 0.07985368, -0.28083143, -0.009454845, -0.007048361, 0.05220409, -0.21773991, -0.021139868, 0.11031076, 0.26661932, 0.21084821, 0.3218298, -0.0955615, 0.07259323, 0.121312276, -0.104517035, -0.010188625, -0.03756207, -0.2270827, 0.14353356, -0.37686616, -0.17414221, 0.2161481, -0.45889547, 0.07239764, -0.4019921, 0.070493914, 0.026767494, 0.15950088, -0.24915558, -0.095962785, -0.075519465, 0.19581796, -0.035721052, -0.10169228, -0.08450497, -0.09172762, -0.07791163, 0.1265816, -0.039653525, 0.027229706, 0.08718767, 0.037420932, -0.031369347, 0.021826323, -0.501008, -0.18308266, 0.24249066, -0.3046359, -0.16277763, 0.3999882, -0.16028918, 0.03417186, 0.20159683, 0.084876485, 0.06755653, -0.050601076, 0.14891143, -0.025254818, -0.0067676683, 0.121552296, 0.16791332, -0.24602461, 0.080474354, -0.012239305, 0.09207294, 0.019633103, 0.24711512, 0.19672464, -0.0031051936, ...] [0.31319126, -0.15600286, -0.14035642, -0.061735503, 0.42363098, 0.07034164, 0.22905838, 0.76764846, -0.11780287, 0.11308678, -0.18308264, 0.20165133, -0.21681958, 0.041389115, -0.020285675, -0.095778085, -0.11146578, -0.0048569557, -0.3950689, -0.18178527, 0.41950327, 0.13025202, -0.07337729, 0.017768612, -0.26477337, 0.031201389, 0.048829198, 0.24986044, 0.32550985, -0.6700019, -0.1336867, -0.16846487, -0.112991005, -0.4880412, 0.05993593, -0.28848144, -0.14705999, -0.20621166, 0.64667296, -0.07773719, 0.025872353, 0.11426919, 0.07911643, 0.36857548, 0.2532209, 0.04325579, -0.1869061, 0.032137435, -0.5694604, 0.0041371225, 0.57058173, -0.1175132, -0.06906905, -0.16005878, 0.81132764, 0.29465726, 0.5470754, 0.12774988, -0.23945878, 0.12890285, 0.1177969, 0.17128779, 0.19173001, 0.34948987, 0.059351686, -0.005991122, 0.21449554, 0.17856842, -0.0017774818, -0.026938353, 0.20174557, 0.014691077, 0.15926161, 0.11113222, -0.23153375, -0.12869662, -0.41356885, 0.25905994, -0.1265608, 0.545127, -0.5852858, -0.18912847, -0.5723396, -0.12212733, -0.48440826, -0.5028278, -0.12991217, -0.23104773, -0.28743362, 0.11462366, -0.27056342, 0.023289265, -0.9101885, -0.013462952, 0.33331674, 0.4455748, -0.60207695, 0.092579246, -0.08192379, -0.075280085, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              4 Chagall was born in 1887, into a Jewish family near Vitebsk , today in Belarus , but at that time in the Pale of Settlement of the Russian Empire. Before World War I , he travelled between Saint Petersburg , Paris , and Berlin . During that period, he created his own mixture and style of modern art, based on his ideas of Eastern European and Jewish folklore. He spent the wartime years in his native Belarus, becoming one of the country's most distinguished artists and a member of the modernist avant-garde , founding the Vitebsk Arts College . He later worked in and near Moscow in difficult conditions during hard times in Russia following the Bolshevik Revolution , before leaving again for Paris in 1923. During World War II , he escaped occupied France to the United States, where he lived in New York City for seven years before returning to France in 1948. Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1030 [0.0128892455, 0.24784817, -0.69244295, 0.14261207, -0.37902343, 0.2535848, 0.25536233, -0.1260472, 0.11600019, -0.3464545, -0.42178217, 0.019877443, 0.21520871, -0.064955525, -0.15178007, 0.111605585, -0.15971033, 0.06491924, -0.0047338717, -0.33831462, -0.27981135, -0.1912081, 0.3114936, -0.0973105, 0.4178841, -0.36130285, 0.12893893, -0.11600203, -0.04178404, -0.107951045, 0.29499668, -0.13806331, -0.1439333, -0.008052505, 0.016671654, 0.17721397, -0.03954921, -0.10124822, 0.078565754, 0.16309279, 0.18659112, 0.2518265, -0.08688408, 0.084962115, 0.09951477, 0.3049577, 0.17764315, 0.14045668, -0.1822896, 0.042524207, -0.23616269, -0.22173883, 0.122920595, -0.21659338, 0.20440876, -0.26627278, -0.028624993, 0.20077911, 0.17120835, -0.4313025, -0.08327553, -0.26314813, 0.20102102, 0.05320874, -0.23124717, 0.05352086, -0.14058796, -0.009598337, 0.2552902, 0.073672205, 0.10801302, 0.21220188, -0.31999534, -0.011201458, -0.10513596, -0.5790532, -0.09553765, 0.008409211, -0.23266526, -0.08355545, 0.32477874, 0.22916724, 0.07943106, 0.3186044, 0.08367233, 0.026719442, -0.014187944, 0.19423041, 0.059627447, -0.00676677, 0.5294448, -0.035245754, 0.058794532, -0.063930504, 0.008244244, 0.19260897, 0.016116053, 0.35155174, 0.19266352, -0.24429816, ...] [0.32602394, 0.06719909, -0.06100519, -0.045613024, 0.24230722, 0.22669841, 0.035890818, 0.25091717, -0.106638625, 0.25306165, -0.19362232, 0.10521984, -0.2475099, -0.022878671, -0.0107632885, -0.23732522, 0.020200137, 0.059316758, -0.4728337, -0.07102783, 0.41458505, 0.058557797, -0.16911782, 0.039997082, -0.23728715, 0.15409663, 0.160289, 0.42120323, 0.2691471, -0.8232833, 0.020972928, -0.095549926, -0.050507788, -0.404678, -0.10258126, -0.31561896, -0.14072834, -0.4551571, 0.68523854, 0.015878063, 0.21748383, 0.117160976, 0.08289802, 0.3930931, 0.388737, -0.071497805, -0.2002504, -0.15203948, -0.7935041, 0.13830723, 0.18156926, -0.12217403, -0.04690205, -0.00423636, 0.75748444, 0.006197732, 0.36204273, 0.10186491, -0.04447285, 0.029974189, 0.15678468, 0.19892249, 0.06683635, 0.5635893, -0.1328392, 0.16568466, 0.16773961, 0.056257185, 0.0010504196, 0.15627411, 0.27494088, -0.16978794, 0.07080776, -0.03420698, -0.037819527, -0.032614995, -0.35324183, -0.019239955, -0.03625897, 0.4436802, -0.54978424, -0.17079026, -0.58789665, -0.14337249, -0.56499934, -0.255707, -0.0671485, -0.232824, -0.0035444845, 0.25267586, -0.2822092, -0.14999087, -0.7506612, -0.059534136, 0.23797119, 0.38653395, -0.489862, 0.0012845984, -0.1037923, -0.20454405, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              5 Art critic Robert Hughes referred to Chagall as \"the quintessential Jewish artist of the twentieth century\". According to art historian Michael J. Lewis, Chagall was considered to be \"the last survivor of the first generation of European modernists\". For decades, he \"had also been respected as the world's pre-eminent Jewish artist\". [15] Using the medium of stained glass, he produced windows for the cathedrals of Reims and Metz as well as the Fraum\u00fcnster in Z\u00fcrich , windows for the UN and the Art Institute of Chicago and the Jerusalem Windows in Israel. He also did large-scale paintings, including part of the ceiling of the Paris Op\u00e9ra . He experienced modernism's \"golden age\" in Paris, where \"he synthesized the art forms of Cubism , Symbolism , and Fauvism , and the influence of Fauvism gave rise to Surrealism \". Yet throughout these phases of his style \"he remained most emphatically a Jewish artist, whose work was one long dreamy reverie of life in his native village of Vitebsk.\" [16] \"When Matisse dies\", Pablo Picasso remarked in the 1950s, \"Chagall will be the only painter left who understands what colour really is\". [17] Marc Chagall - Wikipedia {'1': 'Marc Chagall'} 1031 [-0.17184898, 0.34802842, -0.30670404, 0.033759408, -0.071207985, 0.11081599, -0.015894389, -0.13356604, -0.033708274, -0.2419455, -0.44456816, 0.059292305, 0.020918045, 0.14204666, -0.2409869, 0.27005798, -0.258923, 0.04510152, 0.05378626, 0.11298122, -0.08186172, 0.07691838, 0.3056298, -0.12195048, 0.3086163, -0.20567966, 0.19921307, -0.1286054, -0.14399256, -0.060565867, 0.09843995, -0.10340752, -0.26555908, -0.02704654, 0.07048167, 0.07951167, -0.06800339, 0.0012839548, 0.23670593, 0.16051252, 0.08615856, 0.30511206, -0.027099025, -0.17317602, 0.014067257, -0.015782744, 0.12305315, 0.05461802, -0.2078941, 0.11169619, -0.2432939, -0.17174804, 0.31153297, -0.47722512, 0.08077113, -0.31602716, -0.108076334, -0.06080752, -0.1282652, -0.4711492, -0.11467485, -0.38747922, -0.18139087, 0.17687619, -0.033176757, -0.10800495, -0.11308053, -0.1960685, -0.022167394, 0.08167149, 0.077876285, 0.04912957, 0.019410271, 0.077514365, 0.11992882, -0.2732598, -0.07606393, -0.012376104, -0.3093404, -0.05539541, 0.49092746, 0.05449142, 0.13599758, 0.29677796, 0.19566807, -0.027227543, -0.10856438, 0.03995211, -0.068166524, 0.1435353, 0.1098422, 0.08890329, 0.12124741, 0.23209855, 0.18221277, 0.22661185, -0.053041387, 0.17716637, -0.0038239658, -0.22502863, ...] [0.37371925, 0.03151837, -0.31062487, -0.09309676, 0.24152185, 0.2640074, -0.16518643, 0.3013373, -0.08091057, 0.14807643, -0.15886074, 0.14782077, -0.19089276, -0.27328405, 0.027997328, -0.08933218, -0.13361079, -0.01152586, -0.5003744, -0.2961677, 0.431456, 0.18745942, -0.19747779, 0.17880753, -0.4759462, 0.07138324, 0.33363977, 0.2838847, 0.3027296, -0.7221533, -0.13787822, -0.029896423, -0.13562883, -0.4057622, -0.09930523, -0.34826514, -0.2795905, -0.4380798, 0.6397605, 0.1468478, 0.23343584, 0.14553778, 0.07168361, 0.534304, 0.036503725, 0.011418536, -0.14454591, -0.3075633, -0.55896217, 0.1726013, 0.34423155, -0.15806583, -0.060707152, -0.120756015, 0.4749407, -0.09361609, 0.40806028, 0.03153467, -0.051488817, 0.021138424, 0.12258547, 0.36774185, -0.17544572, 0.6622069, 0.05092006, 0.10766147, 0.24184965, 0.20567547, 0.09901831, 0.010521612, 0.26210088, -0.03179143, 0.09848223, 0.1255105, -0.20656292, -0.17304166, -0.37142593, 0.16360296, -0.27655533, 0.5082094, -0.4015829, -0.1379068, -0.3190048, -0.040413547, -0.5774243, -0.2768363, -0.0019161727, -0.22578098, -0.17014019, 0.17284057, -0.005205049, -0.21579203, -0.9814011, 0.037708007, 0.08085885, 0.4232795, -0.5028252, 0.038659435, -0.14375539, -0.16322358, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              6 Early life and education [ edit ] Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]'} 1034 [-0.21258691, 0.4176262, 0.09400387, 0.13499916, -0.06885163, 0.26491654, -0.12511143, 0.28833574, 0.045800235, 0.2216897, 0.29161084, -0.3145675, -0.3136699, 0.11542577, 0.088318996, 0.056974318, 0.24027617, -0.2518334, -0.12356259, -0.5461291, -0.09656436, 0.0660869, 0.25659192, -0.052964687, 0.4823795, 0.32737744, 0.08615878, -0.07120575, 0.12762071, 0.42564505, 0.027730001, -0.4147855, 0.5348888, -0.4519836, -0.47164494, 0.3165918, 0.8776633, 0.042705856, -0.25590718, 0.044346843, -0.1453554, 0.2864723, -0.11327129, 0.19460052, 0.05073861, -0.1581568, 0.25129315, -0.2220518, -0.09832471, -0.12678038, -0.56669307, -0.12103857, 0.034594495, -0.35877645, 0.19099647, 0.3224834, -0.06600293, 0.42566475, -0.23869184, 0.06701737, -0.8374608, -0.2657261, -0.009735512, 0.7078457, -0.07748316, 0.27188885, -0.069167905, 0.44513574, 0.19136126, -0.33502173, -0.15556453, -0.2711283, 0.11840362, 0.36182863, -0.33293834, -0.13883986, 0.04020123, 0.3350144, 0.11592446, -0.7934551, 0.21795008, 0.23457977, -0.096499816, 0.24245007, -0.2910437, 0.41454434, -0.48009574, 0.29933107, -0.14576524, -0.29110992, 0.6442532, -0.46670663, -0.48874173, 0.3536403, 0.6117833, 0.20668012, -0.55355805, -0.32985818, -0.13371414, -0.22560586, ...] [-0.11143046, -0.31773415, 0.043277875, 0.032854605, 0.041523784, -0.531343, 0.4581098, -0.36068654, 0.05469556, -0.34285137, 0.31704423, -0.19573347, -0.027915685, -0.3926606, -0.026370991, 0.019747546, -0.39866057, -0.07020932, -0.269622, 0.5109483, 0.3238058, 0.058651082, 0.09770398, -0.007524238, -0.27222162, 0.41854808, 0.28565323, -0.07448105, -0.23930642, -0.14176723, 0.20248109, -0.009274222, 0.4374301, -0.09010333, -0.5735016, -0.35785222, -0.35996753, 0.043062318, -0.035681196, -0.37566757, -0.046269998, 0.13364804, -0.04924696, -0.14865233, -0.1510968, -0.147207, 0.31307146, -0.19545984, 0.40953165, -0.0045738267, 0.43586582, -0.1712141, 0.027290681, -0.005267555, -0.027318347, -0.30504042, 0.03360922, 0.4287188, 0.24126026, -0.08407592, 0.21431646, -0.42532778, -0.28839064, -0.27269655, -0.36684483, -0.38856545, -0.27411014, 0.44622186, -0.12703063, -0.32499504, -0.053103853, -0.14677355, 0.047116496, -0.060834296, 0.036223806, -0.17463541, 0.15566193, -0.10230187, -0.11055426, 0.052486245, -0.41645798, 0.06511554, 0.012356553, 1.1083243, -0.12187732, 0.15824668, 0.26677486, -0.3387624, 0.29505304, 0.23318477, 0.38895237, -0.49044862, -1.3143318, 0.06858259, 0.12922588, -0.17053953, -0.17255576, 0.51328933, -0.2526153, -0.19256751, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              7 Early life [ edit ] Marc Chagall's childhood home in Vitebsk , Belarus. Currently site of the Marc Chagall Museum . Marc Chagall, 1912, The Spoonful of Milk (La Cuiller\u00e9e de lait) , gouache on paper Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1035 [-0.04040356, 0.1428114, -0.3568075, 0.4118173, -0.3306093, 0.20134652, 0.15904717, 0.16806918, 0.23450547, -0.17853792, 0.076216966, -0.23785768, 0.047059473, 0.07234816, -0.5144093, 0.005939083, 0.117637105, 0.16320863, 0.20046334, -0.3107882, 0.033090994, -0.03074776, 0.26112193, -0.040257204, 0.3391727, 0.008225184, -0.21099368, -0.19426711, -0.17069328, -0.15220764, 0.06614047, -0.29302463, -0.16281903, -0.21634795, 0.05071195, 0.36889896, 0.21099831, -0.28517646, 0.04653233, 0.10108535, 0.17541891, 0.27149782, -0.02460022, 0.1368224, -0.07306952, 0.16629842, 0.33900672, -0.022616621, -0.12385281, 0.083199985, -0.6044519, -0.30993265, 0.21716246, -0.29389507, 0.16422017, -0.25379428, 0.05963148, 0.0020765075, 0.30152452, -0.13549928, -0.07433212, -0.21543212, 0.08626247, 0.08691753, -0.2776835, 0.20129634, -0.25110525, 0.100580364, 0.20634231, -0.049445163, -0.030263156, -0.07400863, -0.21622534, -0.06387952, -0.32896677, -0.5073129, -0.18882522, 0.07538755, -0.36687744, -0.12156583, 0.01760108, -0.0004210472, 0.0061056875, 0.0038018655, -0.29164806, 0.097530246, 0.030996598, 0.15973964, -0.16489528, -0.043514237, 0.6987028, 0.054011725, -0.016611572, 0.06936292, 0.029853428, -0.17610961, -0.43028662, 0.23585631, 0.5384827, -0.30086926, ...] [-0.210673, 0.18138997, -0.23682432, 0.15844706, 0.33680704, -0.14441374, 0.11554993, 0.8311512, -0.36302206, -0.17966586, -0.425243, 0.14120798, -0.10904902, 0.38845238, 0.14302602, -0.33268917, -0.3242419, -0.060191587, -0.23298804, 0.4607875, 0.3490125, 0.135974, -0.43231127, 0.24163985, 0.07982512, 0.04012438, 0.19880763, -0.030124964, 0.38552287, -0.74926776, -0.1301989, -0.0036398687, 0.11289925, -0.0040487926, -0.6842449, -0.24232888, 0.053718906, -0.29459298, 0.52784234, -0.098981835, -0.14561209, 0.025891975, 0.02271077, 0.13442594, -0.03602789, -0.10110418, 0.2045612, 0.002350556, -0.20882945, -0.007938698, 0.6606014, 0.10962636, -0.2855616, -0.267743, 0.6412763, 0.14560418, 0.35472426, 0.07986979, -0.49003777, 0.020767277, -0.16763909, -0.1999081, 0.0809428, -0.124888316, -0.14339203, -0.17905968, 0.06621106, 0.33662787, 0.057263806, 0.39783168, -0.017675802, -0.0054885997, 0.26443145, -0.062753014, -0.026210291, 0.28899968, 0.08764831, -0.009885388, -0.24724981, 0.3080224, -0.44759637, -0.062987834, -0.66064507, -0.20012948, -0.16598372, -0.30995867, -0.11357908, -0.40124506, 0.023973173, -0.0061915447, -0.17440954, 0.015802316, -0.44506985, 0.11005817, 0.61295646, 0.23613611, -0.6085141, 0.16766347, 0.021511542, -0.11083661, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              8 Marc Chagall was born Moishe Shagal in 1887, into a Jewish family in Liozna , [1] near the city of Vitebsk , Belarus, then part of the Russian Empire . [c] [18] At the time of his birth, Vitebsk's population was about 66,000. Half of the population was Jewish. [16] A picturesque city of churches and synagogues, it was called \"Russian Toledo \" by artist Ilya Repin , after the cosmopolitan city of the former Spanish Empire . [19] Because the city was built mostly of wood, little of it survived years of occupation and destruction during World War II. Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1038 [0.12289606, 0.19771104, -0.4960996, 0.1543681, -0.3683882, 0.078079656, 0.35305032, -0.059554525, 0.17041694, -0.099932164, -0.12581137, -0.14822446, 0.19600686, -0.04903745, -0.22496164, -0.11782656, -0.029683992, -0.15135884, -0.076080725, -0.13164555, -0.15614805, -0.12813674, 0.26295248, -0.050093956, 0.50816905, -0.37993717, 0.21430773, 0.01743046, -0.11382128, -0.003190495, 0.13804078, 0.04282849, 0.10256396, -0.037603594, 0.05948203, 0.01725334, 0.10230865, -0.17457329, -0.08156793, -0.0302542, 0.009354106, 0.3099228, -0.18747087, 0.15136, -0.076821536, 0.07280405, 0.03946651, 0.16246979, -0.046938375, -0.057767846, -0.28829074, -0.07179851, 0.11064647, 0.08096674, 0.31416374, -0.3115592, -0.20154516, -0.03271052, 0.22301677, -0.018219791, 0.00829201, -0.14288118, 0.14590019, 0.14642465, -0.21697524, 0.11366688, 0.041973874, -0.2781005, 0.059859417, -0.14236784, 0.11666666, 0.023176208, -0.15179303, 0.19413684, -0.19074053, -0.45537853, -0.10794468, 0.17236876, -0.31921896, -0.10242913, 0.15102842, 0.09995368, 0.13968742, 0.23945273, -0.14752795, 0.088864125, -0.2850201, 0.08255999, 0.021981336, 0.10126796, 0.41831368, 0.18025145, 0.1445052, -0.15728247, -0.08622718, -0.16223404, -0.16473392, 0.16730444, 0.024511546, -0.3002488, ...] [0.27152574, -0.1369829, -0.2572192, -0.086759746, 0.429697, 0.17921205, 0.22596486, 0.7416712, -0.19865568, 0.023573557, -0.12882225, 0.11156612, -0.2901752, 0.07495567, -0.018234592, -0.18144433, -0.066046946, -0.08419848, -0.43689898, -0.20866461, 0.38949534, 0.05126732, -0.11438679, -0.1450496, -0.14231129, -0.035830297, 0.1723536, 0.31327474, 0.23830795, -0.8352426, -0.20216472, -0.15945674, -0.21852516, -0.3853225, 0.105123974, -0.23563793, -0.29354262, -0.30828527, 0.56360704, 0.093329474, 0.03198693, 0.06579364, -0.03080708, 0.30396387, 0.2300624, 0.044860683, -0.17087205, 0.16843213, -0.56279236, 0.052566424, 0.55612445, -0.1256122, -0.09115717, -0.1519382, 0.951732, 0.2665097, 0.47749025, 0.11504524, -0.19116502, 0.16940834, 0.17024885, 0.13633841, 0.32520735, 0.3592644, 0.010319109, -0.0650009, 0.19266447, 0.22522199, 0.02103563, 0.07234372, 0.23579496, 0.019804537, 0.16501735, 0.11221655, -0.20417805, -0.12707315, -0.30592152, 0.15413566, -0.07973581, 0.6260962, -0.697242, -0.30985516, -0.67288524, -0.18736573, -0.47875684, -0.38787085, -0.13616191, -0.3647515, -0.25538492, 0.08159779, -0.23162013, 0.021403145, -0.9363651, -0.11674578, 0.32556042, 0.42079842, -0.6266709, -0.002921365, -0.11793257, -0.13511086, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51              9 Chagall was the eldest of nine children. The family name, Shagal, is a variant of the name Segal , which in a Jewish community was usually borne by a Levitic family. [20] His father, Khatskl (Zachar) Shagal, was employed by a herring merchant, and his mother, Feige-Ite, sold groceries from their home. His father worked hard, carrying heavy barrels, earning 20 roubles each month (the average wages across the Russian Empire was 13 roubles a month). Chagall wrote of those early years: Marc Chagall - Wikipedia {'1': 'Marc Chagall', '2': 'Early life and education[edit]', '3': 'Early life[edit]'} 1039 [-0.19016075, 0.26621026, -0.4000805, 0.12919345, -0.4931459, 0.06254336, 0.45248395, -0.1977006, 0.3565962, -0.39628682, 0.07525156, -0.034594715, 0.10077585, -5.7241956e-05, -0.043138966, 0.21718857, -0.18270227, 0.023722649, -0.081377886, -0.21935272, 0.23643921, -0.18530127, 0.1901281, -0.13759938, 0.29683125, -0.0026680955, 0.2592335, -0.04560351, 0.07434845, -0.15570931, -0.05742963, 0.024905616, 0.15878378, -0.06530647, 0.067106195, 0.13660598, 0.13979806, -0.26153928, 0.15460384, 0.17037612, 0.31496724, 0.18973124, 0.053521287, -0.04389476, -0.42555642, 0.003822187, 0.1896462, -0.10599318, -0.019261891, 0.14236797, -0.77524954, -0.119407795, 0.32596982, -0.13587342, 0.4652508, -0.28711128, 0.08861769, -0.1649932, 0.15993862, -0.25447288, -0.45596832, -0.20720182, 0.079662554, -0.01065364, -0.045571662, -0.19634883, -0.2437223, -0.34079143, 0.14983986, 0.02576656, -0.1296941, 0.14368063, 0.0725072, 0.2978799, -0.4660587, -0.38848284, -0.1626155, 0.14219202, -0.3443891, -0.111245655, -0.31215024, -0.19792813, 0.09765518, 0.2621157, -0.18964118, 0.18680173, -0.15452711, 0.0019693843, -0.058514643, 0.16725062, 0.28203845, 0.13750376, 0.23745152, -0.045294583, 0.07589778, -0.058000974, 0.08730718, 0.021642083, -0.22950399, -0.063035026, ...] [0.18217696, -0.07319681, -0.19468287, -0.14967452, 0.27654347, 0.24555704, 0.05126876, 0.3458876, -0.06652753, 0.2043159, -0.16331376, 0.26935345, -0.115424, 0.009640329, 0.06073638, -0.22838138, -0.114357814, -0.0025007494, -0.38089812, -0.29333565, 0.5265535, 0.14625098, -0.32505035, 0.017311122, -0.3003168, 0.19884075, 0.2790358, 0.46846694, 0.39547193, -0.8351187, 0.07834771, -0.05997751, -0.12875348, -0.43705013, -0.1417268, -0.3920743, -0.11775686, -0.43573558, 0.7732148, -0.0426617, 0.19813055, 0.046420064, 0.044523027, 0.24076839, 0.23203422, 0.057001054, -0.26807722, -0.15271592, -0.85366005, 0.18620999, 0.14610378, -0.15371734, -0.124217376, -0.04489507, 0.7183984, -0.009792681, 0.3381448, 0.09696338, -0.12863068, 0.02527903, 0.1270362, 0.25671452, 0.09690881, 0.39807048, -0.17849997, 0.040076688, 0.15242404, 0.25959423, -0.020205554, 0.047548268, 0.33762828, -0.067527615, -0.0181464, -0.011285335, -0.1420477, -0.07502618, -0.37610707, 0.11125746, -0.11869619, 0.44446793, -0.5647877, -0.07456134, -0.5185316, -0.15623266, -0.5624695, -0.32528475, 0.018042117, -0.16166878, -0.06880975, 0.18100321, 0.009667874, -0.29734442, -0.9413163, -0.11885204, 0.19610603, 0.22029462, -0.55619127, -0.15192266, -0.1244191, 0.09338635, ...]                  /Users/asiegel/.pixeltable/file_cache/26f958802a424414b408646538f72715_0_3c5b8031c7610e17a42ab6df79e614c2ee1a85dbd022497373d574cf65e15c51"},{"location":"tutorials/rag-operations/#rag-operations-in-pixeltable","title":"RAG Operations in Pixeltable\u00b6","text":"<p>In this tutorial, we'll explore Pixeltable's flexible handling of RAG operations on unstructured text. In a traditional AI workflow, such operations might be implemented as a Python script that runs on a periodic schedule or in response to certain events. In Pixeltable, as with everything else, they are implemented as persistent table operations that update incrementally as new data becomes available. In our tutorial workflow, we'll chunk Wikipedia articles in various ways with a document splitter, then apply several kinds of embeddings to the chunks.</p>"},{"location":"tutorials/rag-operations/#set-up-the-table-structure","title":"Set Up the Table Structure\u00b6","text":"<p>We start by installing the necessary dependencies, creating a Pixeltable directory <code>rag_ops_demo</code> (if it doesn't already exist), and setting up the table structure for our new workflow.</p>"},{"location":"tutorials/rag-operations/#creating-tables-and-views","title":"Creating Tables and Views\u00b6","text":"<p>Now we'll create the tables that represent our workflow, starting with a table to hold references to source documents. The table contains a single column <code>source_doc</code> whose elements have type <code>pxt.DocumentType</code>, representing a general document instance. In this tutorial, we'll be working with HTML documents, but Pixeltable supports a range of other document types, such as Markdown and PDF.</p>"},{"location":"tutorials/rag-operations/#data-ingestion","title":"Data Ingestion\u00b6","text":""},{"location":"tutorials/rag-operations/#experimenting-with-chunking","title":"Experimenting with Chunking\u00b6","text":""},{"location":"tutorials/rag-operations/#further-experiments","title":"Further Experiments\u00b6","text":"<p>This is a good time to mention another important guiding principle of Pixeltable. The preceding examples all used the built-in <code>DocumentSplitter</code> class with various configurations. That's probably fine as a first cut or to prototype an application quickly, and it might be sufficient for some applications. But other applications might want to do more sophisticated kinds of chunking, implementing their own specialized logic or leveraging third-party tools. Pixeltable imposes no constraints on the AI or RAG operations a workflow uses: the iterator interface is highly general, and it's easy to implement new operations or adapt existing code or third-party tools into the Pixeltable workflow.</p>"},{"location":"tutorials/rag-operations/#computing-embeddings","title":"Computing Embeddings\u00b6","text":""},{"location":"tutorials/working-with-fireworks/","title":"Working with Fireworks AI in Pixeltable","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q pixeltable fireworks-ai\n</pre> %pip install -q pixeltable fireworks-ai In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\npxt.create_dir('fireworks_demo', ignore_errors=True)\n</pre> import pixeltable as pxt  pxt.create_dir('fireworks_demo', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `fireworks_demo`.\n</pre> <p>Securely store your Fireworks API key by not hardcoding it into the notebook.</p> In\u00a0[2]: Copied! <pre>import os\nimport getpass\n\nif 'FIREWORKS_API_KEY' not in os.environ:\n    os.environ['FIREWORKS_API_KEY'] = getpass.getpass('Fireworks API Key:')\n</pre> import os import getpass  if 'FIREWORKS_API_KEY' not in os.environ:     os.environ['FIREWORKS_API_KEY'] = getpass.getpass('Fireworks API Key:') In\u00a0[3]: Copied! <pre>from pixeltable.functions.fireworks import chat_completions\n\n# Create a table in Pixeltable and pick a model hosted on Fireworks with some parameters\n\nt = pxt.create_table('fireworks_demo.chat', {'input': pxt.StringType()})\n\nmessages = [{'role': 'user', 'content': t.input}]\nt['output'] = chat_completions(\n    messages=messages,\n    model='accounts/fireworks/models/llama-v2-7b-chat',\n    # These parameters are optional and can be used to tune model behavior:\n    max_tokens=300,\n    top_k=40,\n    top_p=0.9,\n    temperature=0.7\n)\n</pre> from pixeltable.functions.fireworks import chat_completions  # Create a table in Pixeltable and pick a model hosted on Fireworks with some parameters  t = pxt.create_table('fireworks_demo.chat', {'input': pxt.StringType()})  messages = [{'role': 'user', 'content': t.input}] t['output'] = chat_completions(     messages=messages,     model='accounts/fireworks/models/llama-v2-7b-chat',     # These parameters are optional and can be used to tune model behavior:     max_tokens=300,     top_k=40,     top_p=0.9,     temperature=0.7 ) <pre>Created table `chat`.\nAdded 0 column values with 0 errors.\n</pre> In\u00a0[4]: Copied! <pre># Parse the bot_response into a new column\nt['response'] = t.output.choices[0].message.content\n</pre> # Parse the bot_response into a new column t['response'] = t.output.choices[0].message.content <pre>Added 0 column values with 0 errors.\n</pre> In\u00a0[5]: Copied! <pre># Start a conversation\nt.insert(input=\"Can you tell me who's the President of the US?\")\nt.select(t.input, t.response).show()\n</pre> # Start a conversation t.insert(input=\"Can you tell me who's the President of the US?\") t.select(t.input, t.response).show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  3.49 cells/s]\nInserting rows into `chat`: 1 rows [00:00, 219.10 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  3.42 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[5]: input response Can you tell me who's the President of the US? Of course! I'm happy to help you with that! The current President of the United States is Joe Biden. I'm just an AI, I don't have personal opinions or beliefs, and I strive to provide accurate and unbiased information. Please let me know if you have any other questions!"},{"location":"tutorials/working-with-fireworks/#working-with-fireworks-ai-in-pixeltable","title":"Working with Fireworks AI in Pixeltable\u00b6","text":"<p>Pixeltable's Fireworks integration enables you to access advanced large language models (LLMs) hosted on the Fireworks platform.</p>"},{"location":"tutorials/working-with-fireworks/#prerequisites","title":"Prerequisites\u00b6","text":"<ul> <li>A Fireworks account with an API key (https://fireworks.ai/api-keys)</li> </ul>"},{"location":"tutorials/working-with-fireworks/#important-notes","title":"Important Notes\u00b6","text":"<ul> <li>Fireworks usage may incur costs based on your Fireworks plan.</li> <li>Be mindful of sensitive data and consider security measures when integrating with external services.</li> </ul>"},{"location":"tutorials/working-with-fireworks/#completions","title":"Completions\u00b6","text":"<p>Create a Table: In Pixeltable, create a table with columns to  represent your input data and the columns where you want to store the results from Fireworks.</p>"},{"location":"tutorials/working-with-fireworks/#learn-more","title":"Learn More\u00b6","text":"<p>To learn more about advanced techniques like RAG operations in Pixeltable, check out the RAG Operations in Pixeltable tutorial.</p> <p>If you have any questions, don't hesitate to reach out.</p>"},{"location":"tutorials/working-with-openai/","title":"Working with OpenAI in Pixeltable","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install -q pixeltable openai\n</pre> %pip install -q pixeltable openai In\u00a0[1]: Copied! <pre>import pixeltable as pxt\npxt.create_dir('demo', ignore_errors=True)\n</pre> import pixeltable as pxt pxt.create_dir('demo', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `demo`.\n</pre> In\u00a0[2]: Copied! <pre>pxt.drop_table('demo.openai', ignore_errors=True)\nt = pxt.create_table('demo.openai', {'id': pxt.IntType(), 'input': pxt.StringType()})\n</pre> pxt.drop_table('demo.openai', ignore_errors=True) t = pxt.create_table('demo.openai', {'id': pxt.IntType(), 'input': pxt.StringType()}) <pre>Created table `openai`.\n</pre> In\u00a0[3]: Copied! <pre># text from https://en.wikipedia.org/wiki/Global_financial_crisis_in_September_2008\n\nwikipedia_text = '''On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers.\nThe significance of the Lehman Brothers bankruptcy is disputed with some assigning it a pivotal role in the unfolding of subsequent events.\nThe principals involved, Ben Bernanke and Henry Paulson, dispute this view, citing a volume of toxic assets at Lehman which made a rescue impossible.[16][17] Immediately following the bankruptcy, JPMorgan Chase provided the broker dealer unit of Lehman Brothers with $138 billion to \"settle securities transactions with customers of Lehman and its clearance parties\" according to a statement made in a New York City Bankruptcy court filing.[18]\nThe same day, the sale of Merrill Lynch to Bank of America was announced.[19] The beginning of the week was marked by extreme instability in global stock markets, with dramatic drops in market values on Monday, September 15, and Wednesday, September 17.\nOn September 16, the large insurer American International Group (AIG), a significant participant in the credit default swaps markets, suffered a liquidity crisis following the downgrade of its credit rating.\nThe Federal Reserve, at AIG's request, and after AIG had shown that it could not find lenders willing to save it from insolvency, created a credit facility for up to US$85 billion in exchange for a 79.9% equity interest, and the right to suspend dividends to previously issued common and preferred stock.[20]'''\n\nsample_inputs = wikipedia_text.split('\\n')\n</pre> # text from https://en.wikipedia.org/wiki/Global_financial_crisis_in_September_2008  wikipedia_text = '''On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. The significance of the Lehman Brothers bankruptcy is disputed with some assigning it a pivotal role in the unfolding of subsequent events. The principals involved, Ben Bernanke and Henry Paulson, dispute this view, citing a volume of toxic assets at Lehman which made a rescue impossible.[16][17] Immediately following the bankruptcy, JPMorgan Chase provided the broker dealer unit of Lehman Brothers with $138 billion to \"settle securities transactions with customers of Lehman and its clearance parties\" according to a statement made in a New York City Bankruptcy court filing.[18] The same day, the sale of Merrill Lynch to Bank of America was announced.[19] The beginning of the week was marked by extreme instability in global stock markets, with dramatic drops in market values on Monday, September 15, and Wednesday, September 17. On September 16, the large insurer American International Group (AIG), a significant participant in the credit default swaps markets, suffered a liquidity crisis following the downgrade of its credit rating. The Federal Reserve, at AIG's request, and after AIG had shown that it could not find lenders willing to save it from insolvency, created a credit facility for up to US$85 billion in exchange for a 79.9% equity interest, and the right to suspend dividends to previously issued common and preferred stock.[20]'''  sample_inputs = wikipedia_text.split('\\n') In\u00a0[4]: Copied! <pre># Insert a single sample row into the table\nt.insert(id=0, input=sample_inputs[0])\nt.show()\n</pre> # Insert a single sample row into the table t.insert(id=0, input=sample_inputs[0]) t.show() <pre>Inserting rows into `openai`: 1 rows [00:00, 253.49 rows/s]\nInserted 1 row with 0 errors.\n</pre> Out[4]: id input 0 On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. In\u00a0[5]: Copied! <pre>prompt = \"For the following sentence, extract all company names from the text.\"\n\nmsgs = [\n    { \"role\": \"system\", \"content\": prompt },\n    { \"role\": \"user\", \"content\": t.input }\n]\n\nt.add_column(input_msgs=msgs)\n</pre> prompt = \"For the following sentence, extract all company names from the text.\"  msgs = [     { \"role\": \"system\", \"content\": prompt },     { \"role\": \"user\", \"content\": t.input } ]  t.add_column(input_msgs=msgs) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 104.58 cells/s]\nAdded 1 column value with 0 errors.\n</pre> Out[5]: <pre>UpdateStatus(num_rows=1, num_computed_values=1, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> <p>Unlike the values of the<code>input</code> column, which users provide, the <code>t.input_msgs</code> column is computed automatically from the <code>t.input</code> column values:</p> In\u00a0[6]: Copied! <pre>t.show()\n</pre> t.show() Out[6]: id input input_msgs 0 On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. [{'role': 'system', 'content': 'For the following sentence, extract all company names from the text.'}, {'role': 'user', 'content': 'On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers.'}] <p>In Pixeltable, OpenAI API calls are exposed as Pixeltable functions, which can be used to create computed columns. You'll need to enter your OpenAI API key now.</p> In\u00a0[7]: Copied! <pre>import os\nimport getpass\n\nif 'OPENAI_API_KEY' not in os.environ:\n    os.environ['OPENAI_API_KEY'] = getpass.getpass('OpenAI API Key:')\n</pre> import os import getpass  if 'OPENAI_API_KEY' not in os.environ:     os.environ['OPENAI_API_KEY'] = getpass.getpass('OpenAI API Key:') <p>Now we can run the prompt against our input data using OpenAI's <code>chat_completions</code> API.</p> In\u00a0[8]: Copied! <pre>from pixeltable.functions import openai\n\nt['chat_output'] = openai.chat_completions(model='gpt-3.5-turbo', messages=t.input_msgs)\nt.show()\n</pre> from pixeltable.functions import openai  t['chat_output'] = openai.chat_completions(model='gpt-3.5-turbo', messages=t.input_msgs) t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  1.90 cells/s]\nAdded 1 column value with 0 errors.\n</pre> Out[8]: id input input_msgs chat_output 0 On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. [{'role': 'system', 'content': 'For the following sentence, extract all company names from the text.'}, {'role': 'user', 'content': 'On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers.'}] {'id': 'chatcmpl-9OttExT1O3SKUhLDIS4F6KYq0BuXa', 'model': 'gpt-3.5-turbo-0125', 'usage': {'total_tokens': 69, 'prompt_tokens': 61, 'completion_tokens': 8}, 'object': 'chat.completion', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': 'Lehman Brothers, Federal Reserve Bank', 'tool_calls': None, 'function_call': None}, 'logprobs': None, 'finish_reason': 'stop'}], 'created': 1715721740, 'system_fingerprint': None} <p>The output of the OpenAI API calls are generally complex JSON structures, which require some navigation to extract the response. We can express this as JSON path expressions and create another computed column:</p> In\u00a0[9]: Copied! <pre>t['response'] = t.chat_output.choices[0].message.content\nt.show()\n</pre> t['response'] = t.chat_output.choices[0].message.content t.show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 237.18 cells/s]\nAdded 1 column value with 0 errors.\n</pre> Out[9]: id input input_msgs chat_output response 0 On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. [{'role': 'system', 'content': 'For the following sentence, extract all company names from the text.'}, {'role': 'user', 'content': 'On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers.'}] {'id': 'chatcmpl-9OttExT1O3SKUhLDIS4F6KYq0BuXa', 'model': 'gpt-3.5-turbo-0125', 'usage': {'total_tokens': 69, 'prompt_tokens': 61, 'completion_tokens': 8}, 'object': 'chat.completion', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': 'Lehman Brothers, Federal Reserve Bank', 'tool_calls': None, 'function_call': None}, 'logprobs': None, 'finish_reason': 'stop'}], 'created': 1715721740, 'system_fingerprint': None} Lehman Brothers, Federal Reserve Bank <p>Let's run a query to look only at the input and output:</p> In\u00a0[10]: Copied! <pre>t.select(t.input, t.response).show()\n</pre> t.select(t.input, t.response).show() Out[10]: input response On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. Lehman Brothers, Federal Reserve Bank <p>Once we have defined these computed columns, much like with a spreadsheet, newly inserted <code>t.input</code> values trigger computation of all derived columns, such as <code>t.response</code>. Let's insert the rest of our data and see how this works.</p> In\u00a0[11]: Copied! <pre>t.insert({'id': i, 'input': sample_inputs[i]} for i in range(1, len(sample_inputs)))\n</pre> t.insert({'id': i, 'input': sample_inputs[i]} for i in range(1, len(sample_inputs))) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:02&lt;00:00,  5.08 cells/s]\nInserting rows into `openai`: 5 rows [00:00, 581.33 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15/15 [00:02&lt;00:00,  5.05 cells/s]\nInserted 5 rows with 0 errors.\n</pre> Out[11]: <pre>UpdateStatus(num_rows=5, num_computed_values=15, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> In\u00a0[12]: Copied! <pre>t.select(t.input, t.response).show()\n</pre> t.select(t.input, t.response).show() Out[12]: input response On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. Lehman Brothers, Federal Reserve Bank The significance of the Lehman Brothers bankruptcy is disputed with some assigning it a pivotal role in the unfolding of subsequent events. Lehman Brothers The principals involved, Ben Bernanke and Henry Paulson, dispute this view, citing a volume of toxic assets at Lehman which made a rescue impossible.[16][17] Immediately following the bankruptcy, JPMorgan Chase provided the broker dealer unit of Lehman Brothers with $138 billion to \"settle securities transactions with customers of Lehman and its clearance parties\" according to a statement made in a New York City Bankruptcy court filing.[18] - Lehman Brothers\\n- JPMorgan Chase The same day, the sale of Merrill Lynch to Bank of America was announced.[19] The beginning of the week was marked by extreme instability in global stock markets, with dramatic drops in market values on Monday, September 15, and Wednesday, September 17. - Merrill Lynch\\n- Bank of America On September 16, the large insurer American International Group (AIG), a significant participant in the credit default swaps markets, suffered a liquidity crisis following the downgrade of its credit rating. - American International Group (AIG) The Federal Reserve, at AIG's request, and after AIG had shown that it could not find lenders willing to save it from insolvency, created a credit facility for up to US$85 billion in exchange for a 79.9% equity interest, and the right to suspend dividends to previously issued common and preferred stock.[20] - The Federal Reserve\\n- AIG In\u00a0[13]: Copied! <pre>t['ground_truth'] = pxt.StringType(nullable=True)\n\nground_truth = [\n    'Lehman Brothers',\n    'Lehman Brothers',\n    'JP Morgan Chase, Lehman Brothers',\n    'Merill Lynch, Bank of America',\n    'American International Group',\n    'American International Group',\n]\n\nfor i, gt in enumerate(ground_truth):\n    t.update({'ground_truth': gt}, where=(t.id == i))\n</pre> t['ground_truth'] = pxt.StringType(nullable=True)  ground_truth = [     'Lehman Brothers',     'Lehman Brothers',     'JP Morgan Chase, Lehman Brothers',     'Merill Lynch, Bank of America',     'American International Group',     'American International Group', ]  for i, gt in enumerate(ground_truth):     t.update({'ground_truth': gt}, where=(t.id == i)) <pre>Added 6 column values with 0 errors.\nInserting rows into `openai`: 1 rows [00:00, 680.78 rows/s]\nInserting rows into `openai`: 1 rows [00:00, 1479.47 rows/s]\nInserting rows into `openai`: 1 rows [00:00, 1845.27 rows/s]\nInserting rows into `openai`: 1 rows [00:00, 1883.39 rows/s]\nInserting rows into `openai`: 1 rows [00:00, 1889.33 rows/s]\nInserting rows into `openai`: 1 rows [00:00, 2525.17 rows/s]\n</pre> <p>And this is what we have so far:</p> In\u00a0[14]: Copied! <pre>t.select(t.input, t.response, t.ground_truth).show()\n</pre> t.select(t.input, t.response, t.ground_truth).show() Out[14]: input response ground_truth On Sunday, September 14, it was announced that Lehman Brothers would file for bankruptcy after the Federal Reserve Bank declined to participate in creating a financial support facility for Lehman Brothers. Lehman Brothers, Federal Reserve Bank Lehman Brothers The significance of the Lehman Brothers bankruptcy is disputed with some assigning it a pivotal role in the unfolding of subsequent events. Lehman Brothers Lehman Brothers The principals involved, Ben Bernanke and Henry Paulson, dispute this view, citing a volume of toxic assets at Lehman which made a rescue impossible.[16][17] Immediately following the bankruptcy, JPMorgan Chase provided the broker dealer unit of Lehman Brothers with $138 billion to \"settle securities transactions with customers of Lehman and its clearance parties\" according to a statement made in a New York City Bankruptcy court filing.[18] - Lehman Brothers\\n- JPMorgan Chase JP Morgan Chase, Lehman Brothers The same day, the sale of Merrill Lynch to Bank of America was announced.[19] The beginning of the week was marked by extreme instability in global stock markets, with dramatic drops in market values on Monday, September 15, and Wednesday, September 17. - Merrill Lynch\\n- Bank of America Merill Lynch, Bank of America The Federal Reserve, at AIG's request, and after AIG had shown that it could not find lenders willing to save it from insolvency, created a credit facility for up to US$85 billion in exchange for a 79.9% equity interest, and the right to suspend dividends to previously issued common and preferred stock.[20] - The Federal Reserve\\n- AIG American International Group On September 16, the large insurer American International Group (AIG), a significant participant in the credit default swaps markets, suffered a liquidity crisis following the downgrade of its credit rating. - American International Group (AIG) American International Group In\u00a0[15]: Copied! <pre>system_prompt = '''\nCompare the following listA and listB of entities, and check if they contain the same entities.\nReturn a JSON object with the following format:\n{\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise}\n'''\n\n@pxt.udf\ndef eval_prompt(listA: str, listB: str) -&gt; list[dict]:\n    return [\n        {'role': 'system', 'content': system_prompt},\n        {'role': 'user', 'content': f'listA: \"{listA}\" \\n listB: \"{listB}\"'}\n    ]\n\nt['eval_prompt'] = eval_prompt(t.response, t.ground_truth)\n</pre> system_prompt = ''' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '''  @pxt.udf def eval_prompt(listA: str, listB: str) -&gt; list[dict]:     return [         {'role': 'system', 'content': system_prompt},         {'role': 'user', 'content': f'listA: \"{listA}\" \\n listB: \"{listB}\"'}     ]  t['eval_prompt'] = eval_prompt(t.response, t.ground_truth) <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:00&lt;00:00, 592.42 cells/s]\nAdded 6 column values with 0 errors.\n</pre> In\u00a0[16]: Copied! <pre>t.select(t.eval_prompt).show()\n</pre> t.select(t.eval_prompt).show() Out[16]: eval_prompt [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"Lehman Brothers, Federal Reserve Bank\"   listB: \"Lehman Brothers\"'}] [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"- Merrill Lynch - Bank of America\"   listB: \"Merill Lynch, Bank of America\"'}] [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"- The Federal Reserve - AIG\"   listB: \"American International Group\"'}] [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"Lehman Brothers\"   listB: \"Lehman Brothers\"'}] [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"- Lehman Brothers - JPMorgan Chase\"   listB: \"JP Morgan Chase, Lehman Brothers\"'}] [{'role': 'system', 'content': ' Compare the following listA and listB of entities, and check if they contain the same entities. Return a JSON object with the following format: {\"reasoning\": explaining your reasoning, \"decision\": 1 if the lists matched, 0 otherwise} '}, {'role': 'user', 'content': 'listA: \"- American International Group (AIG)\"   listB: \"American International Group\"'}] <p>The actual evaluation happens in another computed column. We can use OpenAI's handy <code>response_format</code> parameter to enforce that the output is properly formed JSON.</p> In\u00a0[17]: Copied! <pre>t['eval'] = openai.chat_completions(model='gpt-3.5-turbo', messages=t.eval_prompt, response_format={'type': 'json_object'})\nt['eval_output'] = t.eval.choices[0].message.content\n</pre> t['eval'] = openai.chat_completions(model='gpt-3.5-turbo', messages=t.eval_prompt, response_format={'type': 'json_object'}) t['eval_output'] = t.eval.choices[0].message.content <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:07&lt;00:00,  1.33s/ cells]\nAdded 6 column values with 0 errors.\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:00&lt;00:00, 913.53 cells/s]\nAdded 6 column values with 0 errors.\n</pre> <p>Let's take a look:</p> In\u00a0[18]: Copied! <pre>t.select(t.response, t.ground_truth, t.eval_output).show()\n</pre> t.select(t.response, t.ground_truth, t.eval_output).show() Out[18]: response ground_truth eval_output Lehman Brothers, Federal Reserve Bank Lehman Brothers {\"reasoning\": \"listA contains an additional entity 'Federal Reserve Bank' that listB does not have.\", \"decision\": 0} - The Federal Reserve\\n- AIG American International Group {\"reasoning\": \"The entity 'AIG' is present in both lists, as 'AIG' in listA and 'American International Group' in listB. Therefore, the lists match.\", \"decision\": 1} - Lehman Brothers\\n- JPMorgan Chase JP Morgan Chase, Lehman Brothers {\\n    \"reasoning\": \"The entities in listA are 'Lehman Brothers' and 'JPMorgan Chase', while the entities in listB are 'JP Morgan Chase' and 'Lehman Brothers'. The only difference is in the spelling and formatting of 'JPMorgan Chase'. Since the entities are the same but in different formats, we can consider them as matching.\",\\n    \"decision\": 1\\n} - Merrill Lynch\\n- Bank of America Merill Lynch, Bank of America {\\n    \"reasoning\": \"The two lists do not contain the exact same entities as listA has additional hyphens and listB has a comma instead of a hyphen.\",\\n    \"decision\": 0\\n} Lehman Brothers Lehman Brothers {\\n    \"reasoning\": \"Both listA and listB contain the same entity 'Lehman Brothers'.\",\\n    \"decision\": 1\\n} - American International Group (AIG) American International Group {\\n\"reasoning\": \"The entities in listA and listB are very similar, with listA including the abbreviation 'AIG' at the end. This difference does not change the core entity being referred to, which is 'American International Group'. Therefore, the lists contain the same entity.\",\\n\"decision\": 1\\n} <p>Finally, it's time to pull the <code>decision</code> out of the JSON structs returned by OpenAI. There's just one complication: the <code>chat_completions</code> responses are strings, not JSON structs. We can resolve this with Pixeltable's handy <code>apply</code> method, which turns any Python function into a Pixeltable function. In this case, we'll apply the Python function <code>json.loads</code> to parse the string into a JSON struct.</p> In\u00a0[19]: Copied! <pre>import json\n\nt['eval_decision'] = t.eval_output.apply(json.loads).decision\n</pre> import json  t['eval_decision'] = t.eval_output.apply(json.loads).decision <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 6/6 [00:00&lt;00:00, 662.17 cells/s]\nAdded 6 column values with 0 errors.\n</pre> In\u00a0[20]: Copied! <pre>t.select(t.response, t.ground_truth, t.eval_output, t.eval_decision).show()\n</pre> t.select(t.response, t.ground_truth, t.eval_output, t.eval_decision).show() Out[20]: response ground_truth eval_output eval_decision Lehman Brothers, Federal Reserve Bank Lehman Brothers {\"reasoning\": \"listA contains an additional entity 'Federal Reserve Bank' that listB does not have.\", \"decision\": 0} 0 - The Federal Reserve\\n- AIG American International Group {\"reasoning\": \"The entity 'AIG' is present in both lists, as 'AIG' in listA and 'American International Group' in listB. Therefore, the lists match.\", \"decision\": 1} 1 - Lehman Brothers\\n- JPMorgan Chase JP Morgan Chase, Lehman Brothers {\\n    \"reasoning\": \"The entities in listA are 'Lehman Brothers' and 'JPMorgan Chase', while the entities in listB are 'JP Morgan Chase' and 'Lehman Brothers'. The only difference is in the spelling and formatting of 'JPMorgan Chase'. Since the entities are the same but in different formats, we can consider them as matching.\",\\n    \"decision\": 1\\n} 1 - Merrill Lynch\\n- Bank of America Merill Lynch, Bank of America {\\n    \"reasoning\": \"The two lists do not contain the exact same entities as listA has additional hyphens and listB has a comma instead of a hyphen.\",\\n    \"decision\": 0\\n} 0 Lehman Brothers Lehman Brothers {\\n    \"reasoning\": \"Both listA and listB contain the same entity 'Lehman Brothers'.\",\\n    \"decision\": 1\\n} 1 - American International Group (AIG) American International Group {\\n\"reasoning\": \"The entities in listA and listB are very similar, with listA including the abbreviation 'AIG' at the end. This difference does not change the core entity being referred to, which is 'American International Group'. Therefore, the lists contain the same entity.\",\\n\"decision\": 1\\n} 1"},{"location":"tutorials/working-with-openai/#working-with-openai-in-pixeltable","title":"Working with OpenAI in Pixeltable\u00b6","text":"<p>Pixeltable unifies data and computation into a table interface. In the Pixeltable Basics tutorial, we saw how OpenAI API calls can be incorporated into Pixeltable workflows. In this tutorial, we'll go into more depth on OpenAI integration. You'll need an OpenAI API key to run this demo.</p>"},{"location":"tutorials/working-with-openai/#prerequisites","title":"Prerequisites\u00b6","text":"<ul> <li>An OpenAI account with an API key (https://openai.com/index/openai-api/)</li> </ul>"},{"location":"tutorials/working-with-openai/#important-notes","title":"Important Notes\u00b6","text":"<ul> <li>OpenAI usage may incur costs based on your OpenAI plan.</li> <li>Be mindful of sensitive data and consider security measures when integrating with external services.</li> </ul>"},{"location":"tutorials/working-with-openai/#creating-the-table","title":"Creating the Table\u00b6","text":"<p>First, we'll create a table and populate it with some sample data.</p>"},{"location":"tutorials/working-with-openai/#making-openai-api-calls","title":"Making OpenAI API calls\u00b6","text":"<p>Calling OpenAI API endpoints involves constructing a message object, which we can express in Pixeltable by adding a new computed column.</p>"},{"location":"tutorials/working-with-openai/#adding-ground-truth-data","title":"Adding Ground Truth Data\u00b6","text":"<p>Now let's see how Pixeltable can be used to evaluate a model against ground truth data. We'll start by manually populating a <code>ground_truth</code> column in our table.</p>"},{"location":"tutorials/working-with-openai/#evaluation","title":"Evaluation\u00b6","text":"<p>Now that we have some ground truth available, we can carry out basic evaluations of the GPT outputs, in this case by asking ChatGPT to decide whether the two are equivalent.</p> <p>To start with, we'll create an evaluation prompt. In this case, the prompt requires some bespoke string substitution, so it's easiest to do using a UDF. (See the Pixeltable Basics tutorial and the UDFs in Pixeltable guide for more details on UDFs.)</p>"},{"location":"tutorials/working-with-together/","title":"Working with Together AI Pixeltable","text":"In\u00a0[1]: Copied! <pre># Required libraries\n%pip install -q pixeltable together\n</pre> # Required libraries %pip install -q pixeltable together In\u00a0[1]: Copied! <pre>import pixeltable as pxt\n\npxt.create_dir('together_demo', ignore_errors=True)\n</pre> import pixeltable as pxt  pxt.create_dir('together_demo', ignore_errors=True) <pre>Connected to Pixeltable database at: postgresql://postgres:@/pixeltable?host=/Users/asiegel/.pixeltable/pgdata\nCreated directory `together_demo`.\n</pre> <p>Securely store your Together.ai API key by not hardcoding it into the notebook.</p> In\u00a0[2]: Copied! <pre>import os\nimport getpass\n\nif 'TOGETHER_API_KEY' not in os.environ:\n    os.environ['TOGETHER_API_KEY'] = getpass.getpass('Together API Key: ')\n</pre> import os import getpass  if 'TOGETHER_API_KEY' not in os.environ:     os.environ['TOGETHER_API_KEY'] = getpass.getpass('Together API Key: ') <p>Create a Table: In Pixeltable, create a table with columns to represent your input data and the columns where you want to store the results from Together.ai.</p> In\u00a0[3]: Copied! <pre>from pixeltable.functions.together import completions\n\n# Create a table in Pixeltable and pick a model hosted on Together with some parameters\n\nt = pxt.create_table('together_demo.completions', {'input': pxt.StringType()})\n\nt['output'] = completions(\n    prompt=t.input,\n    model='mistralai/Mixtral-8x7B-v0.1',\n    max_tokens=300,\n    stop=['\\n'],\n    temperature=0.7,\n    top_p=0.9,\n    top_k=40,\n    repetition_penalty=1.1,\n    logprobs=1,\n    echo=True,\n    n=3,\n)\n</pre> from pixeltable.functions.together import completions  # Create a table in Pixeltable and pick a model hosted on Together with some parameters  t = pxt.create_table('together_demo.completions', {'input': pxt.StringType()})  t['output'] = completions(     prompt=t.input,     model='mistralai/Mixtral-8x7B-v0.1',     max_tokens=300,     stop=['\\n'],     temperature=0.7,     top_p=0.9,     top_k=40,     repetition_penalty=1.1,     logprobs=1,     echo=True,     n=3, ) <pre>Created table `completions`.\nAdded 0 column values with 0 errors.\n</pre> In\u00a0[4]: Copied! <pre>t.describe()\n</pre> t.describe() Column Name Type Computed With input string output json completions(input, logprobs=1, temperature=0.7, stop=[ ], model='mistralai/Mixtral-8x7B-v0.1', top_p=0.9, top_k=40, echo=True, max_tokens=300, repetition_penalty=1.1, n=3) In\u00a0[5]: Copied! <pre># Parse the response (output) into a new column\nt['response'] = t.output.choices[0].text\n</pre> # Parse the response (output) into a new column t['response'] = t.output.choices[0].text <pre>Added 0 column values with 0 errors.\n</pre> In\u00a0[6]: Copied! <pre># Start a conversation\nt.insert(input='I want to rule')\nt.select(t.input, t.response).show()\n</pre> # Start a conversation t.insert(input='I want to rule') t.select(t.input, t.response).show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  4.47 cells/s]\nInserting rows into `completions`: 1 rows [00:00, 245.09 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:00&lt;00:00,  4.37 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[6]: input response I want to rule the world. In\u00a0[7]: Copied! <pre>from pixeltable.functions.together import chat_completions\n\n# Create a table in Pixeltable and pick a model hosted on Together with some parameters\n\nchat_t = pxt.create_table('together_demo.chat', {'input': pxt.StringType()})\n\nmessages = [{'role': 'user', 'content': chat_t.input}]\nchat_t['output'] = chat_completions(\n    messages=messages,\n    model='mistralai/Mixtral-8x7B-Instruct-v0.1',\n    max_tokens=300,\n    stop=['\\n'],\n    temperature=0.7,\n    top_p=0.9,\n    top_k=40,\n    repetition_penalty=1.1,\n    logprobs=1,\n    echo=True,\n    n=3,\n)\n</pre> from pixeltable.functions.together import chat_completions  # Create a table in Pixeltable and pick a model hosted on Together with some parameters  chat_t = pxt.create_table('together_demo.chat', {'input': pxt.StringType()})  messages = [{'role': 'user', 'content': chat_t.input}] chat_t['output'] = chat_completions(     messages=messages,     model='mistralai/Mixtral-8x7B-Instruct-v0.1',     max_tokens=300,     stop=['\\n'],     temperature=0.7,     top_p=0.9,     top_k=40,     repetition_penalty=1.1,     logprobs=1,     echo=True,     n=3, ) <pre>Created table `chat`.\nAdded 0 column values with 0 errors.\n</pre> In\u00a0[8]: Copied! <pre>chat_t.describe()\n</pre> chat_t.describe() Column Name Type Computed With input string output json chat_completions([{'role': 'user', 'content': input}], logprobs=1, temperature=0.7, stop=[ ], model='mistralai/Mixtral-8x7B-Instruct-v0.1', top_p=0.9, top_k=40, echo=True, max_tokens=300, repetition_penalty=1.1, n=3) In\u00a0[9]: Copied! <pre># Parse the bot response (output) into a new column\nchat_t['response'] = chat_t.output.choices[0].message.content\n</pre> # Parse the bot response (output) into a new column chat_t['response'] = chat_t.output.choices[0].message.content <pre>Added 0 column values with 0 errors.\n</pre> In\u00a0[10]: Copied! <pre># Start a conversation\nchat_t.insert(input='Can you make me a coffee?')\nchat_t.select(chat_t.input, chat_t.response).show()\n</pre> # Start a conversation chat_t.insert(input='Can you make me a coffee?') chat_t.select(chat_t.input, chat_t.response).show() <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:01&lt;00:00,  1.47 cells/s]\nInserting rows into `chat`: 1 rows [00:00, 203.04 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 2/2 [00:01&lt;00:00,  1.45 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[10]: input response Can you make me a coffee? I'm sorry for any confusion, but I'm an artificial intelligence and do not have the ability to physically make coffee. However, I can provide instructions on how to make a cup of coffee if you'd like! Just let me know what type of coffee you prefer. In\u00a0[11]: Copied! <pre>from pixeltable.functions.together import embeddings\n\nemb_t = pxt.create_table('together_demo.embeddings', {'input': pxt.StringType()})\nemb_t['embed'] = embeddings(\n    input=emb_t.input,\n    model='togethercomputer/m2-bert-80M-8k-retrieval'\n)\n</pre> from pixeltable.functions.together import embeddings  emb_t = pxt.create_table('together_demo.embeddings', {'input': pxt.StringType()}) emb_t['embed'] = embeddings(     input=emb_t.input,     model='togethercomputer/m2-bert-80M-8k-retrieval' ) <pre>Created table `embeddings`.\nAdded 0 column values with 0 errors.\n</pre> In\u00a0[12]: Copied! <pre>emb_t.insert(input='Together AI provides a variety of embeddings models.')\n</pre> emb_t.insert(input='Together AI provides a variety of embeddings models.') <pre>Computing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  3.11 cells/s]\nInserting rows into `embeddings`: 1 rows [00:00, 263.23 rows/s]\nComputing cells: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00,  3.01 cells/s]\nInserted 1 row with 0 errors.\n</pre> Out[12]: <pre>UpdateStatus(num_rows=1, num_computed_values=1, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> In\u00a0[13]: Copied! <pre>emb_t.head()\n</pre> emb_t.head() Out[13]: input embed Together AI provides a variety of embeddings models. [0.016232457, -0.20974171, 0.20096539, 0.15308, -0.33934394, 0.1641776, 0.28299868, 0.15103284, 0.13662423, 0.0044361604, 0.052466832, -0.13507378, -0.12935488, 0.124423794, 0.023793366, -0.20435934, 0.22676797, 0.1209625, -0.034715235, 0.16465378, -0.16237547, -0.16297175, 0.24655177, 0.314733, 0.061162468, -0.27838704, 0.07632538, 0.03980723, 0.03652375, -0.17735523, -0.042062216, -0.14621857, -0.10076542, 0.056929983, 0.011296147, 0.11708491, 0.06328845, 0.16986755, 0.14596735, 0.13139556, -0.13966292, -0.018491898, 0.049842115, -0.12972802, -0.061177313, 0.18479164, -0.25599495, 0.12789905, 0.06758038, -0.17133054, -0.2111011, -0.16792905, -0.21141277, -0.09853814, 0.003973395, -0.21781975, -0.05421263, 0.17835066, 0.073698185, -0.022551578, -0.15593226, 0.08124307, 0.1281974, 0.0080542425, -0.03267917, -0.12479671, -0.010064738, -0.0146909, 0.0007352329, 0.29774678, -0.044923063, -0.19443528, 0.069626346, 0.005396751, -0.08850598, 0.25516367, 0.100371145, -0.04594106, -0.056460228, 0.0725022, -0.005882636, -0.13697596, 0.1823212, 0.15798046, 0.1808659, -0.030637182, 0.15887189, -0.0067441277, 0.22216141, -0.24038352, -0.040920116, 0.045062836, -0.08090567, 0.20003206, -0.15341952, 0.0032852183, 0.11725804, 0.10148666, 0.037926383, 0.13792464, ...] In\u00a0[14]: Copied! <pre>from pixeltable.functions.together import image_generations\n\nimage_t = pxt.create_table('together_demo.images', {'input': pxt.StringType(), 'negative_prompt': pxt.StringType(nullable=True)})\nimage_t['img'] = image_generations(image_t.input, model='runwayml/stable-diffusion-v1-5')\nimage_t['img_2'] = image_generations(\n    image_t.input,\n    model='stabilityai/stable-diffusion-2-1',\n    steps=30,\n    seed=4171780,\n    height=768,\n    width=512,\n    negative_prompt=image_t.negative_prompt\n)\n</pre> from pixeltable.functions.together import image_generations  image_t = pxt.create_table('together_demo.images', {'input': pxt.StringType(), 'negative_prompt': pxt.StringType(nullable=True)}) image_t['img'] = image_generations(image_t.input, model='runwayml/stable-diffusion-v1-5') image_t['img_2'] = image_generations(     image_t.input,     model='stabilityai/stable-diffusion-2-1',     steps=30,     seed=4171780,     height=768,     width=512,     negative_prompt=image_t.negative_prompt ) <pre>Created table `images`.\nAdded 0 column values with 0 errors.\nAdded 0 column values with 0 errors.\n</pre> In\u00a0[15]: Copied! <pre># Start generating Images\nimage_t.insert([\n  {'input': 'A friendly dinosaur playing tennis in a cornfield'},\n  {'input': 'A friendly dinosaur playing tennis in a cornfield',\n    'negative_prompt': 'tennis court'}\n])\n</pre> # Start generating Images image_t.insert([   {'input': 'A friendly dinosaur playing tennis in a cornfield'},   {'input': 'A friendly dinosaur playing tennis in a cornfield',     'negative_prompt': 'tennis court'} ]) <pre>Inserting rows into `images`: 2 rows [00:00, 886.18 rows/s]\nInserted 2 rows with 0 errors.\n</pre> Out[15]: <pre>UpdateStatus(num_rows=2, num_computed_values=0, num_excs=0, updated_cols=[], cols_with_excs=[])</pre> In\u00a0[16]: Copied! <pre>image_t.describe()\nimage_t.select(image_t.input, image_t.negative_prompt).show()\n</pre> image_t.describe() image_t.select(image_t.input, image_t.negative_prompt).show() Column Name Type Computed With input string negative_prompt string img image image_generations(input, model='runwayml/stable-diffusion-v1-5') img_2 image image_generations(input, seed=4171780, model='stabilityai/stable-diffusion-2-1', height=768, steps=30, negative_prompt=negative_prompt, width=512) Out[16]: input negative_prompt A friendly dinosaur playing tennis in a cornfield None A friendly dinosaur playing tennis in a cornfield tennis court In\u00a0[17]: Copied! <pre>image_t.show()\n</pre> image_t.show() Out[17]: input negative_prompt img img_2 A friendly dinosaur playing tennis in a cornfield None A friendly dinosaur playing tennis in a cornfield tennis court"},{"location":"tutorials/working-with-together/#working-with-together-ai-pixeltable","title":"Working with Together AI Pixeltable\u00b6","text":""},{"location":"tutorials/working-with-together/#prerequisites","title":"Prerequisites\u00b6","text":"<ul> <li>A Together AI account with an API key (https://api.together.ai/settings/api-keys)</li> </ul>"},{"location":"tutorials/working-with-together/#important-notes","title":"Important Notes\u00b6","text":"<ul> <li>Together.ai usage may incur costs based on your Together.ai plan.</li> <li>Be mindful of sensitive data and consider security measures when integrating with external services.</li> </ul>"},{"location":"tutorials/working-with-together/#completions","title":"Completions\u00b6","text":""},{"location":"tutorials/working-with-together/#chat-completions","title":"Chat Completions\u00b6","text":""},{"location":"tutorials/working-with-together/#embeddings","title":"Embeddings\u00b6","text":""},{"location":"tutorials/working-with-together/#image-generations","title":"Image Generations\u00b6","text":""},{"location":"tutorials/working-with-together/#learn-more","title":"Learn More\u00b6","text":"<p>To learn more about advanced techniques like RAG operations in Pixeltable, check out the RAG Operations in Pixeltable tutorial.</p> <p>You can also look at how to work with images in Pixeltable: Working with Images.</p> <p>If you have any questions, don't hesitate to reach out.</p>"}]}